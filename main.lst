ca65 V2.16 - Git f19651c
Main file   : main.asm
Current file: main.asm

000000r 1               .include "header.inc"
000000r 2               ; Sets up ROM headers/vectors
000000r 2               
000000r 2               .p816   ; 65816 processor
000000r 2               .i16    ; X/Y are 16 bits
000000r 2               .a8     ; A is 8 bits
000000r 2               
000000r 2               .define ROM_NAME "zoz"
000000r 2               
000000r 2               .segment "HEADER"     ; +$7FE0 in file
000000r 2  7A 6F 7A         .byte ROM_NAME
000003r 2               
000003r 2               .segment "ROMINFO"    ; +$7FD5 in file
000000r 2  30               .byte $30         ; LoROM, fast-capable
000001r 2  00               .byte 0           ; no battery RAM
000002r 2  07               .byte $07         ; 128K ROM
000003r 2  00 00 00 00      .byte 0,0,0,0
000007r 2  AA AA 55 55      .word $AAAA,$5555 ; dummy checksum and complement
00000Br 2               
00000Br 2               ;cop,brk,abort,nmi,reset,irq
00000Br 2               ;cop,abort,nmi,res,brk,irqbrk
00000Br 2               .segment "VECTORS"
000000r 2  00 00 00 00      .word 0, 0, EmptyHandler0, EmptyHandler1, EmptyHandler2, VBlank, Reset, EmptyHandler3
000004r 2  rr rr rr rr  
000008r 2  rr rr rr rr  
000010r 2  00 00 00 00      .word 0, 0, EmptyHandler4, EmptyHandler5, VBlank, EmptyHandler6, Reset, EmptyHandler7
000014r 2  rr rr rr rr  
000018r 2  rr rr rr rr  
000020r 2               
000020r 2               .segment "CODE"
000000r 2               EmptyHandler0:
000000r 2  40           	rti
000001r 2               EmptyHandler1:
000001r 2  40           	rti
000002r 2               EmptyHandler2:
000002r 2  40           	rti
000003r 2               EmptyHandler3:
000003r 2  40           	rti
000004r 2               EmptyHandler4:
000004r 2  40           	rti
000005r 2               EmptyHandler5:
000005r 2  40           	rti
000006r 2               EmptyHandler6:
000006r 2  40           	rti
000007r 2               EmptyHandler7:
000007r 2  40           	rti
000008r 2               
000008r 1               .include "initSNES.inc"
000008r 2               ;------------------------------------------------------------------------
000008r 2               ;-  Written by: Neviksti
000008r 2               ;-     If you use my code, please share your creations with me
000008r 2               ;-     as I am always curious :)
000008r 2               ;------------------------------------------------------------------------
000008r 2               
000008r 2               
000008r 2               ;----------------------------------------------------------------------------
000008r 2               ; InitSNES -- my "standard" initialization of SNES memory and registers
000008r 2               ;----------------------------------------------------------------------------
000008r 2               .macro InitSNES
000008r 2                 sei                     ;disable interrupts
000008r 2                 clc                     ;switch to native mode
000008r 2                 xce
000008r 2               
000008r 2                 REP #$38		; mem/A = 16 bit, X/Y = 16 bit
000008r 2               			;decimal mode off
000008r 2                 .i16
000008r 2                 LDX #$1FFF	;Setup the stack
000008r 2                 TXS			;Transfer Index X to Stack Pointer Register
000008r 2               
000008r 2                 ;do the rest of the initialization in a routine
000008r 2                 JSL InitializeSNES
000008r 2               
000008r 2                 SEP #$20		; mem/A = 8 bit
000008r 2               .endmacro
000008r 2               
000008r 2               ;----------------------------------------------------------------------------
000008r 2               
000008r 2               .segment "CODE"
000008r 2               
000008r 2               InitializeSNES:
000008r 2  4B             PHK			;set Data Bank = Program Bank
000009r 2  AB             PLB
00000Ar 2               
00000Ar 2  A9 00          LDA #$0000	;set Direct Page = $0000
00000Cr 2  5B             TCD			;Transfer Accumulator to Direct Register
00000Dr 2               
00000Dr 2  AE FD 1F       LDX $1FFD		;we clear all the mem at one point ...
000010r 2  8E 72 43       STX $4372  	;so save the return address in a place that won't get overwritten
000013r 2  AE FF 1F       LDX $1FFF
000016r 2  8E 74 43       STX $4374
000019r 2               
000019r 2  E2 20          SEP #$20		; mem/A = 8 bit
00001Br 2  C2 10          REP #$10
00001Dr 2               
00001Dr 2  A9 8F          LDA #$8F
00001Fr 2  8D 00 21       STA $2100		;turn screen off for now, set brightness to normal
000022r 2               
000022r 2  A2 01 21       LDX #$2101
000025r 2               _Loop00:		;regs $2101-$210C
000025r 2  74 00          STZ $00,X		;set Sprite,Character,Tile sizes to lowest, and set addresses to $0000
000027r 2  E8             INX
000028r 2  E0 0D 21       CPX #$210D
00002Br 2  D0 F8          BNE _Loop00
00002Dr 2               
00002Dr 2               _Loop01:		;regs $210D-$2114
00002Dr 2  74 00          STZ $00,X		;Set all BG scroll values to $0000
00002Fr 2  74 00          STZ $00,X
000031r 2  E8             INX
000032r 2  E0 15 21       CPX #$2115
000035r 2  D0 F6          BNE _Loop01
000037r 2               
000037r 2  A9 80          LDA #$80		;reg $2115
000039r 2  8D 15 21       STA $2115		; Initialize VRAM transfer mode to word-access, increment by 1
00003Cr 2               
00003Cr 2  9C 16 21       STZ $2116		;regs $2117-$2117
00003Fr 2  9C 17 21       STZ $2117		;VRAM address = $0000
000042r 2               
000042r 2               			;reg $2118-$2119
000042r 2               			;VRAM write register... don't need to initialize
000042r 2               
000042r 2  9C 1A 21       STZ $211A		;clear Mode7 setting
000045r 2               
000045r 2  A2 1B 21       LDX #$211B
000048r 2               _Loop02:		;regs $211B-$2120
000048r 2  74 00          STZ $00,X		;clear out the Mode7 matrix values
00004Ar 2  74 00          STZ $00,X
00004Cr 2  E8             INX
00004Dr 2  E0 21 21       CPX #$2121
000050r 2  D0 F6          BNE _Loop02
000052r 2               
000052r 2               			;reg $2121 - Color address, doesn't need initilaizing
000052r 2               			;reg $2122 - Color data, is initialized later
000052r 2               
000052r 2  A2 23 21       LDX #$2123
000055r 2               _Loop03:		;regs $2123-$2133
000055r 2  74 00          STZ $00,X		;turn off windows, main screens, sub screens, color addition,
000057r 2  E8             INX			;fixed color = $00, no super-impose (external synchronization),
000058r 2  E0 34 21       CPX #$2134	;no interlaced mode, normal resolution
00005Br 2  D0 F8          BNE _Loop03
00005Dr 2               
00005Dr 2               			;regs $2134-$2136  - multiplication result, no initialization needed
00005Dr 2               			;reg $2137 - software H/V latch, no initialization needed
00005Dr 2               			;reg $2138 - Sprite data read, no initialization needed
00005Dr 2               			;regs $2139-$213A  - VRAM data read, no initialization needed
00005Dr 2               			;reg $213B - Color RAM data read, no initialization needed
00005Dr 2               			;regs $213C-$213D  - H/V latched data read, no initialization needed
00005Dr 2               
00005Dr 2  9C 3E 21       STZ $213E		;reg $213E - might not be necesary, but selects PPU master/slave mode
000060r 2               			;reg $213F - PPU status flag, no initialization needed
000060r 2               
000060r 2               			;reg $2140-$2143 - APU communication regs, no initialization required
000060r 2               
000060r 2               			;reg $2180  -  read/write WRAM register, no initialization required
000060r 2               			;reg $2181-$2183  -  WRAM address, no initialization required
000060r 2               
000060r 2               			;reg $4016-$4017  - serial JoyPad read registers, no need to initialize
000060r 2               
000060r 2               
000060r 2  9C 00 42       STZ $4200		;reg $4200  - disable timers, NMI,and auto-joyread
000063r 2               
000063r 2  A9 FF          LDA #$FF
000065r 2  8D 01 42       STA $4201		;reg $4201  - programmable I/O write port, initalize to allow reading at in-port
000068r 2               
000068r 2               			;regs $4202-$4203  - multiplication registers, no initialization required
000068r 2               			;regs $4204-$4206  - division registers, no initialization required
000068r 2               
000068r 2               			;regs $4207-$4208  - Horizontal-IRQ timer setting, since we disabled this, it is OK to not init
000068r 2               			;regs $4209-$420A  - Vertical-IRQ timer setting, since we disabled this, it is OK to not init
000068r 2               
000068r 2  9C 0B 42       STZ $420B		;reg $420B  - turn off all general DMA channels
00006Br 2  9C 0C 42       STZ $420C		;reg $420C  - turn off all H-MA channels
00006Er 2               
00006Er 2  9C 0D 42       STZ $420D		;reg $420D  - ROM access time to slow (2.68Mhz)
000071r 2               
000071r 2  AD 10 42       LDA $4210		;reg $4210  - NMI status, reading resets
000074r 2               
000074r 2               			;reg $4211  - IRQ status, no need to initialize
000074r 2               			;reg $4212  - H/V blank and JoyRead status, no need to initialize
000074r 2               			;reg $4213  - programmable I/O inport, no need to initialize
000074r 2               
000074r 2               			;reg $4214-$4215  - divide results, no need to initialize
000074r 2               			;reg $4216-$4217  - multiplication or remainder results, no need to initialize
000074r 2               
000074r 2               			;regs $4218-$421f  - JoyPad read registers, no need to initialize
000074r 2               
000074r 2               			;regs $4300-$437F
000074r 2               			;no need to intialize because DMA was disabled above
000074r 2               			;also, we're not sure what all of the registers do, so it is better to leave them at
000074r 2               			;their reset state value
000074r 2               
000074r 2               ;  JSR ClearVRAM      ;Reset VRAM
000074r 2                ; JSR ClearPalette   ;Reset colors
000074r 2               
000074r 2                 ;**** clear Sprite tables ********
000074r 2               
000074r 2  9C 02 21       STZ $2102	;sprites initialized to be off the screen, palette 0, character 0
000077r 2  9C 03 21       STZ $2103
00007Ar 2  A2 80 00       LDX #$0080
00007Dr 2  A9 F0          LDA #$F0
00007Fr 2               _Loop08:
00007Fr 2  8D 04 21       STA $2104	;set X = 240
000082r 2  8D 04 21       STA $2104	;set Y = 240
000085r 2  9C 04 21       STZ $2104	;set character = $00
000088r 2  9C 04 21       STZ $2104	;set priority=0, no flips
00008Br 2  CA             DEX
00008Cr 2  D0 F1          BNE _Loop08
00008Er 2               
00008Er 2  A2 20 00       LDX #$0020
000091r 2               _Loop09:
000091r 2  9C 04 21       STZ $2104		;set size bit=0, x MSB = 0
000094r 2  CA             DEX
000095r 2  D0 FA          BNE _Loop09
000097r 2               
000097r 2                 ;**** clear WRAM ********
000097r 2  9C 81 21       STZ $2181		;set WRAM address to $000000
00009Ar 2  9C 82 21       STZ $2182
00009Dr 2  9C 83 21       STZ $2183
0000A0r 2               
0000A0r 2  A2 08 80       LDX #$8008
0000A3r 2  8E 00 43       STX $4300         ;Set DMA mode to fixed source, BYTE to $2180
0000A6r 2  A2 rr rr       LDX #wram_fill_byte
0000A9r 2  8E 02 43       STX $4302         ;Set source offset
0000ACr 2  A9 rr          LDA #<.bank(wram_fill_byte)
0000AEr 2  8D 04 43       STA $4304         ;Set source bank
0000B1r 2  A2 00 00       LDX #$0000
0000B4r 2  8E 05 43       STX $4305         ;Set transfer size to 64k bytes
0000B7r 2  A9 01          LDA #$01
0000B9r 2  8D 0B 42       STA $420B         ;Initiate transfer
0000BCr 2               
0000BCr 2  A9 01          LDA #$01          ;now set the next 64k bytes
0000BEr 2  8D 0B 42       STA $420B         ;Initiate transfer
0000C1r 2               
0000C1r 2  4B             PHK			;make sure Data Bank = Program Bank
0000C2r 2  AB             PLB
0000C3r 2               
0000C3r 2  58             CLI			;enable interrupts again
0000C4r 2               
0000C4r 2  AE 72 43       LDX $4372  	;get our return address...
0000C7r 2  8E FD 1F       STX $1FFD
0000CAr 2  AD 74 43       LDA $4374
0000CDr 2  8D FF 1F       STA $1FFF
0000D0r 2  6B             RTL
0000D1r 2               
0000D1r 2               wram_fill_byte:
0000D1r 2  00           .byte $00
0000D2r 2               
0000D2r 2               ;----------------------------------------------------------------------------
0000D2r 2               ; ClearVRAM -- Sets every byte of VRAM to zero
0000D2r 2               ; In: None
0000D2r 2               ; Out: None
0000D2r 2               ; Modifies: flags
0000D2r 2               ;----------------------------------------------------------------------------
0000D2r 2               ClearVRAM:
0000D2r 2  48              pha
0000D3r 2  DA              phx
0000D4r 2  08              php
0000D5r 2               
0000D5r 2  C2 30           REP #$30		; mem/A = 8 bit, X/Y = 16 bit
0000D7r 2  E2 20           SEP #$20
0000D9r 2               
0000D9r 2  A9 80           LDA #$80
0000DBr 2  8D 15 21        STA $2115         ;Set VRAM port to word access
0000DEr 2  A2 09 18        LDX #$1809
0000E1r 2  8E 00 43        STX $4300         ;Set DMA mode to fixed source, WORD to $2118/9
0000E4r 2  A2 00 00        LDX #$0000
0000E7r 2  8E 16 21        STX $2116         ;Set VRAM port address to $0000
0000EAr 2  86 00           STX $0000         ;Set $00:0000 to $0000 (assumes scratchpad ram)
0000ECr 2  8E 02 43        STX $4302         ;Set source address to $xx:0000
0000EFr 2  A9 00           LDA #$00
0000F1r 2  8D 04 43        STA $4304         ;Set source bank to $00
0000F4r 2  A2 FF FF        LDX #$FFFF
0000F7r 2  8E 05 43        STX $4305         ;Set transfer size to 64k-1 bytes
0000FAr 2  A9 01           LDA #$01
0000FCr 2  8D 0B 42        STA $420B         ;Initiate transfer
0000FFr 2               
0000FFr 2  9C 19 21        STZ $2119         ;clear the last byte of the VRAM
000102r 2               
000102r 2  28              plp
000103r 2  FA              plx
000104r 2  68              pla
000105r 2  60              RTS
000106r 2               
000106r 2               ;----------------------------------------------------------------------------
000106r 2               ; ClearPalette -- Reset all palette colors to zero
000106r 2               ; In: None
000106r 2               ; Out: None
000106r 2               ; Modifies: flags
000106r 2               ;----------------------------------------------------------------------------
000106r 2               ClearPalette:
000106r 2  DA              PHX
000107r 2  08              PHP
000108r 2  C2 30           REP #$30		; mem/A = 8 bit, X/Y = 16 bit
00010Ar 2  E2 20           SEP #$20
00010Cr 2               
00010Cr 2  9C 21 21        STZ $2121
00010Fr 2  A2 00 01        LDX #$0100
000112r 2               ClearPaletteLoop:
000112r 2  9C 22 21        STZ $2122
000115r 2  9C 22 21        STZ $2122
000118r 2  CA              DEX
000119r 2  D0 F7           BNE ClearPaletteLoop
00011Br 2               
00011Br 2  28              PLP
00011Cr 2  FA              PLX
00011Dr 2  60              RTS
00011Er 2               
00011Er 2               
00011Er 1               .include "defines.asm"
00011Er 2               ;---joypad---
00011Er 2               
00011Er 2               .define JOY_B $80
00011Er 2               .define JOY_Y $40
00011Er 2               .define JOY_SELECT $20
00011Er 2               .define JOY_START $10
00011Er 2               .define JOY_UP $8
00011Er 2               .define JOY_DOWN $4
00011Er 2               .define JOY_LEFT $2
00011Er 2               .define JOY_RIGHT $1
00011Er 2               
00011Er 2               ;---oam pt 2 write masks---
00011Er 2               
00011Er 2               .define SPRITE3_MASK %00111111
00011Er 2               .define SPRITE2_MASK %11001111
00011Er 2               .define SPRITE1_MASK %11110011
00011Er 2               .define SPRITE0_MASK %11111100
00011Er 2               
00011Er 2               ;oam mirror defines
00011Er 2               .define OamMirror $400
00011Er 2               .define Oam2Mirror $600
00011Er 2               .define TilemapMirror $2000
00011Er 2               
00011Er 1               .include "variables.asm"
00011Er 2               .enum ;start at $10 because first 15 bytes are "scratchpad"
00011Er 2               scrollX = $10
00011Er 2               scrollY = scrollX+2 ;12
00011Er 2               playerHSpeed = scrollY+2 ;14
00011Er 2               spriteX = playerHSpeed+2 ;16
00011Er 2               spriteY = spriteX+2 ;18
00011Er 2               playerX = spriteY+2;like sprite x but "relative to tilemap" ;1a
00011Er 2               playerY = playerX+2 ;1c
00011Er 2               playerTileOffset = playerY+2 ;1e
00011Er 2               playerTileNum = playerTileOffset+2 ;20
00011Er 2               collision
00011Er 2               playerAnimDelay = collision+2
00011Er 2               playerAttrs
00011Er 2               playerVSpeed
00011Er 2               playerState
00011Er 2               movementState
00011Er 2               .endenum
00011Er 2               
00011Er 1               .include "macros.asm"
00011Er 2               .macro LoadPalette source, colorIndex, numColors
00011Er 2               ;parameters:
00011Er 2               ;source, color to start on, number of colors to copy
00011Er 2                   lda #colorIndex
00011Er 2                   sta $2121       ; Start at START color
00011Er 2                   lda #<.bank(source)        ; Using : before the parameter gets its bank.
00011Er 2                   ldx #source         ; Not using : gets the offset address.
00011Er 2                   ldy #(numColors * 2)   ; 2 bytes for every color
00011Er 2                   jsr DMAPalette
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro LoadBlockToVRAM source, destination, size
00011Er 2               ;parameters:
00011Er 2               ;source, destination, size
00011Er 2                   lda #$80
00011Er 2                   sta $2115       ; Set VRAM transfer mode to word-access, increment by 1
00011Er 2                   ldx #destination         ; DEST
00011Er 2                   stx $2116       ; $2116: Word address for accessing VRAM.
00011Er 2                   lda #<.bank(source)        ; SRCBANK
00011Er 2                   ldx #source         ; SRCOFFSET
00011Er 2                   ldy #size         ; SIZE
00011Er 2                  jsr LoadVRAM
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro LoadBlockToWRAM source, destination, size
00011Er 2               	ldx #source
00011Er 2               	stx $4302 ;source address
00011Er 2               	lda #<.bank(source)
00011Er 2               	sta $4304 ;bank
00011Er 2               	ldx #size
00011Er 2               	stx $4305
00011Er 2               	ldx #destination ; set wram transfer address
00011Er 2               	stx $2181
00011Er 2               	stz $2183 ;only accesses the first 64k, yolo
00011Er 2               	lda #$80 ;dest = vram port
00011Er 2               	sta $4301
00011Er 2               	stz $4300 ; 1 byte transfer, auto-increment
00011Er 2               	lda #$1
00011Er 2               	sta $420b ;start transfer
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro DMATilemapMirror screen
00011Er 2               	lda #$80
00011Er 2               	sta $2115 ;word-access,increment by one
00011Er 2               	a16
00011Er 2               	lda screen ;calculate offset based on screen parameter
00011Er 2               	xba
00011Er 2               	clc
00011Er 2               	rol a
00011Er 2               	rol a
00011Er 2               	sta $2116 ;vram address to write to
00011Er 2               	rol a
00011Er 2               	ora #$2000
00011Er 2               	sta $4312 ;dma source address
00011Er 2               	a8
00011Er 2               	lda #$7e
00011Er 2               	sta $4314 ;bank
00011Er 2               	ldx #$800
00011Er 2               	stx $4315
00011Er 2               	lda #$18 ;dest = $2118, vram write register
00011Er 2               	sta $4311
00011Er 2               	lda #$1 ;word increment on dest, src increment
00011Er 2               	sta $4310
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro WriteTilemap screen, xOff, yOff, data
00011Er 2               ;point to write to = ($800*screen + $20*yOff+xOff)*2
00011Er 2               ;writes to $0 and $1
00011Er 2               	a16
00011Er 2               	lda screen
00011Er 2               	xba
00011Er 2               	clc
00011Er 2               	rol a
00011Er 2               	rol a
00011Er 2               	rol a ;screens are $800 apart, so multiply it by that
00011Er 2               	sta $0
00011Er 2               	lda yOff ;each "screen" is 32x32 words or $40x$40 bytes
00011Er 2               	; rol a
00011Er 2               	; rol a
00011Er 2               	; rol a
00011Er 2               	; rol a
00011Er 2               	; rol a
00011Er 2               	; rol a
00011Er 2               	xba
00011Er 2               	clc
00011Er 2               	ror a
00011Er 2               	ror a
00011Er 2               	ora $0
00011Er 2               	clc
00011Er 2               	adc xOff ;words, so add twice to multiply by 2
00011Er 2               	clc
00011Er 2               	adc xOff
00011Er 2               	sta $0
00011Er 2               	a8
00011Er 2               	lda #$7e
00011Er 2               	pha
00011Er 2               	plb
00011Er 2               	a16
00011Er 2               	lda data
00011Er 2               	ldx $0
00011Er 2               	sta $2000,x
00011Er 2               	a8
00011Er 2               	lda #$0
00011Er 2               	pha
00011Er 2               	plb
00011Er 2               	stz $0 ;cleanup
00011Er 2               	stz $1 ;cleanup
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro DrawBox screen, x1, y1, x2, y2
00011Er 2               ;note that "coordinates" are tiles, not pixels
00011Er 2               .scope
00011Er 2               	lda x2
00011Er 2               	sta $4
00011Er 2               	lda y1 ;$2 apart because gets read in 16-bit mdode
00011Er 2               	sta $6 ;inside writeTilemap
00011Er 2               	lda y2
00011Er 2               	sta $8
00011Er 2               @DrawVLoop:
00011Er 2               	lda x1
00011Er 2               	sta $2
00011Er 2               @DrawHLoop:
00011Er 2               	WriteTilemap screen, $2, $6, #$1
00011Er 2               	lda $2
00011Er 2               	inc a
00011Er 2               	sta $2
00011Er 2               	cmp $4
00011Er 2               	bne @DrawHLoop
00011Er 2               	lda $6
00011Er 2               	inc a
00011Er 2               	sta $6
00011Er 2               	cmp $8
00011Er 2               	bne @DrawVLoop
00011Er 2               	ldx #$a
00011Er 2               	jsr ClearMem
00011Er 2               .endscope
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro DrawLine screen, x1, x2, yVal
00011Er 2               .scope
00011Er 2               	lda x1
00011Er 2               	sta $2
00011Er 2               	lda x2 ;$2 apart because gets read in 16-bit mdode
00011Er 2               	sta $4 ;inside writeTilemap
00011Er 2               @DrawLoop:
00011Er 2               	WriteTilemap screen, $2, yVal, #$1
00011Er 2               	lda $2
00011Er 2               	inc a
00011Er 2               	sta $2
00011Er 2               	cmp $4
00011Er 2               	bne @DrawLoop
00011Er 2               	ldx #$6
00011Er 2               	jsr ClearMem
00011Er 2               .endscope
00011Er 2               .endmacro
00011Er 2               
00011Er 2               
00011Er 2               .macro SetHScroll hVal
00011Er 2               ;parameter: mem address of horizontal scroll val
00011Er 2               	rep #$20
00011Er 2               	lda hVal
00011Er 2               	sep #$20
00011Er 2               	sta $210D	; BG1 horiz scroll
00011Er 2               	xba
00011Er 2               	sta $210D
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro SetVScroll vVal
00011Er 2               ;parameter: mem address of vertical scroll val
00011Er 2               	rep #$20
00011Er 2               	lda vVal
00011Er 2               	sep #$20
00011Er 2               	sta $210E	; BG1 vert scroll
00011Er 2               	xba
00011Er 2               	sta $210E
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro SetMosaic level
00011Er 2               ;parameter: mosaic level (0-15 dec, 0-f hex)
00011Er 2               	lda level
00011Er 2               	and #$F ;param %=15
00011Er 2               	clc
00011Er 2               	ror a
00011Er 2               	ror a
00011Er 2               	ror a
00011Er 2               	ora #$1
00011Er 2               	sta $2106
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro PositiveDiff val1, val2
00011Er 2               ;puts the difference of val1 and val2 into a
00011Er 2               	lda val1
00011Er 2               	cmp val2
00011Er 2               	bcs @Val1Greater
00011Er 2               	sec
00011Er 2               	lda val2
00011Er 2               	sbc val1
00011Er 2               	jmp @end
00011Er 2               @Val1Greater:
00011Er 2               	sec
00011Er 2               	sbc val2
00011Er 2               @end:
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro a16
00011Er 2               	rep #$20
00011Er 2               	.a16
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro a8
00011Er 2               	sep #$20
00011Er 2               	.a8
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .segment "CODE"
00011Er 2               DMAPalette:
00011Er 2               ;a- data bank
00011Er 2               ;x- data offset
00011Er 2               ;y- size of data
00011Er 2               
00011Er 2               ;processor status onto stack
00011Er 2  8B           	phb
00011Fr 2  08           	php
000120r 2  8E 02 43     	stx $4302 ;address into dma 0 source register
000123r 2  8D 04 43     	sta $4304 ;bank into channel 0 bank register
000126r 2  8C 05 43     	sty $4305 ;number of bytes into channel 0 size
000129r 2  9C 00 43     	stz $4300 ;dma byte mode, increment by 1
00012Cr 2  A9 22        	lda #$22 ;$2122=color palette write
00012Er 2  8D 01 43     	sta $4301
000131r 2  A9 01        	lda #$1
000133r 2  8D 0B 42     	sta $420B ;start transfer
000136r 2               
000136r 2  28           	plp
000137r 2  AB           	plb
000138r 2  60           	rts
000139r 2               
000139r 2               LoadVRAM:
000139r 2               ;a- data bank
000139r 2               ;x- data offset
000139r 2               ;y- num of bytes to copy
000139r 2  8B           	phb
00013Ar 2  08               php         ; Preserve Registers
00013Br 2  8E 02 43         stx $4302   ; Store Data offset into DMA source offset
00013Er 2  8D 04 43         sta $4304   ; Store data Bank into DMA source bank
000141r 2  8C 05 43         sty $4305   ; Store size of data block
000144r 2               
000144r 2  A9 01            lda #$1
000146r 2  8D 00 43         sta $4300   ; Set DMA mode (word, normal increment)
000149r 2  A9 18            lda #$18    ; Set the destination register (VRAM write register)
00014Br 2  8D 01 43         sta $4301
00014Er 2  A9 01            lda #$1    ; Initiate DMA transfer (channel 1)
000150r 2  8D 0B 42     	sta $420B
000153r 2               
000153r 2  28               plp         ; restore registers
000154r 2  AB           	plb
000155r 2  60               rts         ; return
000156r 2               
000156r 2               ClearMem:
000156r 2               ;x- amount of ram to clear
000156r 2               @ClearLoop:
000156r 2  74 00        	stz $0, x
000158r 2  CA           	dex
000159r 2  D0 FB        	bne @ClearLoop
00015Br 2  64 00        	stz $0
00015Dr 2  60           	rts
00015Er 2               
00015Er 2               
00015Er 1               .include "sprites.asm"
00015Er 2               spriteNum = $0
00015Er 2               oam2Data = $1
00015Er 2               oam2WriteIndex = $2
00015Er 2               
00015Er 2               .macro LoadSprite sprite, xOffset, yOffset, tileNum, attributes, xBit, size
00015Er 2               ;parameters: sprite num, pointer to x coord, pointer to y coord, pointer to tile num, attributes,first bit of x coordinate, big/small
00015Er 2               ;shoutout to nintendo for making me go through all this bullshit, can't have
00015Er 2               ; all the memory together or something sane
00015Er 2               	lda sprite
00015Er 2               	sta spriteNum
00015Er 2               	a16
00015Er 2               	lda sprite
00015Er 2               	clc
00015Er 2               	rol a
00015Er 2               	rol a ;multiply sprite num by 4 because each index in oam table is 4 bytes
00015Er 2               	tax
00015Er 2               	a8
00015Er 2               	lda xOffset
00015Er 2               	sta OamMirror,x
00015Er 2               	inx
00015Er 2               	lda yOffset
00015Er 2               	sta OamMirror,x
00015Er 2               	inx
00015Er 2               	lda tileNum
00015Er 2               	sta OamMirror,x
00015Er 2               	inx
00015Er 2               	lda attributes
00015Er 2               	sta OamMirror,x
00015Er 2               
00015Er 2               	lda xBit
00015Er 2               	and #$1 ;make sure only 1 bit
00015Er 2               	sta oam2Data ;mess around with first bit of x coordinate b/c nintendo stored it separately
00015Er 2               	lda size
00015Er 2               	and #$1 ;combine sprite size and msb of xpos
00015Er 2               	ror a
00015Er 2               	ora oam2Data
00015Er 2               	sta oam2Data
00015Er 2               	lda spriteNum
00015Er 2               	clc
00015Er 2               	ror a ;4 sprites per oam table byte
00015Er 2               	ror a
00015Er 2               	and #$7F
00015Er 2               	sta oam2WriteIndex
00015Er 2               	jsr SetOam2Mirror
00015Er 2               .endmacro
00015Er 2               
00015Er 2               .segment "CODE"
00015Er 2               InitSprites:
00015Er 2  08           	php
00015Fr 2  A9 01        	lda #$1
000161r 2  A2 00 00     	ldx #$0
000164r 2               OamInitLoop: ;apparently just setting the sprites to $100 doesn't actually cause them to be removed from the scanline limit
000164r 2  9D 00 04     	sta OamMirror,x
000167r 2  E8           	inx
000168r 2  E8           	inx
000169r 2  E8           	inx
00016Ar 2  E8           	inx
00016Br 2  E0 00 02     	cpx #$200
00016Er 2  D0 F4        	bne OamInitLoop
000170r 2  A9 55        	lda #$55
000172r 2  A2 00 00     	ldx #$0
000175r 2               Oam2InitLoop:
000175r 2  9D 00 06     	sta Oam2Mirror,x
000178r 2  E8           	inx
000179r 2  E0 20 00     	cpx #$20 ;size of oam pt 2
00017Cr 2  D0 F7        	bne Oam2InitLoop
00017Er 2  28           	plp
00017Fr 2  60           	rts
000180r 2               
000180r 2               SetOam2Mirror:
000180r 2  08           	php
000181r 2  A5 00        	lda $0
000183r 2  29 03        	and #$3 ;check where in the byte to place 1st x bit/sprite size
000185r 2  C9 00        	cmp #0
000187r 2  F0 0C        	beq Sprite0
000189r 2  C9 01        	cmp #1
00018Br 2  F0 17        	beq Sprite1
00018Dr 2  C9 02        	cmp #2
00018Fr 2  F0 27        	beq Sprite2
000191r 2  C9 03        	cmp #3
000193r 2  F0 3B        	beq Sprite3
000195r 2               
000195r 2               Sprite0:
000195r 2  A6 02        	ldx oam2WriteIndex
000197r 2  BD 00 06     	lda Oam2Mirror,x
00019Ar 2  29 FC        	and #SPRITE0_MASK
00019Cr 2  05 01        	ora oam2Data
00019Er 2  9D 00 06     	sta Oam2Mirror,x
0001A1r 2  4C rr rr     	jmp EndBitStuff
0001A4r 2               
0001A4r 2               Sprite1:
0001A4r 2  18           	clc
0001A5r 2  66 01        	ror oam2Data
0001A7r 2  66 01        	ror oam2Data
0001A9r 2               
0001A9r 2  A6 02        	ldx oam2WriteIndex
0001ABr 2  BD 00 06     	lda Oam2Mirror,x
0001AEr 2  29 F3        	and #SPRITE1_MASK
0001B0r 2  05 01        	ora oam2Data
0001B2r 2  9D 00 06     	sta Oam2Mirror,x
0001B5r 2  4C rr rr     	jmp EndBitStuff
0001B8r 2               Sprite2:
0001B8r 2  18           	clc
0001B9r 2  66 01        	ror oam2Data
0001BBr 2  66 01        	ror oam2Data
0001BDr 2  66 01        	ror oam2Data
0001BFr 2  66 01        	ror oam2Data
0001C1r 2               
0001C1r 2  A6 02        	ldx oam2WriteIndex
0001C3r 2  BD 00 06     	lda Oam2Mirror,x
0001C6r 2  29 CF        	and #SPRITE2_MASK
0001C8r 2  05 01        	ora oam2Data
0001CAr 2  9D 00 06     	sta Oam2Mirror,x
0001CDr 2  4C rr rr     	jmp EndBitStuff
0001D0r 2               Sprite3:
0001D0r 2  18           	clc
0001D1r 2  66 01        	ror oam2Data
0001D3r 2  66 01        	ror oam2Data
0001D5r 2  66 01        	ror oam2Data
0001D7r 2  66 01        	ror oam2Data
0001D9r 2  66 01        	ror oam2Data
0001DBr 2  66 01        	ror oam2Data
0001DDr 2               
0001DDr 2  A6 02        	ldx oam2WriteIndex
0001DFr 2  BD 00 06     	lda Oam2Mirror,x
0001E2r 2  29 3F        	and #SPRITE3_MASK
0001E4r 2  05 01        	ora oam2Data
0001E6r 2  9D 00 06     	sta Oam2Mirror,x
0001E9r 2  4C rr rr     	jmp EndBitStuff
0001ECr 2               
0001ECr 2               EndBitStuff:
0001ECr 2  28           	plp
0001EDr 2  60           	rts
0001EEr 2               
0001EEr 2               
0001EEr 1               .include "art.asm"
0001EEr 2               BGPalette:
0001EEr 2  00 00 10 00  	.INCBIN ".\art\bgtiles.clr"
0001F2r 2  00 02 10 02  
0001F6r 2  00 40 10 40  
0003EEr 2               
0003EEr 2               SpritePalette:
0003EEr 2  00 00 10 00  	.INCBIN ".\art\larry.clr"
0003F2r 2  9F 5F 66 72  
0003F6r 2  C5 0D 1D 6F  
0005EEr 2               
0005EEr 2               LarryTiles:
0005EEr 2               	.define NUM_LARRY_TILES $E
0005EEr 2               	.define LARRY_OFFSET $20
0005EEr 2               	.define LARRY_ANIMATION_DELAY $2 ;number of frames between incrementing movement
0005EEr 2  00 00 00 00  	.INCBIN ".\art\larry.pic"
0005F2r 2  00 00 00 00  
0005F6r 2  00 0F 00 1F  
000DEEr 2               BGTiles:
000DEEr 2  00 00 00 00  	.incbin ".\art\bgtiles.pic"
000DF2r 2  00 00 00 00  
000DF6r 2  00 00 00 00  
0011EEr 2               
0011EEr 2               BGTilemap:
0011EEr 2               	;top left screen
0011EEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0011F2r 2  00 00 00 00  
0011F6r 2  00 00 00 00  
00122Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001232r 2  00 00 00 00  
001236r 2  00 00 00 00  
00126Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001272r 2  00 00 00 00  
001276r 2  00 00 00 00  
0012AEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0012B2r 2  00 00 00 00  
0012B6r 2  00 00 00 00  
0012EEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0012F2r 2  00 00 00 00  
0012F6r 2  00 00 00 00  
00132Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001332r 2  00 00 00 00  
001336r 2  00 00 00 00  
00136Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001372r 2  00 00 00 00  
001376r 2  00 00 00 00  
0013AEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0013B2r 2  00 00 00 00  
0013B6r 2  00 00 00 00  
0013EEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0013F2r 2  00 00 00 00  
0013F6r 2  00 00 00 00  
00142Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001432r 2  00 00 00 00  
001436r 2  00 00 00 00  
00146Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001472r 2  00 00 00 00  
001476r 2  00 00 00 00  
0014AEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0014B2r 2  00 00 00 00  
0014B6r 2  00 00 00 00  
0014EEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0014F2r 2  00 00 00 00  
0014F6r 2  00 00 00 00  
00152Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001532r 2  00 00 00 00  
001536r 2  00 00 00 00  
00156Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001572r 2  00 00 00 00  
001576r 2  00 00 00 00  
0015AEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0015B2r 2  00 00 00 00  
0015B6r 2  00 00 00 00  
0015EEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0015F2r 2  00 00 00 00  
0015F6r 2  00 00 00 00  
00162Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001632r 2  00 00 00 00  
001636r 2  00 00 00 00  
00166Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001672r 2  00 00 00 00  
001676r 2  00 00 00 00  
0016AEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0016B2r 2  00 00 00 00  
0016B6r 2  00 00 00 00  
0016EEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0016F2r 2  00 00 00 00  
0016F6r 2  00 00 00 00  
00172Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001732r 2  00 00 00 00  
001736r 2  00 00 00 00  
00176Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001772r 2  00 00 00 00  
001776r 2  00 00 00 00  
0017AEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0017B2r 2  00 00 00 00  
0017B6r 2  00 00 00 00  
0017EEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0017F2r 2  00 00 00 00  
0017F6r 2  00 00 00 00  
00182Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001832r 2  00 00 00 00  
001836r 2  00 00 00 00  
00186Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001872r 2  00 00 00 00  
001876r 2  00 00 00 00  
0018AEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0018B2r 2  00 00 00 00  
0018B6r 2  00 00 00 00  
0018EEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0018F2r 2  00 00 00 00  
0018F6r 2  00 00 00 00  
00192Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001932r 2  00 00 00 00  
001936r 2  00 00 00 00  
00196Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001972r 2  00 00 00 00  
001976r 2  00 00 00 00  
0019AEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0019B2r 2  00 00 00 00  
0019B6r 2  00 00 00 00  
0019EEr 2               
0019EEr 2               	;top right screen
0019EEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0019F2r 2  00 00 00 00  
0019F6r 2  00 00 00 00  
001A2Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001A32r 2  00 00 00 00  
001A36r 2  00 00 00 00  
001A6Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001A72r 2  00 00 00 00  
001A76r 2  00 00 00 00  
001AAEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001AB2r 2  00 00 00 00  
001AB6r 2  00 00 00 00  
001AEEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001AF2r 2  00 00 00 00  
001AF6r 2  00 00 00 00  
001B2Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001B32r 2  00 00 00 00  
001B36r 2  00 00 00 00  
001B6Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001B72r 2  00 00 00 00  
001B76r 2  00 00 00 00  
001BAEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001BB2r 2  00 00 00 00  
001BB6r 2  00 00 00 00  
001BEEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001BF2r 2  00 00 00 00  
001BF6r 2  00 00 00 00  
001C2Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$1,$0,$0,$1,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001C32r 2  00 00 00 00  
001C36r 2  00 00 00 00  
001C6Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001C72r 2  00 00 00 00  
001C76r 2  00 00 00 00  
001CAEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001CB2r 2  00 00 00 00  
001CB6r 2  00 00 00 00  
001CEEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$1,$1,$1,$1,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001CF2r 2  00 00 00 00  
001CF6r 2  00 00 00 00  
001D2Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001D32r 2  00 00 00 00  
001D36r 2  00 00 00 00  
001D6Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001D72r 2  00 00 00 00  
001D76r 2  00 00 00 00  
001DAEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001DB2r 2  00 00 00 00  
001DB6r 2  00 00 00 00  
001DEEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001DF2r 2  00 00 00 00  
001DF6r 2  00 00 00 00  
001E2Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001E32r 2  00 00 00 00  
001E36r 2  00 00 00 00  
001E6Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001E72r 2  00 00 00 00  
001E76r 2  00 00 00 00  
001EAEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001EB2r 2  00 00 00 00  
001EB6r 2  00 00 00 00  
001EEEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001EF2r 2  00 00 00 00  
001EF6r 2  00 00 00 00  
001F2Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001F32r 2  00 00 00 00  
001F36r 2  00 00 00 00  
001F6Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001F72r 2  00 00 00 00  
001F76r 2  00 00 00 00  
001FAEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001FB2r 2  00 00 00 00  
001FB6r 2  00 00 00 00  
001FEEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001FF2r 2  00 00 00 00  
001FF6r 2  00 00 00 00  
00202Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002032r 2  00 00 00 00  
002036r 2  00 00 00 00  
00206Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002072r 2  00 00 00 00  
002076r 2  00 00 00 00  
0020AEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0020B2r 2  00 00 00 00  
0020B6r 2  00 00 00 00  
0020EEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0020F2r 2  00 00 00 00  
0020F6r 2  00 00 00 00  
00212Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002132r 2  00 00 00 00  
002136r 2  00 00 00 00  
00216Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002172r 2  00 00 00 00  
002176r 2  00 00 00 00  
0021AEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0021B2r 2  00 00 00 00  
0021B6r 2  00 00 00 00  
0021EEr 2               
0021EEr 2               	;bottom left screen
0021EEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0021F2r 2  00 00 00 00  
0021F6r 2  00 00 00 00  
00222Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002232r 2  00 00 00 00  
002236r 2  00 00 00 00  
00226Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002272r 2  00 00 00 00  
002276r 2  00 00 00 00  
0022AEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0022B2r 2  00 00 00 00  
0022B6r 2  00 00 00 00  
0022EEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0022F2r 2  00 00 00 00  
0022F6r 2  00 00 00 00  
00232Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002332r 2  00 00 00 00  
002336r 2  00 00 00 00  
00236Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002372r 2  00 00 00 00  
002376r 2  00 00 00 00  
0023AEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0023B2r 2  00 00 00 00  
0023B6r 2  00 00 00 00  
0023EEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0023F2r 2  00 00 00 00  
0023F6r 2  00 00 00 00  
00242Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002432r 2  00 00 00 00  
002436r 2  00 00 00 00  
00246Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002472r 2  00 00 00 00  
002476r 2  00 00 00 00  
0024AEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0024B2r 2  00 00 00 00  
0024B6r 2  00 00 00 00  
0024EEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0024F2r 2  00 00 00 00  
0024F6r 2  00 00 00 00  
00252Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002532r 2  00 00 00 00  
002536r 2  00 00 00 00  
00256Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002572r 2  00 00 00 00  
002576r 2  00 00 00 00  
0025AEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0025B2r 2  00 00 00 00  
0025B6r 2  00 00 00 00  
0025EEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0025F2r 2  00 00 00 00  
0025F6r 2  00 00 00 00  
00262Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002632r 2  00 00 00 00  
002636r 2  00 00 00 00  
00266Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002672r 2  00 00 00 00  
002676r 2  00 00 00 00  
0026AEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0026B2r 2  00 00 00 00  
0026B6r 2  00 00 00 00  
0026EEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0026F2r 2  00 00 00 00  
0026F6r 2  00 00 00 00  
00272Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002732r 2  00 00 00 00  
002736r 2  00 00 00 00  
00276Er 2  00 00 00 00  	.word $0,$0,$0,$0,$1,$1,$1,$1,$1,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002772r 2  00 00 00 00  
002776r 2  01 00 01 00  
0027AEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0027B2r 2  00 00 00 00  
0027B6r 2  00 00 00 00  
0027EEr 2  00 00 01 00  	.word $0,$1,$1,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0027F2r 2  01 00 00 00  
0027F6r 2  00 00 00 00  
00282Er 2  00 00 01 00  	.word $0,$1,$1,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002832r 2  01 00 00 00  
002836r 2  00 00 00 00  
00286Er 2  00 00 01 00  	.word $0,$1,$1,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002872r 2  01 00 00 00  
002876r 2  00 00 00 00  
0028AEr 2  00 00 01 00  	.word $0,$1,$1,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0028B2r 2  01 00 00 00  
0028B6r 2  00 00 00 00  
0028EEr 2  00 00 01 00  	.word $0,$1,$1,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0028F2r 2  01 00 00 00  
0028F6r 2  00 00 00 00  
00292Er 2  01 00 01 00  	.word $1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1
002932r 2  01 00 01 00  
002936r 2  01 00 01 00  
00296Er 2  01 00 01 00  	.word $1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1
002972r 2  01 00 01 00  
002976r 2  01 00 01 00  
0029AEr 2  01 00 01 00  	.word $1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1
0029B2r 2  01 00 01 00  
0029B6r 2  01 00 01 00  
0029EEr 2               	;bottom right screen
0029EEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0029F2r 2  00 00 00 00  
0029F6r 2  00 00 00 00  
002A2Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002A32r 2  00 00 00 00  
002A36r 2  00 00 00 00  
002A6Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002A72r 2  00 00 00 00  
002A76r 2  00 00 00 00  
002AAEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002AB2r 2  00 00 00 00  
002AB6r 2  00 00 00 00  
002AEEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002AF2r 2  00 00 00 00  
002AF6r 2  00 00 00 00  
002B2Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002B32r 2  00 00 00 00  
002B36r 2  00 00 00 00  
002B6Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002B72r 2  00 00 00 00  
002B76r 2  00 00 00 00  
002BAEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002BB2r 2  00 00 00 00  
002BB6r 2  00 00 00 00  
002BEEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002BF2r 2  00 00 00 00  
002BF6r 2  00 00 00 00  
002C2Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002C32r 2  00 00 00 00  
002C36r 2  00 00 00 00  
002C6Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002C72r 2  00 00 00 00  
002C76r 2  00 00 00 00  
002CAEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002CB2r 2  00 00 00 00  
002CB6r 2  00 00 00 00  
002CEEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002CF2r 2  00 00 00 00  
002CF6r 2  00 00 00 00  
002D2Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002D32r 2  00 00 00 00  
002D36r 2  00 00 00 00  
002D6Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002D72r 2  00 00 00 00  
002D76r 2  00 00 00 00  
002DAEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002DB2r 2  00 00 00 00  
002DB6r 2  00 00 00 00  
002DEEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002DF2r 2  00 00 00 00  
002DF6r 2  00 00 00 00  
002E2Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002E32r 2  00 00 00 00  
002E36r 2  00 00 00 00  
002E6Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002E72r 2  00 00 00 00  
002E76r 2  00 00 00 00  
002EAEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002EB2r 2  00 00 00 00  
002EB6r 2  00 00 00 00  
002EEEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002EF2r 2  00 00 00 00  
002EF6r 2  00 00 00 00  
002F2Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002F32r 2  00 00 00 00  
002F36r 2  00 00 00 00  
002F6Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002F72r 2  00 00 00 00  
002F76r 2  00 00 00 00  
002FAEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002FB2r 2  00 00 00 00  
002FB6r 2  00 00 00 00  
002FEEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002FF2r 2  00 00 00 00  
002FF6r 2  00 00 00 00  
00302Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003032r 2  00 00 00 00  
003036r 2  00 00 00 00  
00306Er 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003072r 2  00 00 00 00  
003076r 2  00 00 00 00  
0030AEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0030B2r 2  00 00 00 00  
0030B6r 2  00 00 00 00  
0030EEr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0030F2r 2  00 00 00 00  
0030F6r 2  00 00 00 00  
00312Er 2  01 00 01 00  	.word $1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1
003132r 2  01 00 01 00  
003136r 2  01 00 01 00  
00316Er 2  01 00 01 00  	.word $1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1
003172r 2  01 00 01 00  
003176r 2  01 00 01 00  
0031AEr 2  01 00 01 00  	.word $1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1
0031B2r 2  01 00 01 00  
0031B6r 2  01 00 01 00  
0031EEr 2               
0031EEr 2               CollisionMap: ;like bg map but in a more "friendly" format
0031EEr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0031F2r 2  00 00 00 00  
0031F6r 2  00 00 00 00  
00322Er 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003232r 2  00 00 00 00  
003236r 2  00 00 00 00  
00326Er 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003272r 2  00 00 00 00  
003276r 2  00 00 00 00  
0032AEr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0032B2r 2  00 00 00 00  
0032B6r 2  00 00 00 00  
0032EEr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0032F2r 2  00 00 00 00  
0032F6r 2  00 00 00 00  
00332Er 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003332r 2  00 00 00 00  
003336r 2  00 00 00 00  
00336Er 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003372r 2  00 00 00 00  
003376r 2  00 00 00 00  
0033AEr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0033B2r 2  00 00 00 00  
0033B6r 2  00 00 00 00  
0033EEr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0033F2r 2  00 00 00 00  
0033F6r 2  00 00 00 00  
00342Er 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003432r 2  00 00 00 00  
003436r 2  00 00 00 00  
00346Er 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003472r 2  00 00 00 00  
003476r 2  00 00 00 00  
0034AEr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0034B2r 2  00 00 00 00  
0034B6r 2  00 00 00 00  
0034EEr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0034F2r 2  00 00 00 00  
0034F6r 2  00 00 00 00  
00352Er 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003532r 2  00 00 00 00  
003536r 2  00 00 00 00  
00356Er 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003572r 2  00 00 00 00  
003576r 2  00 00 00 00  
0035AEr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0035B2r 2  00 00 00 00  
0035B6r 2  00 00 00 00  
0035EEr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0035F2r 2  00 00 00 00  
0035F6r 2  00 00 00 00  
00362Er 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003632r 2  00 00 00 00  
003636r 2  00 00 00 00  
00366Er 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003672r 2  00 00 00 00  
003676r 2  00 00 00 00  
0036AEr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0036B2r 2  00 00 00 00  
0036B6r 2  00 00 00 00  
0036EEr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0036F2r 2  00 00 00 00  
0036F6r 2  00 00 00 00  
00372Er 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003732r 2  00 00 00 00  
003736r 2  00 00 00 00  
00376Er 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003772r 2  00 00 00 00  
003776r 2  00 00 00 00  
0037AEr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0037B2r 2  00 00 00 00  
0037B6r 2  00 00 00 00  
0037EEr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0037F2r 2  00 00 00 00  
0037F6r 2  00 00 00 00  
00382Er 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003832r 2  00 00 00 00  
003836r 2  00 00 00 00  
00386Er 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003872r 2  00 00 00 00  
003876r 2  00 00 00 00  
0038AEr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0038B2r 2  00 00 00 00  
0038B6r 2  00 00 00 00  
0038EEr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0038F2r 2  00 00 00 00  
0038F6r 2  00 00 00 00  
00392Er 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003932r 2  00 00 00 00  
003936r 2  00 00 00 00  
00396Er 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003972r 2  00 00 00 00  
003976r 2  00 00 00 00  
0039AEr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0039B2r 2  00 00 00 00  
0039B6r 2  00 00 00 00  
0039EEr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0039F2r 2  00 00 00 00  
0039F6r 2  00 00 00 00  
003A2Er 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003A32r 2  00 00 00 00  
003A36r 2  00 00 00 00  
003A6Er 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003A72r 2  00 00 00 00  
003A76r 2  00 00 00 00  
003AAEr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003AB2r 2  00 00 00 00  
003AB6r 2  00 00 00 00  
003AEEr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003AF2r 2  00 00 00 00  
003AF6r 2  00 00 00 00  
003B2Er 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003B32r 2  00 00 00 00  
003B36r 2  00 00 00 00  
003B6Er 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003B72r 2  00 00 00 00  
003B76r 2  00 00 00 00  
003BAEr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003BB2r 2  00 00 00 00  
003BB6r 2  00 00 00 00  
003BEEr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003BF2r 2  00 00 00 00  
003BF6r 2  00 00 00 00  
003C2Er 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003C32r 2  00 00 00 00  
003C36r 2  00 00 00 00  
003C6Er 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003C72r 2  00 00 00 00  
003C76r 2  00 00 00 00  
003CAEr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003CB2r 2  00 00 00 00  
003CB6r 2  00 00 00 00  
003CEEr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003CF2r 2  00 00 00 00  
003CF6r 2  00 00 00 00  
003D2Er 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003D32r 2  00 00 00 00  
003D36r 2  00 00 00 00  
003D6Er 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003D72r 2  00 00 00 00  
003D76r 2  00 00 00 00  
003DAEr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003DB2r 2  00 00 00 00  
003DB6r 2  00 00 00 00  
003DEEr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003DF2r 2  00 00 00 00  
003DF6r 2  00 00 00 00  
003E2Er 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003E32r 2  00 00 00 00  
003E36r 2  00 00 00 00  
003E6Er 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003E72r 2  00 00 00 00  
003E76r 2  00 00 00 00  
003EAEr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003EB2r 2  00 00 00 00  
003EB6r 2  00 00 00 00  
003EEEr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003EF2r 2  00 00 00 00  
003EF6r 2  00 00 00 00  
003F2Er 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003F32r 2  00 00 00 00  
003F36r 2  00 00 00 00  
003F6Er 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003F72r 2  00 00 00 00  
003F76r 2  00 00 00 00  
003FAEr 2  00 00 00 00  	.byte $0,$0,$0,$0,$1,$1,$1,$1,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003FB2r 2  01 01 01 01  
003FB6r 2  00 00 00 00  
003FEEr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003FF2r 2  00 00 00 00  
003FF6r 2  00 00 00 00  
00402Er 2  00 01 01 00  	.byte $0,$1,$1,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
004032r 2  00 00 00 00  
004036r 2  00 00 00 00  
00406Er 2  00 01 01 00  	.byte $0,$1,$1,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
004072r 2  00 00 00 00  
004076r 2  00 00 00 00  
0040AEr 2  00 01 01 00  	.byte $0,$1,$1,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0040B2r 2  00 00 00 00  
0040B6r 2  00 00 00 00  
0040EEr 2  00 01 01 00  	.byte $0,$1,$1,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0040F2r 2  00 00 00 00  
0040F6r 2  00 00 00 00  
00412Er 2  00 01 01 00  	.byte $0,$1,$1,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
004132r 2  00 00 00 00  
004136r 2  00 00 00 00  
00416Er 2  01 01 01 01  	.byte $1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1
004172r 2  01 01 01 01  
004176r 2  01 01 01 01  
0041AEr 2  01 01 01 01  	.byte $1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1
0041B2r 2  01 01 01 01  
0041B6r 2  01 01 01 01  
0041EEr 2  01 01 01 01  	.byte $1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1
0041F2r 2  01 01 01 01  
0041F6r 2  01 01 01 01  
00422Er 2               
00422Er 2               
00422Er 1               .include "larry.asm"
00422Er 2               .macro HandleLarry xPos, yPos, tileNum
00422Er 2               ;parameters: pointer to xpos, pointer to ypos, pointer to tile number
00422Er 2               	lda xPos
00422Er 2               	sta $4
00422Er 2               	lda yPos
00422Er 2               	sta $5
00422Er 2               	lda tileNum
00422Er 2               	sta $6
00422Er 2               	LoadSprite #0, $4, $5, $6, playerAttrs, #0, #0
00422Er 2               	lda $5 ;add $10 to sprite y pos because second 16x16 sprite is directly below first
00422Er 2               	clc
00422Er 2               	adc #$10
00422Er 2               	sta $5
00422Er 2               
00422Er 2               	lda $6
00422Er 2               	clc
00422Er 2               	adc #LARRY_OFFSET
00422Er 2               	sta $6
00422Er 2               	LoadSprite #1, $4, $5, $6, playerAttrs, #0, #0
00422Er 2               	ldx $7
00422Er 2               	ClearMemRange $0, #$7
00422Er 2               .endmacro
00422Er 2               
00422Er 2               .macro ClearMemRange start, range
00422Er 2               ;start-address to start clearing
00422Er 2               ;range-num of bytes to clear
00422Er 2               .scope
00422Er 2               	ldx #$0
00422Er 2               	@loop:
00422Er 2               	stz start,x
00422Er 2               	inx
00422Er 2               	cpx range
00422Er 2               	bne @loop
00422Er 2               .endscope
00422Er 2               .endmacro
00422Er 2               
00422Er 2               ;sprite constants
00422Er 2               .define LARRY_ACCEL $1
00422Er 2               .define MAX_LARRY_SPEED $8
00422Er 2               .define MAX_LARRY_JUMP_HEIGHT $10
00422Er 2               .define MAX_LARRY_FALL_SPEED $8
00422Er 2               ;various movement states
00422Er 2               .define STATE_NONE $0
00422Er 2               .define STATE_RIGHT_PRESSED $1
00422Er 2               .define STATE_RIGHT_RELEASED $2
00422Er 2               .define STATE_LEFT_PRESSED $3
00422Er 2               .define STATE_LEFT_RELEASED $4
00422Er 2               
00422Er 2               ;player states
00422Er 2               .define STATE_GROUND $0
00422Er 2               .define STATE_JUMP_RISE $1
00422Er 2               .define STATE_JUMP_FALL $2
00422Er 2               
00422Er 2               SetPlayerVals:
00422Er 2               	;set "absolute" player x and y values
00422Er 2  C2 20        	a16
004230r 2  A5 16        	lda spriteX
004232r 2  18           	clc
004233r 2  65 10        	adc scrollX
004235r 2  29 FF 01     	and #$1ff ;snes background = 512 pixels, or $200 binary
004238r 2  85 1A        	sta playerX
00423Ar 2  A5 18        	lda spriteY
00423Cr 2  18           	clc
00423Dr 2  65 12        	adc scrollY
00423Fr 2  29 FF 01     	and #$1ff
004242r 2  38           	sec
004243r 2  E9 05 00     	sbc #$5 ;account for sprite's blank space
004246r 2  85 1C        	sta playerY
004248r 2  A5 1A        	lda playerX ; reduce the position to a $3f range
00424Ar 2  6A           	ror a ;divide by 8
00424Br 2  6A           	ror a
00424Cr 2  6A           	ror a
00424Dr 2  29 3F 00     	and #$3f
004250r 2  85 00        	sta $0
004252r 2  A5 1C        	lda playerY ;same "formula" as for x, but also needs to be shifted left 6 times
004254r 2  2A           	rol a
004255r 2  2A           	rol a
004256r 2  2A           	rol a
004257r 2  29 C0 0F     	and #$fc0 ;max possible value
00425Ar 2  18           	clc
00425Br 2  65 00        	adc $0
00425Dr 2  85 1E        	sta playerTileOffset
00425Fr 2  E2 20        	a8
004261r 2  A2 02 00     	ldx #$2
004264r 2  20 rr rr     	jsr ClearMem
004267r 2  60           	rts
004268r 2               
004268r 2               CheckCollisionR: ;sprite is 16x32 or 2x4 tiles
004268r 2  C2 20        	a16
00426Ar 2  A5 1E        	lda playerTileOffset ;top right
00426Cr 2  1A           	ina
00426Dr 2  AA           	tax
00426Er 2  BD rr rr     	lda CollisionMap, x
004271r 2  85 21        	sta collision
004273r 2  8A           	txa ;load offset back into a
004274r 2  18           	clc
004275r 2  69 80 00     	adc #$80 ;$40 tiles per row
004278r 2  AA           	tax
004279r 2  BD rr rr     	lda CollisionMap, x
00427Cr 2  05 21        	ora collision ;if top or bottom collision
00427Er 2  85 21        	sta collision
004280r 2  E2 20        	a8
004282r 2  60           	rts
004283r 2               
004283r 2               CheckCollisionL:
004283r 2  C2 20        	a16
004285r 2  A6 1E        	ldx playerTileOffset ;top left
004287r 2  BD rr rr     	lda CollisionMap, x
00428Ar 2  85 21        	sta collision
00428Cr 2  8A           	txa
00428Dr 2  18           	clc
00428Er 2  69 80 00     	adc #$80 ;bottom left
004291r 2  AA           	tax
004292r 2  BD rr rr     	lda CollisionMap, x
004295r 2  05 21        	ora collision
004297r 2  85 21        	sta collision
004299r 2  E2 20        	a8
00429Br 2  60           	rts
00429Cr 2               
00429Cr 2               CheckCollisionB: ;checks if block below character is solid or not
00429Cr 2  C2 20        	a16
00429Er 2  A5 1E        	lda playerTileOffset
0042A0r 2  18           	clc
0042A1r 2  69 40 01     	adc #$140
0042A4r 2  AA           	tax
0042A5r 2  BD rr rr     	lda CollisionMap, x ;bottom left
0042A8r 2  85 21        	sta collision
0042AAr 2  E8           	inx
0042ABr 2  BD rr rr     	lda CollisionMap, x ;bottom right
0042AEr 2  05 21        	ora collision
0042B0r 2  85 21        	sta collision
0042B2r 2  E2 20        	a8
0042B4r 2  60           	rts
0042B5r 2               
0042B5r 2               
0042B5r 1               .include "sound.asm"
0042B5r 2               .segment "BANK1"
000000r 2               
000000r 2               SPCPrg:
000000r 2  20 CD EF BD  	.incbin ".\sound\sound.bin"
000004r 2  E8 2C C4 F2  
000008r 2  E8 00 C4 F3  
005330r 2               SPCPrgEnd:
005330r 2               
005330r 2               SPC_LENGTH = SPCPrgEnd-SPCPrg
005330r 2               NUM_SPC_BLOCKS = SPC_LENGTH/256
005330r 2               .define copyAddr $0 ;address to copy to (word)
005330r 2               .define copyIndex $2 ;index within one block (byte)
005330r 2               .define blockIndex $3 ;what block's being copied (byte)
005330r 2               .define kick $4 ;current "kick" val
005330r 2               
005330r 2               LoadSPC:
005330r 2  8B           	phb
005331r 2  08           	php
005332r 2               
005332r 2  C2 20        	a16
005334r 2  A9 53 00     	lda #NUM_SPC_BLOCKS
005337r 2  A9 00 02     	lda #$200
00533Ar 2  85 00        	sta copyAddr ;set up copy address
00533Cr 2  64 03        	stz blockIndex
00533Er 2  E2 20        	a8
005340r 2  A9 CC        	lda #$cc ;starting kick val
005342r 2  85 04        	sta kick
005344r 2               
005344r 2  9C 00 42     	stz $4200
005347r 2  78           	sei ;disable interrupts, this is kinda time sensitive
005348r 2               WaitForInit:
005348r 2  AD 40 21     	lda $2140
00534Br 2  C9 AA        	cmp #$aa ;spc sets reg 0 to aa after it inits
00534Dr 2  D0 F9        	bne WaitForInit
00534Fr 2               
00534Fr 2               CopyLoop:
00534Fr 2  C2 20        	a16
005351r 2  A5 00        	lda copyAddr
005353r 2  8D 42 21     	sta $2142 ;write destination address
005356r 2  18           	clc
005357r 2  69 00 01     	adc #$100
00535Ar 2  85 00        	sta copyAddr
00535Cr 2  E2 20        	a8
00535Er 2               
00535Er 2  A9 01        	lda #$1
005360r 2  8D 41 21     	sta $2141 ;write command
005363r 2  A5 04        	lda kick
005365r 2  8D 40 21     	sta $2140 ;"enable"
005368r 2               WaitForAck: ;spc returns kick when it's ready to write
005368r 2  AD 40 21     	lda $2140
00536Br 2  C5 04        	cmp kick
00536Dr 2  D0 F9        	bne WaitForAck
00536Fr 2               
00536Fr 2               CopyBlock: ;copies blocks of 256 bytes
00536Fr 2  C2 20        	a16
005371r 2  A5 02        	lda copyIndex ;because blockIndex is next to copyIndex in memory hopefully
005373r 2  AA           	tax	;this will get the address (look at me, so smart for making blocks 256 bytes)
005374r 2  E2 20        	a8
005376r 2  BF rr rr rr  	lda f:SPCPrg,x ;specify bank
00537Ar 2  8D 41 21     	sta $2141
00537Dr 2  A5 02        	lda copyIndex
00537Fr 2  8D 40 21     	sta $2140
005382r 2               
005382r 2               WaitReceive:
005382r 2  CD 40 21     	cmp $2140 ;spc mirrors count after receiving data
005385r 2  D0 FB        	bne WaitReceive
005387r 2  1A           	inc a
005388r 2  85 02        	sta copyIndex
00538Ar 2  C9 00        	cmp #$00 ;256 bytes in a block
00538Cr 2  D0 E1        	bne CopyBlock
00538Er 2               
00538Er 2  E6 03        	inc blockIndex
005390r 2  A5 04        	lda kick
005392r 2  18           	clc
005393r 2  69 02        	adc #$2
005395r 2  29 7F        	and #$7f ;kick=previous kick "+2 to 127" -ninty
005397r 2  85 04        	sta kick
005399r 2  A5 03        	lda blockIndex
00539Br 2  C9 53        	cmp #NUM_SPC_BLOCKS
00539Dr 2  D0 B0        	bne CopyLoop
00539Fr 2               
00539Fr 2  C2 20        	a16
0053A1r 2  A9 00 02     	lda #$200 ;entry point
0053A4r 2  8D 42 21     	sta $2142
0053A7r 2  E2 20        	a8
0053A9r 2  9C 41 21     	stz $2141 ;start command
0053ACr 2  A5 04        	lda kick
0053AEr 2  8D 40 21     	sta $2140
0053B1r 2  58           	cli ;enable interrupts
0053B2r 2  A2 06 00     	ldx #$6
0053B5r 2               @ClrLoop:
0053B5r 2  74 00        	stz $0,x
0053B7r 2  CA           	dex
0053B8r 2  D0 FB        	bne @ClrLoop
0053BAr 2  28           	plp
0053BBr 2  AB           	plb
0053BCr 2  6B           	rtl
0053BDr 2               
0053BDr 1               
0053BDr 1               .segment "CODE"
0042B5r 1               Reset:
0042B5r 1  78 18 FB C2  	InitSNES
0042B9r 1  38 A2 FF 1F  
0042BDr 1  9A 22 rr rr  
0042C4r 1  22 rr rr rr  	jsl LoadSPC
0042C8r 1  A9 00 8D 21  	LoadPalette BGPalette, 0, $100
0042CCr 1  21 A9 rr A2  
0042D0r 1  rr rr A0 00  
0042D8r 1  A9 80 8D 21      LoadPalette SpritePalette, $80, $F
0042DCr 1  21 A9 rr A2  
0042E0r 1  rr rr A0 1E  
0042E8r 1               	; Load Tile data to VRAM
0042E8r 1  A9 80 8D 15      LoadBlockToVRAM BGTiles, $2000, $0040	; 2 tiles, 2bpp, = 32 bytes
0042ECr 1  21 A2 00 20  
0042F0r 1  8E 16 21 A9  
0042FEr 1  A9 80 8D 15  	LoadBlockToVRAM LarryTiles, $6000, $2000 ;16x16, 4bpp=128 bytes
004302r 1  21 A2 00 60  
004306r 1  8E 16 21 A9  
004314r 1  A9 80 8D 15  	LoadBlockToVRAM BGTilemap, $0000, $2000
004318r 1  21 A2 00 00  
00431Cr 1  8E 16 21 A9  
00432Ar 1  A2 rr rr 8E  	LoadBlockToWRAM BGTilemap, TilemapMirror, $2000
00432Er 1  02 43 A9 rr  
004332r 1  8D 04 43 A2  
004351r 1                   ; Setup Video modes and other stuff, then turn on the screen
004351r 1  20 rr rr         jsr SetupVideo
004354r 1  20 rr rr     	jsr InitSprites
004357r 1  A9 81        	lda #$81
004359r 1  8D 00 42     	sta $4200 ;enable vblank interrupt and joypad read
00435Cr 1  A9 00        	lda #$00 ;idk why but sometimes spc writes crash the cpu without this line, at least on no$sns
00435Er 1               	;did a bit more debugging, looks like it's a conflict b/t loading larrytiles and bgtilemap to vram
00435Er 1  C2 20        	a16
004360r 1  A9 1B 01     	lda #$11b
004363r 1  85 12        	sta scrollY
004365r 1  E2 20        	sep #$20
004367r 1  E2 20        	a8
004369r 1  A9 50        	lda #$50
00436Br 1  85 16        	sta spriteX
00436Dr 1               
00436Dr 1               .define GROUND_Y $B0
00436Dr 1  A9 B0        	lda #GROUND_Y
00436Fr 1  85 18        	sta spriteY
004371r 1               
004371r 1  A9 30        	lda #$30 ;max sprite priority
004373r 1  85 24        	sta playerAttrs
004375r 1               
004375r 1               
004375r 1               MainLoop:
004375r 1  AD 19 42     	lda $4219 ;p1 joypad read address ;if yes but it is no longer pressed, state=RIGHT_RELEASED
004378r 1  89 01        	bit #JOY_RIGHT
00437Ar 1  F0 0F        	beq AssignRightReleased ;if it is still being pressed, state=RIGHT_PRESSED
00437Cr 1  A5 14        	lda playerHSpeed
00437Er 1  D0 15        	bne EndRightAssign
004380r 1  A9 01        	lda #STATE_RIGHT_PRESSED
004382r 1  85 27        	sta movementState
004384r 1  A9 30        	lda #$30 ;max sprite priority
004386r 1  85 24        	sta playerAttrs
004388r 1  4C rr rr     	jmp EndRightAssign
00438Br 1               
00438Br 1               AssignRightReleased:
00438Br 1  A5 27        	lda movementState
00438Dr 1  C9 01        	cmp #STATE_RIGHT_PRESSED ;was right pressed last frame?
00438Fr 1  D0 04        	bne EndRightAssign ;if no, skip
004391r 1  A9 02        	lda #STATE_RIGHT_RELEASED
004393r 1  85 27        	sta movementState
004395r 1               
004395r 1               EndRightAssign:
004395r 1               
004395r 1  AD 19 42     	lda $4219 ;p1 joypad read address ;if yes but it is no longer pressed, state=RIGHT_RELEASED
004398r 1  89 02        	bit #JOY_LEFT
00439Ar 1  F0 0F        	beq AssignLeftReleased ;if it is still being pressed, state=RIGHT_PRESSED
00439Cr 1  A5 14        	lda playerHSpeed
00439Er 1  D0 15        	bne EndLeftAssign
0043A0r 1  A9 03        	lda #STATE_LEFT_PRESSED
0043A2r 1  85 27        	sta movementState
0043A4r 1  A9 70        	lda #$70 ;max sprite priority, mirrored
0043A6r 1  85 24        	sta playerAttrs
0043A8r 1  4C rr rr     	jmp EndLeftAssign
0043ABr 1               
0043ABr 1               AssignLeftReleased:
0043ABr 1  A5 27        	lda movementState
0043ADr 1  C9 03        	cmp #STATE_LEFT_PRESSED ;was right pressed last frame?
0043AFr 1  D0 04        	bne EndLeftAssign ;if no, skip
0043B1r 1  A9 04        	lda #STATE_LEFT_RELEASED
0043B3r 1  85 27        	sta movementState
0043B5r 1               
0043B5r 1               EndLeftAssign:
0043B5r 1               
0043B5r 1               ;if player is on ground, assign jump state
0043B5r 1  AD 19 42     	lda $4219
0043B8r 1  89 80        	bit #JOY_B
0043BAr 1  F0 0E        	beq JumpNotPressed
0043BCr 1  A5 26        	lda playerState
0043BEr 1  C9 00        	cmp #STATE_GROUND
0043C0r 1  D0 08        	bne JumpNotPressed
0043C2r 1  A9 01        	lda #STATE_JUMP_RISE
0043C4r 1  85 26        	sta playerState
0043C6r 1  A9 10        	lda #MAX_LARRY_JUMP_HEIGHT
0043C8r 1  85 25        	sta playerVSpeed
0043CAr 1               JumpNotPressed:
0043CAr 1               
0043CAr 1               EndStateAssigns:
0043CAr 1               
0043CAr 1               
0043CAr 1               ;accelerate player until reaches max speed
0043CAr 1  A5 27        	lda movementState
0043CCr 1  C9 01        	cmp #STATE_RIGHT_PRESSED
0043CEr 1  D0 19        	bne RightNotPressed
0043D0r 1               
0043D0r 1  A5 14        	lda playerHSpeed
0043D2r 1  C9 08        	cmp #MAX_LARRY_SPEED
0043D4r 1  F0 05        	beq @DontAdd
0043D6r 1  18           	clc
0043D7r 1  69 01        	adc #LARRY_ACCEL
0043D9r 1  85 14        	sta playerHSpeed
0043DBr 1               @DontAdd:
0043DBr 1  C2 20        	a16
0043DDr 1  A5 10        	lda scrollX
0043DFr 1  18           	clc
0043E0r 1  65 14        	adc playerHSpeed
0043E2r 1  29 FF 03     	and #$3ff ;limit to 10 bits
0043E5r 1  85 10        	sta scrollX
0043E7r 1  E2 20        	a8
0043E9r 1               RightNotPressed:
0043E9r 1               
0043E9r 1               ;decelerate player right until they stop
0043E9r 1  A5 27        	lda movementState
0043EBr 1  C9 02        	cmp #STATE_RIGHT_RELEASED
0043EDr 1  D0 20        	bne RightNotReleased
0043EFr 1               
0043EFr 1  A5 14        	lda playerHSpeed
0043F1r 1  C9 00        	cmp #$0
0043F3r 1  D0 07        	bne @Subtract
0043F5r 1  A9 00        	lda #STATE_NONE
0043F7r 1  85 27        	sta movementState
0043F9r 1  4C rr rr     	jmp RightNotReleased
0043FCr 1               @Subtract:
0043FCr 1  38           	sec
0043FDr 1  E9 01        	sbc #LARRY_ACCEL
0043FFr 1  85 14        	sta playerHSpeed
004401r 1  C2 20        	a16
004403r 1  A5 10        	lda scrollX
004405r 1  18           	clc
004406r 1  65 14        	adc playerHSpeed
004408r 1  29 FF 03     	and #$3ff ;limit to 10 bits
00440Br 1  85 10        	sta scrollX
00440Dr 1  E2 20        	a8
00440Fr 1               RightNotReleased:
00440Fr 1               
00440Fr 1               ;accelerate player until they hit max speed
00440Fr 1  A5 27        	lda movementState
004411r 1  C9 03        	cmp #STATE_LEFT_PRESSED
004413r 1  D0 19        	bne LeftNotPressed
004415r 1               
004415r 1  A5 14        	lda playerHSpeed
004417r 1  C9 08        	cmp #MAX_LARRY_SPEED
004419r 1  F0 05        	beq @DontAdd
00441Br 1  18           	clc
00441Cr 1  69 01        	adc #LARRY_ACCEL
00441Er 1  85 14        	sta playerHSpeed
004420r 1               @DontAdd:
004420r 1  C2 20        	a16
004422r 1  A5 10        	lda scrollX
004424r 1  38           	sec
004425r 1  E5 14        	sbc playerHSpeed
004427r 1  29 FF 03     	and #$3ff
00442Ar 1  85 10        	sta scrollX
00442Cr 1  E2 20        	a8
00442Er 1               LeftNotPressed:
00442Er 1               
00442Er 1               ;decelerate player until they stop
00442Er 1  A5 27        	lda movementState
004430r 1  C9 04        	cmp #STATE_LEFT_RELEASED
004432r 1  D0 20        	bne LeftNotReleased
004434r 1               
004434r 1  A5 14        	lda playerHSpeed
004436r 1  C9 00        	cmp #$0
004438r 1  D0 07        	bne @Subtract
00443Ar 1  A9 00        	lda #STATE_NONE
00443Cr 1  85 27        	sta movementState
00443Er 1  4C rr rr     	jmp LeftNotReleased
004441r 1               @Subtract:
004441r 1  38           	sec
004442r 1  E9 01        	sbc #LARRY_ACCEL
004444r 1  85 14        	sta playerHSpeed
004446r 1  C2 20        	a16
004448r 1  A5 10        	lda scrollX
00444Ar 1  38           	sec
00444Br 1  E5 14        	sbc playerHSpeed
00444Dr 1  29 FF 03     	and #$3ff
004450r 1  85 10        	sta scrollX
004452r 1  E2 20        	a8
004454r 1               LeftNotReleased:
004454r 1               
004454r 1               ;animate player based on speed
004454r 1  A5 27        	lda movementState
004456r 1  C9 00        	cmp #STATE_NONE
004458r 1  D0 07        	bne DontStandStill
00445Ar 1  A9 00        	lda #$0
00445Cr 1  85 20        	sta playerTileNum
00445Er 1  4C rr rr     	jmp DontAnimate
004461r 1               DontStandStill:
004461r 1               
004461r 1  A5 20        	lda playerTileNum
004463r 1  1A           	ina
004464r 1  1A           	ina
004465r 1  85 20        	sta playerTileNum
004467r 1  C9 0E        	cmp #NUM_LARRY_TILES
004469r 1  D0 06        	bne DontAnimate
00446Br 1  A9 02        	lda #$2
00446Dr 1  85 20        	sta playerTileNum
00446Fr 1  64 23        	stz playerAnimDelay
004471r 1               DontAnimate:
004471r 1               
004471r 1               	;if player isn't above solid surface, fall
004471r 1  A5 26        	lda playerState
004473r 1  C9 00        	cmp #STATE_GROUND
004475r 1  D0 0C        	bne DontApplyGravity
004477r 1  20 rr rr     	jsr SetPlayerVals
00447Ar 1  20 rr rr     	jsr CheckCollisionB
00447Dr 1  D0 04        	bne DontApplyGravity
00447Fr 1  A9 02        	lda #STATE_JUMP_FALL
004481r 1  85 26        	sta playerState
004483r 1               DontApplyGravity:
004483r 1               
004483r 1               ;1. subtract gravity accel value until initial speed is 0
004483r 1               ;2. set state to fall
004483r 1               
004483r 1  A5 26        	lda playerState
004485r 1  C9 01        	cmp #STATE_JUMP_RISE
004487r 1  D0 17        	bne DontRise
004489r 1  A5 25        	lda playerVSpeed
00448Br 1  D0 07        	bne @SubSpeed ;branch if player v speed isn't 0
00448Dr 1  A9 02        	lda #STATE_JUMP_FALL
00448Fr 1  85 26        	sta playerState
004491r 1  4C rr rr     	jmp DontRise
004494r 1               @SubSpeed:
004494r 1  38           	sec
004495r 1  E9 01        	sbc #LARRY_ACCEL
004497r 1  85 25        	sta playerVSpeed
004499r 1  A5 18        	lda spriteY
00449Br 1  38           	sec
00449Cr 1  E5 25        	sbc playerVSpeed
00449Er 1  85 18        	sta spriteY
0044A0r 1               DontRise:
0044A0r 1               
0044A0r 1               ;3. add gravity accel value until player touches ground
0044A0r 1               ;4. set state to ground
0044A0r 1               
0044A0r 1  A5 26        	lda playerState
0044A2r 1  C9 02        	cmp #STATE_JUMP_FALL
0044A4r 1  D0 2F        	bne DontFall
0044A6r 1  20 rr rr     	jsr SetPlayerVals
0044A9r 1  20 rr rr     	jsr CheckCollisionB
0044ACr 1  F0 15        	beq @AddSpeed
0044AEr 1               @EjectLoop:
0044AEr 1  C6 18        	dec spriteY
0044B0r 1  20 rr rr     	jsr SetPlayerVals
0044B3r 1  20 rr rr     	jsr CheckCollisionB
0044B6r 1  D0 F6        	bne @EjectLoop
0044B8r 1  E6 18        	inc spriteY
0044BAr 1  A9 00        	lda #STATE_GROUND
0044BCr 1  85 26        	sta playerState
0044BEr 1  64 25        	stz playerVSpeed
0044C0r 1  4C rr rr     	jmp DontFall
0044C3r 1               @AddSpeed:
0044C3r 1  A5 25        	lda playerVSpeed
0044C5r 1  C9 08        	cmp #MAX_LARRY_FALL_SPEED
0044C7r 1  B0 05        	bcs @DontAdd
0044C9r 1  18           	clc
0044CAr 1  69 01        	adc #LARRY_ACCEL
0044CCr 1  85 25        	sta playerVSpeed
0044CEr 1               @DontAdd:
0044CEr 1  A5 18        	lda spriteY
0044D0r 1  18           	clc
0044D1r 1  65 25        	adc playerVSpeed
0044D3r 1  85 18        	sta spriteY
0044D5r 1               DontFall:
0044D5r 1               
0044D5r 1  20 rr rr     	jsr SetPlayerVals
0044D8r 1  A5 27        	lda movementState
0044DAr 1  F0 22        	beq EndCollisionDetect ;if player's not moving, don't bather w/ wall collision detection
0044DCr 1  C9 03        	cmp #STATE_LEFT_PRESSED
0044DEr 1  B0 0F        	bcs LCollision ;if state is left pressed or left released, branch
0044E0r 1  20 rr rr     	jsr CheckCollisionR
0044E3r 1  F0 19        	beq EndCollisionDetect
0044E5r 1               @EjectLoop:
0044E5r 1  C6 10        	dec scrollX
0044E7r 1  20 rr rr     	jsr SetPlayerVals
0044EAr 1  20 rr rr     	jsr CheckCollisionR
0044EDr 1  D0 F6        	bne @EjectLoop
0044EFr 1               
0044EFr 1               LCollision:
0044EFr 1  20 rr rr     	jsr CheckCollisionL
0044F2r 1  F0 0A        	beq EndCollisionDetect
0044F4r 1               @EjectLoop:
0044F4r 1  E6 10        	inc scrollX
0044F6r 1  20 rr rr     	jsr SetPlayerVals
0044F9r 1  20 rr rr     	jsr CheckCollisionL
0044FCr 1  D0 F6        	bne @EjectLoop
0044FEr 1               EndCollisionDetect:
0044FEr 1               
0044FEr 1  A5 16 85 04  	HandleLarry spriteX,spriteY,playerTileNum
004502r 1  A5 18 85 05  
004506r 1  A5 20 85 06  
0045A7r 1               	; DrawLine #$2, #$11, #$15, #$15
0045A7r 1               
0045A7r 1  CB           	wai
0045A8r 1  4C rr rr     	jmp MainLoop
0045ABr 1               
0045ABr 1               VBlank:
0045ABr 1  08           	php
0045ACr 1  8B           	phb
0045ADr 1  0B           	phd
0045AEr 1  48           	pha ;push regs to stack so if my main loop is ever too long it'll continue without
0045AFr 1  DA           	phx ;fucking up
0045B0r 1  5A           	phy
0045B1r 1  E2 20        	a8
0045B3r 1  C2 20 A5 10  	SetHScroll scrollX
0045B7r 1  E2 20 8D 0D  
0045BBr 1  21 EB 8D 0D  
0045C0r 1  C2 20 A5 12  	SetVScroll scrollY
0045C4r 1  E2 20 8D 0E  
0045C8r 1  21 EB 8D 0E  
0045CDr 1  A9 80 8D 15  	DMATilemapMirror #$2
0045D1r 1  21 C2 20 A9  
0045D5r 1  02 00 EB 18  
0045FCr 1  20 rr rr     	jsr DMASpriteMirror
0045FFr 1  A9 03        	lda #$3 ;start dma transfer on channels 1&2
004601r 1  8D 0B 42     	sta $420b
004604r 1  AD 10 42     	lda $4210 ;clear vblank flag
004607r 1  7A           	ply
004608r 1  FA           	plx
004609r 1  68           	pla
00460Ar 1  2B           	pld
00460Br 1  AB           	plb
00460Cr 1  28           	plp
00460Dr 1               
00460Dr 1  40           	rti
00460Er 1               
00460Er 1               SetupVideo:
00460Er 1  08               php
00460Fr 1               
00460Fr 1  A9 73        	lda #$73
004611r 1  8D 01 21     	sta $2101 ;16x16 or 32x32 sprites, sprite data @ $6000
004614r 1  9C 02 21     	stz $2102 ;oam starts at $0 vram
004617r 1  9C 03 21     	stz $2103
00461Ar 1  A9 01        	lda #$1
00461Cr 1  8D 05 21         sta $2105           ; Set Video mode 1, 8x8 tiles
00461Fr 1               
00461Fr 1  A9 03            lda #$03           ; Set BG1's Tile Map offset to $0000 (Word address)
004621r 1  8D 07 21         sta $2107           ; And the Tile Map size to 64x64
004624r 1               
004624r 1  A9 52        	lda #$52
004626r 1  8D 0B 21         sta $210B           ; Set BG1's Character VRAM offset to $2000 (word address), BG2's to $5000
004629r 1               
004629r 1  A9 11            lda #$11            ; Enable BG1 and sprites
00462Br 1  8D 2C 21         sta $212C
00462Er 1               
00462Er 1  A9 FF            lda #$FF ;bg1 horizontal scroll to -1 to fix weird stuff
004630r 1  8D 0E 21         sta $210E
004633r 1  8D 0E 21         sta $210E
004636r 1               
004636r 1  A9 0F            lda #$0F
004638r 1  8D 00 21         sta $2100           ; Turn on screen, full Brightness
00463Br 1               
00463Br 1  28               plp
00463Cr 1  60               rts
00463Dr 1               
00463Dr 1               DMASpriteMirror:
00463Dr 1  9C 02 21     	stz $2102		; set OAM address to 0
004640r 1  9C 03 21     	stz $2103
004643r 1               
004643r 1  A0 00 04     	LDY #$0400
004646r 1  8C 00 43     	STY $4300		; CPU -> PPU, auto increment, write 1 reg, $2104 (OAM data write)
004649r 1  A0 00 04     	LDY #$0400
00464Cr 1  8C 02 43     	STY $4302		; source offset
00464Fr 1  A0 20 02     	LDY #$0220
004652r 1  8C 05 43     	STY $4305		; number of bytes to transfer
004655r 1  A9 7E        	LDA #$7E
004657r 1  8D 04 43     	STA $4304		; bank address = $7E  (work RAM)
00465Ar 1  60           	rts
00465Br 1               
00465Br 1               
