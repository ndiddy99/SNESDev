ca65 V2.16 - Git f19651c
Main file   : main.asm
Current file: main.asm

000000r 1               .include "header.inc"
000000r 2               ; Sets up ROM headers/vectors
000000r 2               
000000r 2               .p816   ; 65816 processor
000000r 2               .i16    ; X/Y are 16 bits
000000r 2               .a8     ; A is 8 bits
000000r 2               .feature force_range
000000r 2               
000000r 2               .define ROM_NAME "physics demo         "
000000r 2                               ;"123456789012345678901"
000000r 2               .segment "HEADER"     ; +$7FE0 in file
000000r 2  70 68 79 73      .byte ROM_NAME
000004r 2  69 63 73 20  
000008r 2  64 65 6D 6F  
000015r 2               
000015r 2               .segment "ROMINFO"    ; +$7FD5 in file
000000r 2  30               .byte $30         ; LoROM, fast-capable
000001r 2  00               .byte 0           ; no battery RAM
000002r 2  07               .byte $07         ; 128K ROM
000003r 2  00 00 00 00      .byte 0,0,0,0
000007r 2  AA AA 55 55      .word $AAAA,$5555 ; dummy checksum and complement
00000Br 2               
00000Br 2               ;cop,brk,abort,nmi,reset,irq
00000Br 2               ;cop,abort,nmi,res,brk,irqbrk
00000Br 2               .segment "VECTORS"
000000r 2  00 00 00 00      .word 0, 0, EmptyHandler0, EmptyHandler1, EmptyHandler2, VBlank, Reset, EmptyHandler3
000004r 2  rr rr rr rr  
000008r 2  rr rr rr rr  
000010r 2  00 00 00 00      .word 0, 0, EmptyHandler4, EmptyHandler5, VBlank, EmptyHandler6, Reset, EmptyHandler7
000014r 2  rr rr rr rr  
000018r 2  rr rr rr rr  
000020r 2               
000020r 2               .segment "CODE"
000000r 2               EmptyHandler0:
000000r 2  40           	rti
000001r 2               EmptyHandler1:
000001r 2  40           	rti
000002r 2               EmptyHandler2:
000002r 2  40           	rti
000003r 2               EmptyHandler3:
000003r 2  40           	rti
000004r 2               EmptyHandler4:
000004r 2  40           	rti
000005r 2               EmptyHandler5:
000005r 2  40           	rti
000006r 2               EmptyHandler6:
000006r 2  40           	rti
000007r 2               EmptyHandler7:
000007r 2  40           	rti
000008r 2               
000008r 1               .include "snes.inc"
000008r 2               ;
000008r 2               ; S-CPU and S-PPU MMIO port definitions for Super NES
000008r 2               ; and useful 65816 macros
000008r 2               ;
000008r 2               ; Copyright 2014-2015 Damian Yerrick
000008r 2               ;
000008r 2               ; Copying and distribution of this file, with or without
000008r 2               ; modification, are permitted in any medium without royalty provided
000008r 2               ; the copyright notice and this notice are preserved in all source
000008r 2               ; code copies.  This file is offered as-is, without any warranty.
000008r 2               ;
000008r 2               
000008r 2               ;
000008r 2               ; This header summarizes some of the Super NES MMIO ports.
000008r 2               ; For more details, see these web pages:
000008r 2               ; http://wiki.superfamicom.org/
000008r 2               ; http://problemkaputt.de/fullsnes.htm
000008r 2               ;
000008r 2               ; Names of MMIO ports in this header file may differ from purported
000008r 2               ; official names for two reasons: to avoid the appearance of
000008r 2               ; misappropriation, and because sometimes these make more sense.
000008r 2               ;
000008r 2               
000008r 2               .ifndef SNES_H
000008r 2               .define SNES_H
000008r 2               
000008r 2               ; S-PPU configuration ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000008r 2               
000008r 2               PPUBRIGHT = $2100
000008r 2               ; 76543210
000008r 2               ; |   ++++- brightness (F: max)
000008r 2               ; +-------- 1: disable rendering
000008r 2               FORCEBLANK = $80
000008r 2               
000008r 2               PPURES = $2133
000008r 2               ; 76543210
000008r 2               ; ||  |||+- Screen interlace
000008r 2               ; ||  ||+-- Shrink sprites vertically during interlace
000008r 2               ; ||  |+--- 0: show lines 1-224; 1: show lines 1-239
000008r 2               ; ||  +---- Show subscreen in left half of each pixel
000008r 2               ; ||        (modes 012347; forced on in modes 56)
000008r 2               ; |+------- In mode 7, use bit 7 as priority
000008r 2               ; +-------- External genlock, intended for SFC Titler. Use 0 on SNES.
000008r 2               INTERLACE    = $01
000008r 2               INTERLACEOBJ = $02
000008r 2               BG_TALL      = $04
000008r 2               SUB_HIRES    = $08
000008r 2               M7_EXTBG     = $40
000008r 2               
000008r 2               PPUSTATUS1 = $213E
000008r 2               ; 76543210  PPU address generator status
000008r 2               ; ||  ++++- PPU1 version (always 1)
000008r 2               ; |+------- 1: sprite overflow (>32 on a line) since the last vblank end
000008r 2               ; +-------- 1: sliver overflow (>34 on a line) since the last vblank end
000008r 2               ; this parallels bit 5 of $2002 on NES
000008r 2               
000008r 2               PPUSTATUS2 = $213F
000008r 2               ; 76543210  PPU compositor status
000008r 2               ; || |++++- PPU2 version (1-3, not counting minor versions of 3)
000008r 2               ; || +----- 1: PAL
000008r 2               ; |+------- 1: GETXY has happened since last PPUSTATUS2 read
000008r 2               ; +-------- Toggles every vblank
000008r 2               
000008r 2               ; S-PPU sprites ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000008r 2               
000008r 2               OBSEL = $2101
000008r 2               ; 76543210
000008r 2               ; ||||| ++- Sprite main pattern table (0=$0000, 1=$2000, 2=$4000, 3=$6000)
000008r 2               ; |||++---- Alt pattern table offset (0=$1000, 1=$2000, 2=$3000, 3=$4000)
000008r 2               ; +++------ 0: 8/16; 1: 8/32; 2: 8/64; 3: 16/64; 4: 32/64; 5: 64/64
000008r 2               ;           (all sprites are square and 2D-mapped)
000008r 2               OBSIZE_8_16  = $00
000008r 2               OBSIZE_8_32  = $20
000008r 2               OBSIZE_8_64  = $40
000008r 2               OBSIZE_16_32 = $60
000008r 2               OBSIZE_16_64 = $80
000008r 2               OBSIZE_32_64 = $A0
000008r 2               
000008r 2               OAMADDR = $2102  ; 16-bit, 128 sprites followed by high-X/size table
000008r 2               OAMDATA = $2104
000008r 2               OAMDATARD = $2138
000008r 2               ; Parallels NES $2003, except apparently word-addressed.
000008r 2               ; OAM random access is working here, unlike on NES.
000008r 2               ; If bit 15 is set, value at start of frame apparently also
000008r 2               ; controls which sprites are in front
000008r 2               
000008r 2               ; S-PPU background configuration ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000008r 2               
000008r 2               BGMODE = $2105
000008r 2               ; 76543210
000008r 2               ; |||||+++- 0: 4 planes 2 bpp
000008r 2               ; |||||     1: 2 planes 4 bpp, 1 plane 2 bpp
000008r 2               ; |||||     2: 2 planes 4 bpp, OPT
000008r 2               ; |||||     3: 1 plane 8 bpp, 1 plane 4 bpp
000008r 2               ; |||||     4: 1 plane 8 bpp, 1 plane 2 bpp, OPT
000008r 2               ; |||||     5: 1 plane 4 bpp, 1 plane 2 bpp, hires
000008r 2               ; |||||     6: 1 plane 4 bpp, OPT, hires
000008r 2               ; |||||     7: 1 plane rot/scale
000008r 2               ; ||||+---- In mode 1, set plane 2 high-prio in front of all others
000008r 2               ; |||+----- Plane 0 tile size (0: 8x8, 1: 16x16)
000008r 2               ; ||+------ Plane 1 tile size (0: 8x8, 1: 16x16)
000008r 2               ; |+------- Plane 2 tile size (0: 8x8, 1: 16x16)
000008r 2               ; +-------- Plane 3 tile size (0: 8x8, 1: 16x16)
000008r 2               ;           Modes 5 and 6 use 16x8 instead of 8x8
000008r 2               ;           Mode 7 always uses 8x8
000008r 2               
000008r 2               MOSAIC = $2106
000008r 2               ; 76543210
000008r 2               ; |||||||+- Apply mosaic to plane 0 (or mode 7 high-prio horizontal)
000008r 2               ; ||||||+-- Apply mosaic to plane 1 (or mode 7 high-prio vertical)
000008r 2               ; |||||+--- Apply mosaic to plane 2
000008r 2               ; ||||+---- Apply mosaic to plane 3
000008r 2               ; ++++----- Pixel size minus 1 (0=1x1, 15=16x16)
000008r 2               
000008r 2               NTADDR = $2107  ; through $210A
000008r 2               ; 76543210
000008r 2               ;  ||||||+- Nametable width (0: 1 screen, 1: 2 screens)
000008r 2               ;  |||||+-- Nametable height (0: 1 screen, 1: 2 screens)
000008r 2               ;  +++++--- Nametable base address in $400 units
000008r 2               ; Each nametable in modes 0-6 is 32 rows, each 32 spaces long.
000008r 2               .define NTXY(xc,yc) ((xc)|((yc)<<5))
000008r 2               
000008r 2               BGCHRADDR = $210B
000008r 2               ; FEDCBA98 76543210
000008r 2               ;  ||| |||  ||| +++- Pattern table base address for plane 0
000008r 2               ;  ||| |||  +++----- Same for plane 1
000008r 2               ;  ||| +++---------- Same for plane 2
000008r 2               ;  +++-------------- Same for plane 3
000008r 2               
000008r 2               M7SEL = $211A
000008r 2               ; 76543210
000008r 2               ; ||    ||
000008r 2               ; ||    |+- Flip screen horizontally
000008r 2               ; ||    +-- Flip screen vertically
000008r 2               ; ++------- 0: repeat entire mode 7 plane
000008r 2               ;           2: transparent outside; 3: tile $00 repeating outside
000008r 2               M7_HFLIP    = $01
000008r 2               M7_VFLIP    = $02
000008r 2               M7_WRAP     = $00
000008r 2               M7_NOWRAP   = $80
000008r 2               M7_BORDER00 = $C0
000008r 2               
000008r 2               ; S-PPU scrolling ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000008r 2               
000008r 2               BGSCROLLX = $210D  ; double write low then high (000-3FF m0-6, 000-7FF m7)
000008r 2               BGSCROLLY = $210E  ; similar. reg 210F-2114 are same for other planes
000008r 2               ; Hi-res scrolling in modes 5-6 moves by whole (sub+main) pixels in X
000008r 2               ; but half scanlines in Y.
000008r 2               ; The top visible line is the line below the value written here.
000008r 2               ; For example, in 224-line mode, if 12 is written, lines 13 through
000008r 2               ; 237 of the background are visible.  This differs from the NES.
000008r 2               ;
000008r 2               ; Mode 7 uses this value as the center of rotation.  This differs
000008r 2               ; from the GBA, which fixes the center of rotation at the top left.
000008r 2               
000008r 2               ; 211B-2120 control mode 7 matrix; to be documented later
000008r 2               
000008r 2               ; S-PPU VRAM data port ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000008r 2               
000008r 2               PPUCTRL = $2115
000008r 2               ; 76543210
000008r 2               ; |   ||++- VRAM address increment (1, 32, 128, 128)
000008r 2               ; |   ++--- Rotate low bits of address left by 3 (off, 8, 9, or 10)
000008r 2               ; +-------- 0: Increment after low data port access; 1: after high
000008r 2               ; Corresponds to bit 2 of $2000 on NES
000008r 2               VRAM_DOWN   = $01
000008r 2               VRAM_M7DOWN = $02
000008r 2               INC_DATAHI  = $80
000008r 2               
000008r 2               PPUADDR = $2116  ; Word address, not double-write anymore
000008r 2               PPUDATA = $2118
000008r 2               PPUDATAHI = $2119
000008r 2               PPUDATARD = $2139  ; Same dummy read as on NES is needed
000008r 2               PPUDATARDHI = $213A
000008r 2               
000008r 2               ; S-PPU palette ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000008r 2               
000008r 2               CGADDR = $2121
000008r 2               CGDATA = $2122  ; 5-bit BGR, write twice, low byte first
000008r 2               CGDATARD = $213B  ; 5-bit BGR, read twice, low byte first
000008r 2               .define RGB(r,g,b) ((r)|((g)<<5)|((b)<<10))
000008r 2               
000008r 2               ; S-PPU window ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000008r 2               
000008r 2               BG12WINDOW = $2123
000008r 2               BG34WINDOW = $2124
000008r 2               OBJWINDOW = $2125
000008r 2               ; 76543210
000008r 2               ; ||||||++- 0: disable window 1 on BG1/BG3/OBJ; 2: enable; 3: enable outside
000008r 2               ; ||||++--- 0: disable window 2 on BG1/BG3/OBJ; 2: enable; 3: enable outside
000008r 2               ; ||++----- 0: disable window 1 on BG2/BG4; 2: enable; 3: enable outside
000008r 2               ; ++------- 0: disable window 2 on BG2/BG4; 2: enable; 3: enable outside
000008r 2               
000008r 2               WINDOW1L = $2126
000008r 2               WINDOW1R = $2127
000008r 2               WINDOW2L = $2128
000008r 2               WINDOW2R = $2129
000008r 2               
000008r 2               BGWINDOP = $212A   ; Window op is how windows are combined when both
000008r 2               OBJWINDOP = $212B  ; windows 1 and 2 are enabled.
000008r 2               ; 76543210
000008r 2               ; ||||||++- Window op for plane 0 or sprites (0: or, 1: and, 2: xor, 3: xnor)
000008r 2               ; ||||++--- Window op for plane 1 or color window
000008r 2               ; ||++----- Window op for plane 2
000008r 2               ; ++------- Window op for plane 3
000008r 2               
000008r 2               ; S-PPU blending (or "color math") ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000008r 2               
000008r 2               ; The main layer enable reg, corresponding to PPUMASK on the NES,
000008r 2               ; is BLENDMAIN.
000008r 2               BLENDMAIN  = $212C  ; Layers enabled for main input of blending
000008r 2               BLENDSUB   = $212D  ; Layers enabled for sub input of blending
000008r 2               WINDOWMAIN = $212E  ; Windows enabled for main input of blending
000008r 2               WINDOWSUB  = $212F  ; Windows enabled for sub input of blending
000008r 2               ; 76543210
000008r 2               ;    ||||+- plane 0
000008r 2               ;    |||+-- plane 1
000008r 2               ;    ||+--- plane 2
000008r 2               ;    |+---- plane 3
000008r 2               ;    +----- sprites
000008r 2               ; BLENDMAIN roughly parallels NES $2001 bits 4-3,
000008r 2               ; except that turning off both bits doesn't disable rendering.
000008r 2               ; (Use PPUBRIGHT for that.)
000008r 2               
000008r 2               ; PPU1 appears to generate a stream of (main, sub) pairs, which
000008r 2               ; PPU2 combines to form output colors.
000008r 2               
000008r 2               ; Blending parameters not documented yet.  Wait for a future demo.
000008r 2               
000008r 2               ; When BGMODE is 0-6 (or during vblank in mode 7), a fast 16x8
000008r 2               ; signed multiply is available, finishing by the next CPU cycle.
000008r 2               M7MCAND = $211B    ; write low then high
000008r 2               M7MUL = $211C      ; 8-bit factor
000008r 2               M7PRODLO = $2134
000008r 2               M7PRODHI = $2135
000008r 2               M7PRODBANK = $2136
000008r 2               
000008r 2               GETXY = $2137  ; read while $4201 D7 is set: populate x and y coords
000008r 2               XCOORD = $213C  ; used with light guns, read twice
000008r 2               YCOORD = $213D  ; also read twice
000008r 2               
000008r 2               ; SPC700 communication ports ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000008r 2               
000008r 2               APU0 = $2140
000008r 2               APU1 = $2141
000008r 2               APU2 = $2142
000008r 2               APU3 = $2143
000008r 2               
000008r 2               ; S-CPU interrupt control ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000008r 2               
000008r 2               PPUNMI = $4200
000008r 2               ; 76543210
000008r 2               ; | ||   +- Automatically read controllers in first 4 lines of vblank
000008r 2               ; | ++----- 0: No IRQ; 1: IRQs at HTIME;
000008r 2               ; |         2: one IRQ at (0, VTIME); 3: one IRQ at (HTIME, VTIME)
000008r 2               ; +-------- 1: Enable NMI at start of vblank
000008r 2               VBLANK_NMI = $80
000008r 2               HTIME_IRQ  = $10
000008r 2               VTIME_IRQ  = $20
000008r 2               HVTIME_IRQ = $30
000008r 2               AUTOREAD   = $01
000008r 2               
000008r 2               HTIME   = $4207
000008r 2               HTIMEHI = $4208
000008r 2               VTIME   = $4209
000008r 2               VTIMEHI = $420A
000008r 2               
000008r 2               NMISTATUS = $4210
000008r 2               ; 76543210
000008r 2               ; |   ||||
000008r 2               ; |   ++++- DMA controller version (1, 2) where v1 has an HDMA glitch
000008r 2               ; +-------- 1: Vblank has started since last read (like $2002.d7 on NES)
000008r 2               
000008r 2               TIMESTATUS = $4211  ; Acknowledge htime/vtime IRQ
000008r 2               VBLSTATUS = $4212
000008r 2               ; 76543210
000008r 2               ; ||     +- 0: Controller reading finished; 1: busy
000008r 2               ; |+------- In hblank
000008r 2               ; +-------- In vblank
000008r 2               
000008r 2               ROMSPEED = $420D  ; 0: slow ROM everywhere; 1: fast ROM in banks 80-FF
000008r 2                                 ; (requires 120ns or faster PRG ROM)
000008r 2               
000008r 2               ; S-CPU controller I/O ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000008r 2               
000008r 2               ; Manual controller reading behaves almost exactly as on Famicom.
000008r 2               ; For games using up to 2 standard controllers, these aren't needed,
000008r 2               ; as you can enable controller autoreading along with vblank NMIs.
000008r 2               ; But for games using (multitap, mouse, etc.), you will need to
000008r 2               ; read the extra bits separately after the autoreader finishes.
000008r 2               JOY0 = $4016
000008r 2               JOY1 = $4017
000008r 2               
000008r 2               ; In addition to the common strobe, each controller port has an
000008r 2               ; additional output bit that can be used as, say, a chip select
000008r 2               ; for SPI peripherals.
000008r 2               JOYOUT = $4201
000008r 2               ; 76543210
000008r 2               ; |+------- Controller 1 pin 6 output
000008r 2               ; +-------- Controller 2 pin 6 output
000008r 2               
000008r 2               ; Results of the autoreader
000008r 2               JOY1CUR = $4218    ; Bit 0: used by standard controllers
000008r 2               JOY2CUR = $421A
000008r 2               JOY1B1CUR = $421C  ; Bit 1: used by multitap and a few oddball
000008r 2               JOY2B1CUR = $421E  ; input devices
000008r 2               ; FEDCBA98 76543210
000008r 2               ; BYSRUDLR AXLRTTTT
000008r 2               ; |||||||| ||||++++- controller type (0: controller, 1: mouse)
000008r 2               ; |||||||| ||++----- shoulder buttons
000008r 2               ; ++-------++------- right face buttons
000008r 2               ;   ||++++---------- Control Pad
000008r 2               ;   ++-------------- center face buttons
000008r 2               KEY_B      = $8000
000008r 2               KEY_Y      = $4000
000008r 2               KEY_SELECT = $2000
000008r 2               KEY_START  = $1000
000008r 2               KEY_UP     = $0800
000008r 2               KEY_DOWN   = $0400
000008r 2               KEY_LEFT   = $0200
000008r 2               KEY_RIGHT  = $0100
000008r 2               KEY_A      = $0080
000008r 2               KEY_X      = $0040
000008r 2               KEY_L      = $0020
000008r 2               KEY_R      = $0010
000008r 2               
000008r 2               ; S-CPU multiply and divide ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000008r 2               
000008r 2               ; Multiply unit.  Also good for shifting pixels when drawing
000008r 2               ; text in a proportional font.
000008r 2               CPUMCAND = $4202  ; unchanged by multiplications
000008r 2               CPUMUL = $4203    ; write here to fill CPUPROD 8 cycles later
000008r 2               CPUPROD = $4216
000008r 2               CPUPRODHI = $4217
000008r 2               
000008r 2               ; Divide unit
000008r 2               CPUNUM = $4204
000008r 2               CPUNUMHI = $4205
000008r 2               CPUDEN = $4206    ; write divisor to fill CPUQUOT/CPUREM 16 cycles later
000008r 2               CPUQUOT = $4214
000008r 2               CPUQUOTHI = $4215
000008r 2               CPUREM = CPUPROD
000008r 2               CPUREMHI = CPUPRODHI
000008r 2               
000008r 2               ; S-CPU DMA ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000008r 2               
000008r 2               COPYSTART = $420B  ; writes of 1 << n start a DMA copy on channel n
000008r 2               HDMASTART = $420C  ; writes of 1 << n start HDMA on channel n
000008r 2               ; Don't run a DMA copy while HDMA is enabled, or you might run into
000008r 2               ; a defect in revision 1 of the S-CPU that causes crashing.
000008r 2               
000008r 2               ; There are 8 DMA channels.
000008r 2               ; Registers for channels 1-7 start at $4310, $4320, ...
000008r 2               DMAMODE = $4300
000008r 2               ; 76543210
000008r 2               ; || ||+++- PPU address offset pattern
000008r 2               ; || ||     0: 0     1: 01    2: 00    3: 0011  4: 0123  5: 0101
000008r 2               ; || ++---- Memcpy only: 0: increment; 1: fixed; 2: decrement
000008r 2               ; |+------- HDMA only: 1: Table contains pointers
000008r 2               ; +-------- Direction (0: read CPU write PPU; 1: read PPU write CPU)
000008r 2               DMA_LINEAR   = $00
000008r 2               DMA_01       = $01
000008r 2               DMA_00       = $02  ; For HDMA to double write ports; copies can use linear
000008r 2               DMA_0011     = $03  ; For HDMA to scroll positions and mode 7 matrices
000008r 2               DMA_0123     = $04  ; For HDMA to window registers
000008r 2               DMA_0101     = $05  ; Not sure how this would be useful for HDMA
000008r 2               DMA_FORWARD  = $00
000008r 2               DMA_CONST    = $08
000008r 2               DMA_BACKWARD = $10
000008r 2               DMA_INDIRECT = $40
000008r 2               DMA_READPPU  = $80
000008r 2               
000008r 2               DMAPPUREG = $4301
000008r 2               DMAADDR = $4302
000008r 2               DMAADDRHI = $4303
000008r 2               DMAADDRBANK = $4304
000008r 2               DMALEN = $4305  ; number of bytes, not number of transfers; 0 means 65536
000008r 2               DMALENHI = $4306
000008r 2               
000008r 2               HDMAINDBANK = $4307
000008r 2               HDMATABLELO = $4308
000008r 2               HDMATABLEHI = $4309
000008r 2               HDMALINE = $430A
000008r 2               
000008r 2               ; composite values for use with 16-bit writes to DMAMODE
000008r 2               DMAMODE_PPULOFILL = (<PPUDATA << 8)       | DMA_LINEAR | DMA_CONST
000008r 2               DMAMODE_PPUHIFILL = (<(PPUDATA + 1) << 8) | DMA_LINEAR | DMA_CONST
000008r 2               DMAMODE_PPUFILL   = (<PPUDATA << 8)       | DMA_01     | DMA_CONST
000008r 2               DMAMODE_PPULODATA = (<PPUDATA << 8)       | DMA_LINEAR | DMA_FORWARD
000008r 2               DMAMODE_PPUHIDATA = (<(PPUDATA + 1) << 8) | DMA_LINEAR | DMA_FORWARD
000008r 2               DMAMODE_PPUDATA   = (<PPUDATA << 8)       | DMA_01     | DMA_FORWARD
000008r 2               DMAMODE_CGDATA    = (<CGDATA << 8)        | DMA_00     | DMA_FORWARD
000008r 2               DMAMODE_OAMDATA   = (<OAMDATA << 8)       | DMA_00     | DMA_FORWARD
000008r 2               
000008r 2               ; FULLSNES NAMES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000008r 2               ;
000008r 2               ; These aliases match the names presented in Fullsnes.
000008r 2               
000008r 2               ; S-PPU write
000008r 2               INIDISP = PPUBRIGHT
000008r 2               OAMADDL = OAMADDR+0
000008r 2               OAMADDH = OAMADDR+1
000008r 2               BG1SC   = NTADDR+0
000008r 2               BG2SC   = NTADDR+1
000008r 2               BG3SC   = NTADDR+2
000008r 2               BG4SC   = NTADDR+3
000008r 2               BG12NBA = BGCHRADDR+0  ; Welcome to...
000008r 2               BG34NBA = BGCHRADDR+1  ; BG34NBA JAM!!!
000008r 2               BG1HOFS = BGSCROLLX+0
000008r 2               BG1VOFS = BGSCROLLY+0
000008r 2               BG2HOFS = BGSCROLLX+2
000008r 2               BG2VOFS = BGSCROLLY+2
000008r 2               BG3HOFS = BGSCROLLX+4
000008r 2               BG3VOFS = BGSCROLLY+4
000008r 2               BG4HOFS = BGSCROLLX+6
000008r 2               BG4VOFS = BGSCROLLY+6
000008r 2               VMAIN   = PPUCTRL
000008r 2               VMADDL  = PPUADDR+0
000008r 2               VMADDH  = PPUADDR+1
000008r 2               VMDATAL = PPUDATA+0
000008r 2               VMDATAH = PPUDATA+1
000008r 2               M7A     = $211B
000008r 2               M7B     = $211C
000008r 2               M7C     = $211D
000008r 2               M7D     = $211E
000008r 2               M7X     = $211F
000008r 2               M7Y     = $2120
000008r 2               CGADD   = CGADDR
000008r 2               W12SEL  = BG12WINDOW
000008r 2               W34SEL  = BG34WINDOW
000008r 2               WOBJSEL = OBJWINDOW
000008r 2               WH0     = WINDOW1L
000008r 2               WH1     = WINDOW1R
000008r 2               WH2     = WINDOW2L
000008r 2               WH3     = WINDOW2R
000008r 2               WBGLOG  = BGWINDOP
000008r 2               WOBJLOG = OBJWINDOP
000008r 2               TM      = BLENDMAIN
000008r 2               TS      = BLENDSUB
000008r 2               TMW     = WINDOWMAIN
000008r 2               TSW     = WINDOWSUB
000008r 2               CGWSEL  = $2130
000008r 2               CGADSUB = $2131
000008r 2               COLDATA = $2132
000008r 2               SETINI  = PPURES
000008r 2               
000008r 2               ; S-PPU read
000008r 2               MPYL    = M7PRODLO
000008r 2               MPYM    = M7PRODHI
000008r 2               MPYH    = M7PRODBANK
000008r 2               SLHV    = GETXY
000008r 2               RDOAM   = OAMDATARD
000008r 2               RDVRAML = PPUDATARD
000008r 2               RDVRAMH = PPUDATARDHI
000008r 2               RDCGRAM = CGDATARD
000008r 2               OPHCT   = XCOORD
000008r 2               OPVCT   = YCOORD
000008r 2               STAT77  = PPUSTATUS1
000008r 2               STAT78  = PPUSTATUS2
000008r 2               
000008r 2               ; other B bus devices
000008r 2               APUIO0 = APU0  ; didn't want to use capital O with digit 0
000008r 2               APUIO1 = APU1
000008r 2               APUIO2 = APU2
000008r 2               APUIO3 = APU3
000008r 2               WMDATA = $2180
000008r 2               WMADDL = $2181
000008r 2               WMADDM = $2182
000008r 2               WMADDH = $2183
000008r 2               
000008r 2               ; S-CPU I/O write
000008r 2               NMITIMEN = $4200
000008r 2               WRIO     = $4201
000008r 2               WRMPYA   = CPUMCAND
000008r 2               WRMPYB   = CPUMUL
000008r 2               WRDIVL   = CPUNUM
000008r 2               WRDIVH   = CPUNUMHI
000008r 2               WRDIVB   = CPUDEN
000008r 2               HTIMEL   = HTIME
000008r 2               HTIMEH   = HTIMEHI
000008r 2               VTIMEL   = VTIME
000008r 2               VTIMEH   = VTIMEHI
000008r 2               MDMAEN   = COPYSTART  ; where I come from MDMA is a drug
000008r 2               HDMAEN   = HDMASTART
000008r 2               MEMSEL   = ROMSPEED
000008r 2               
000008r 2               ; S-CPU I/O read
000008r 2               RDNMI  = NMISTATUS
000008r 2               TIMEUP = TIMESTATUS
000008r 2               HVBJOY = VBLSTATUS
000008r 2               RDIO   = $4213
000008r 2               RDDIVL = CPUQUOT
000008r 2               RDDIVH = CPUQUOT+1
000008r 2               RDMPYL = CPUPROD
000008r 2               RDMPYH = CPUPROD+1
000008r 2               JOY1L  = JOY1CUR+0
000008r 2               JOY1H  = JOY1CUR+1
000008r 2               JOY2L  = JOY2CUR+0
000008r 2               JOY2H  = JOY2CUR+1
000008r 2               JOY3L  = JOY1B1CUR+0
000008r 2               JOY3H  = JOY1B1CUR+1
000008r 2               JOY4L  = JOY2B1CUR+0
000008r 2               JOY4H  = JOY2B1CUR+1
000008r 2               .endif
000008r 2               
000008r 1               .include "initSNES.inc"
000008r 2               ;------------------------------------------------------------------------
000008r 2               ;-  Written by: Neviksti
000008r 2               ;-     If you use my code, please share your creations with me
000008r 2               ;-     as I am always curious :)
000008r 2               ;------------------------------------------------------------------------
000008r 2               
000008r 2               
000008r 2               ;----------------------------------------------------------------------------
000008r 2               ; InitSNES -- my "standard" initialization of SNES memory and registers
000008r 2               ;----------------------------------------------------------------------------
000008r 2               .macro InitSNES
000008r 2                 sei                     ;disable interrupts
000008r 2                 clc                     ;switch to native mode
000008r 2                 xce
000008r 2               
000008r 2                 REP #$38		; mem/A = 16 bit, X/Y = 16 bit
000008r 2               			;decimal mode off
000008r 2                 .i16
000008r 2                 LDX #$1FFF	;Setup the stack
000008r 2                 TXS			;Transfer Index X to Stack Pointer Register
000008r 2               
000008r 2                 ;do the rest of the initialization in a routine
000008r 2                 JSL InitializeSNES
000008r 2               
000008r 2                 SEP #$20		; mem/A = 8 bit
000008r 2               .endmacro
000008r 2               
000008r 2               ;----------------------------------------------------------------------------
000008r 2               
000008r 2               .segment "CODE"
000008r 2               
000008r 2               InitializeSNES:
000008r 2  4B             PHK			;set Data Bank = Program Bank
000009r 2  AB             PLB
00000Ar 2               
00000Ar 2  A9 00          LDA #$0000	;set Direct Page = $0000
00000Cr 2  5B             TCD			;Transfer Accumulator to Direct Register
00000Dr 2               
00000Dr 2  AE FD 1F       LDX $1FFD		;we clear all the mem at one point ...
000010r 2  8E 72 43       STX $4372  	;so save the return address in a place that won't get overwritten
000013r 2  AE FF 1F       LDX $1FFF
000016r 2  8E 74 43       STX $4374
000019r 2               
000019r 2  E2 20          SEP #$20		; mem/A = 8 bit
00001Br 2  C2 10          REP #$10
00001Dr 2               
00001Dr 2  A9 8F          LDA #$8F
00001Fr 2  8D 00 21       STA $2100		;turn screen off for now, set brightness to normal
000022r 2               
000022r 2  A2 01 21       LDX #$2101
000025r 2               _Loop00:		;regs $2101-$210C
000025r 2  74 00          STZ $00,X		;set Sprite,Character,Tile sizes to lowest, and set addresses to $0000
000027r 2  E8             INX
000028r 2  E0 0D 21       CPX #$210D
00002Br 2  D0 F8          BNE _Loop00
00002Dr 2               
00002Dr 2               _Loop01:		;regs $210D-$2114
00002Dr 2  74 00          STZ $00,X		;Set all BG scroll values to $0000
00002Fr 2  74 00          STZ $00,X
000031r 2  E8             INX
000032r 2  E0 15 21       CPX #$2115
000035r 2  D0 F6          BNE _Loop01
000037r 2               
000037r 2  A9 80          LDA #$80		;reg $2115
000039r 2  8D 15 21       STA $2115		; Initialize VRAM transfer mode to word-access, increment by 1
00003Cr 2               
00003Cr 2  9C 16 21       STZ $2116		;regs $2117-$2117
00003Fr 2  9C 17 21       STZ $2117		;VRAM address = $0000
000042r 2               
000042r 2               			;reg $2118-$2119
000042r 2               			;VRAM write register... don't need to initialize
000042r 2               
000042r 2  9C 1A 21       STZ $211A		;clear Mode7 setting
000045r 2               
000045r 2  A2 1B 21       LDX #$211B
000048r 2               _Loop02:		;regs $211B-$2120
000048r 2  74 00          STZ $00,X		;clear out the Mode7 matrix values
00004Ar 2  74 00          STZ $00,X
00004Cr 2  E8             INX
00004Dr 2  E0 21 21       CPX #$2121
000050r 2  D0 F6          BNE _Loop02
000052r 2               
000052r 2               			;reg $2121 - Color address, doesn't need initilaizing
000052r 2               			;reg $2122 - Color data, is initialized later
000052r 2               
000052r 2  A2 23 21       LDX #$2123
000055r 2               _Loop03:		;regs $2123-$2133
000055r 2  74 00          STZ $00,X		;turn off windows, main screens, sub screens, color addition,
000057r 2  E8             INX			;fixed color = $00, no super-impose (external synchronization),
000058r 2  E0 34 21       CPX #$2134	;no interlaced mode, normal resolution
00005Br 2  D0 F8          BNE _Loop03
00005Dr 2               
00005Dr 2               			;regs $2134-$2136  - multiplication result, no initialization needed
00005Dr 2               			;reg $2137 - software H/V latch, no initialization needed
00005Dr 2               			;reg $2138 - Sprite data read, no initialization needed
00005Dr 2               			;regs $2139-$213A  - VRAM data read, no initialization needed
00005Dr 2               			;reg $213B - Color RAM data read, no initialization needed
00005Dr 2               			;regs $213C-$213D  - H/V latched data read, no initialization needed
00005Dr 2               
00005Dr 2  9C 3E 21       STZ $213E		;reg $213E - might not be necesary, but selects PPU master/slave mode
000060r 2               			;reg $213F - PPU status flag, no initialization needed
000060r 2               
000060r 2               			;reg $2140-$2143 - APU communication regs, no initialization required
000060r 2               
000060r 2               			;reg $2180  -  read/write WRAM register, no initialization required
000060r 2               			;reg $2181-$2183  -  WRAM address, no initialization required
000060r 2               
000060r 2               			;reg $4016-$4017  - serial JoyPad read registers, no need to initialize
000060r 2               
000060r 2               
000060r 2  9C 00 42       STZ $4200		;reg $4200  - disable timers, NMI,and auto-joyread
000063r 2               
000063r 2  A9 FF          LDA #$FF
000065r 2  8D 01 42       STA $4201		;reg $4201  - programmable I/O write port, initalize to allow reading at in-port
000068r 2               
000068r 2               			;regs $4202-$4203  - multiplication registers, no initialization required
000068r 2               			;regs $4204-$4206  - division registers, no initialization required
000068r 2               
000068r 2               			;regs $4207-$4208  - Horizontal-IRQ timer setting, since we disabled this, it is OK to not init
000068r 2               			;regs $4209-$420A  - Vertical-IRQ timer setting, since we disabled this, it is OK to not init
000068r 2               
000068r 2  9C 0B 42       STZ $420B		;reg $420B  - turn off all general DMA channels
00006Br 2  9C 0C 42       STZ $420C		;reg $420C  - turn off all H-MA channels
00006Er 2               
00006Er 2  9C 0D 42       STZ $420D		;reg $420D  - ROM access time to slow (2.68Mhz)
000071r 2               
000071r 2  AD 10 42       LDA $4210		;reg $4210  - NMI status, reading resets
000074r 2               
000074r 2               			;reg $4211  - IRQ status, no need to initialize
000074r 2               			;reg $4212  - H/V blank and JoyRead status, no need to initialize
000074r 2               			;reg $4213  - programmable I/O inport, no need to initialize
000074r 2               
000074r 2               			;reg $4214-$4215  - divide results, no need to initialize
000074r 2               			;reg $4216-$4217  - multiplication or remainder results, no need to initialize
000074r 2               
000074r 2               			;regs $4218-$421f  - JoyPad read registers, no need to initialize
000074r 2               
000074r 2               			;regs $4300-$437F
000074r 2               			;no need to intialize because DMA was disabled above
000074r 2               			;also, we're not sure what all of the registers do, so it is better to leave them at
000074r 2               			;their reset state value
000074r 2               
000074r 2  20 rr rr      JSR ClearVRAM      ;Reset VRAM
000077r 2                ; JSR ClearPalette   ;Reset colors
000077r 2               
000077r 2                 ;**** clear Sprite tables ********
000077r 2               
000077r 2  9C 02 21       STZ $2102	;sprites initialized to be off the screen, palette 0, character 0
00007Ar 2  9C 03 21       STZ $2103
00007Dr 2  A2 80 00       LDX #$0080
000080r 2  A9 F0          LDA #$F0
000082r 2               _Loop08:
000082r 2  8D 04 21       STA $2104	;set X = 240
000085r 2  8D 04 21       STA $2104	;set Y = 240
000088r 2  9C 04 21       STZ $2104	;set character = $00
00008Br 2  9C 04 21       STZ $2104	;set priority=0, no flips
00008Er 2  CA             DEX
00008Fr 2  D0 F1          BNE _Loop08
000091r 2               
000091r 2  A2 20 00       LDX #$0020
000094r 2               _Loop09:
000094r 2  9C 04 21       STZ $2104		;set size bit=0, x MSB = 0
000097r 2  CA             DEX
000098r 2  D0 FA          BNE _Loop09
00009Ar 2               
00009Ar 2                 ;**** clear WRAM ********
00009Ar 2  9C 81 21       STZ $2181		;set WRAM address to $000000
00009Dr 2  9C 82 21       STZ $2182
0000A0r 2  9C 83 21       STZ $2183
0000A3r 2               
0000A3r 2  A2 08 80       LDX #$8008
0000A6r 2  8E 00 43       STX $4300         ;Set DMA mode to fixed source, BYTE to $2180
0000A9r 2  A2 rr rr       LDX #wram_fill_byte
0000ACr 2  8E 02 43       STX $4302         ;Set source offset
0000AFr 2  A9 rr          LDA #<.bank(wram_fill_byte)
0000B1r 2  8D 04 43       STA $4304         ;Set source bank
0000B4r 2  A2 00 00       LDX #$0000
0000B7r 2  8E 05 43       STX $4305         ;Set transfer size to 64k bytes
0000BAr 2  A9 01          LDA #$01
0000BCr 2  8D 0B 42       STA $420B         ;Initiate transfer
0000BFr 2               
0000BFr 2  A9 01          LDA #$01          ;now set the next 64k bytes
0000C1r 2  8D 0B 42       STA $420B         ;Initiate transfer
0000C4r 2               
0000C4r 2  4B             PHK			;make sure Data Bank = Program Bank
0000C5r 2  AB             PLB
0000C6r 2               
0000C6r 2  58             CLI			;enable interrupts again
0000C7r 2               
0000C7r 2  AE 72 43       LDX $4372  	;get our return address...
0000CAr 2  8E FD 1F       STX $1FFD
0000CDr 2  AD 74 43       LDA $4374
0000D0r 2  8D FF 1F       STA $1FFF
0000D3r 2  6B             RTL
0000D4r 2               
0000D4r 2               wram_fill_byte:
0000D4r 2  00           .byte $00
0000D5r 2               
0000D5r 2               ;----------------------------------------------------------------------------
0000D5r 2               ; ClearVRAM -- Sets every byte of VRAM to zero
0000D5r 2               ; In: None
0000D5r 2               ; Out: None
0000D5r 2               ; Modifies: flags
0000D5r 2               ;----------------------------------------------------------------------------
0000D5r 2               ClearVRAM:
0000D5r 2  48              pha
0000D6r 2  DA              phx
0000D7r 2  08              php
0000D8r 2               
0000D8r 2  C2 30           REP #$30		; mem/A = 8 bit, X/Y = 16 bit
0000DAr 2  E2 20           SEP #$20
0000DCr 2               
0000DCr 2  A9 80           LDA #$80
0000DEr 2  8D 15 21        STA $2115         ;Set VRAM port to word access
0000E1r 2  A2 09 18        LDX #$1809
0000E4r 2  8E 00 43        STX $4300         ;Set DMA mode to fixed source, WORD to $2118/9
0000E7r 2  A2 00 00        LDX #$0000
0000EAr 2  8E 16 21        STX $2116         ;Set VRAM port address to $0000
0000EDr 2  86 00           STX $0000         ;Set $00:0000 to $0000 (assumes scratchpad ram)
0000EFr 2  8E 02 43        STX $4302         ;Set source address to $xx:0000
0000F2r 2  A9 00           LDA #$00
0000F4r 2  8D 04 43        STA $4304         ;Set source bank to $00
0000F7r 2  A2 FF FF        LDX #$FFFF
0000FAr 2  8E 05 43        STX $4305         ;Set transfer size to 64k-1 bytes
0000FDr 2  A9 01           LDA #$01
0000FFr 2  8D 0B 42        STA $420B         ;Initiate transfer
000102r 2               
000102r 2  9C 19 21        STZ $2119         ;clear the last byte of the VRAM
000105r 2               
000105r 2  28              plp
000106r 2  FA              plx
000107r 2  68              pla
000108r 2  60              RTS
000109r 2               
000109r 2               ;----------------------------------------------------------------------------
000109r 2               ; ClearPalette -- Reset all palette colors to zero
000109r 2               ; In: None
000109r 2               ; Out: None
000109r 2               ; Modifies: flags
000109r 2               ;----------------------------------------------------------------------------
000109r 2               ClearPalette:
000109r 2  DA              PHX
00010Ar 2  08              PHP
00010Br 2  C2 30           REP #$30		; mem/A = 8 bit, X/Y = 16 bit
00010Dr 2  E2 20           SEP #$20
00010Fr 2               
00010Fr 2  9C 21 21        STZ $2121
000112r 2  A2 00 01        LDX #$0100
000115r 2               ClearPaletteLoop:
000115r 2  9C 22 21        STZ $2122
000118r 2  9C 22 21        STZ $2122
00011Br 2  CA              DEX
00011Cr 2  D0 F7           BNE ClearPaletteLoop
00011Er 2               
00011Er 2  28              PLP
00011Fr 2  FA              PLX
000120r 2  60              RTS
000121r 2               
000121r 2               
000121r 1               .include "constants.asm"
000121r 2               ;---oam pt 2 write masks---
000121r 2               
000121r 2               .define SPRITE3_MASK %00111111
000121r 2               .define SPRITE2_MASK %11001111
000121r 2               .define SPRITE1_MASK %11110011
000121r 2               .define SPRITE0_MASK %11111100
000121r 2               
000121r 2               ;oam mirror defines
000121r 2               .define OamMirror $400
000121r 2               .define Oam2Mirror $600
000121r 2               
000121r 2               .define BG2ScrollTable $620
000121r 2               ;object list format:
000121r 2               ; x pos (byte)
000121r 2               ; y pos (byte)
000121r 2               ; attributes (byte)
000121r 2               ; status (0=still, 1 = moving, 2 = ready to despawn, etc) (byte)
000121r 2               ; pointer to "handler" function
000121r 2               .define EntityList $630
000121r 2               .define TilemapMirror $700
000121r 2               .define TextMirror $B00 ;mirror for text bg layer
000121r 2               
000121r 1               .include "variables.asm"
000121r 2               .enum ;start at $10 because first 15 bytes are "scratchpad"
000121r 2               joypad = $10
000121r 2               joypadBuf = joypad+2 ;last frame's joypad input, useful for differentiating a press and a hold
000121r 2               scrollX = joypadBuf+2
000121r 2               scrollY = scrollX+2
000121r 2               scroll2X = scrollY+2
000121r 2               frameStatus ;0 if main loop is done executing
000121r 2               
000121r 2               ;---scroll.asm---
000121r 2               scrollColumn ;last scroll column loaded
000121r 2               scrollScreenAddr=scrollColumn+2 ;pointer to "screen" that you're loading tiles from
000121r 2               scrollScreenNum=scrollScreenAddr+2
000121r 2               scrollMirrorPtr = scrollScreenNum+2
000121r 2               scrollLock = scrollMirrorPtr+2 ;player x pos within screen that causes scrolling to lock
000121r 2               
000121r 2               ;---player.asm---
000121r 2               playerX = scrollLock+2 ;16.16 fixed
000121r 2               playerY = playerX+4
000121r 2               playerSpriteX = playerY+4
000121r 2               playerXSpeed = playerSpriteX+2
000121r 2               playerYSpeed = playerXSpeed+4
000121r 2               playerBGTile = playerYSpeed+4
000121r 2               
000121r 2               playerTileNum = playerBGTile+2
000121r 2               playerAnimTimer
000121r 2               playerAnimMode
000121r 2               playerAttrs
000121r 2               playerState ;16 bit to avoid constant accumulator size changing
000121r 2               movementState = playerState+2
000121r 2               playerDirection = movementState+2 ;0 = still, 1 = left, 2 = right
000121r 2               .endenum
000121r 2               
000121r 1               .include "macros.asm"
000121r 2               .macro LoadPalette source, colorIndex, numColors
000121r 2               ;parameters:
000121r 2               ;source, color to start on, number of colors to copy
000121r 2                   lda #colorIndex
000121r 2                   sta $2121       ; Start at START color
000121r 2                   lda #<.bank(source)        ; Using : before the parameter gets its bank.
000121r 2                   ldx #source         ; Not using : gets the offset address.
000121r 2                   ldy #(numColors * 2)   ; 2 bytes for every color
000121r 2                   jsr DMAPalette
000121r 2               .endmacro
000121r 2               
000121r 2               .macro LoadBlockToVRAM source, destination, size
000121r 2               ;parameters:
000121r 2               ;source, destination, size
000121r 2                   lda #$80
000121r 2                   sta $2115       ; Set VRAM transfer mode to word-access, increment by 1
000121r 2                   ldx #destination         ; DEST
000121r 2                   stx $2116       ; $2116: Word address for accessing VRAM.
000121r 2                   lda #.lobyte(.bank(source))        ; SRCBANK
000121r 2                   ldx #.loword(source)         ; SRCOFFSET
000121r 2                   ldy #size         ; SIZE
000121r 2                   jsr LoadVRAM
000121r 2               .endmacro
000121r 2               
000121r 2               .macro WRAMtoVRAM source, destination, size
000121r 2               	lda #$80
000121r 2               	sta $2115
000121r 2               	ldx #destination
000121r 2               	stx $2116 ;vram write cursor
000121r 2               	lda #$7e ; source bank, means this macro can only access first 64k of wram
000121r 2               	ldx #.loword(source)
000121r 2               	ldy #size
000121r 2               	jsr LoadVRAM
000121r 2               .endmacro
000121r 2               
000121r 2               .macro LoadBlockToWRAM source, destination, size
000121r 2               	ldx #.loword(source)
000121r 2               	stx $4302 ;source address
000121r 2               	lda #.lobyte(.bank(source))
000121r 2               	sta $4304 ;bank
000121r 2               	ldx #size
000121r 2               	stx $4305
000121r 2               	ldx #destination ; set wram transfer address
000121r 2               	stx $2181
000121r 2               	stz $2183 ;only accesses the first 64k, yolo
000121r 2               	lda #$80 ;dest = vram port
000121r 2               	sta $4301
000121r 2               	stz $4300 ; 1 byte transfer, auto-increment
000121r 2               	lda #$1
000121r 2               	sta $420b ;start transfer
000121r 2               .endmacro
000121r 2               
000121r 2               .macro SetHScroll hVal
000121r 2               ;parameter: mem address of horizontal scroll val
000121r 2               	rep #$20
000121r 2               	lda hVal
000121r 2               	sep #$20
000121r 2               	sta $210D	; BG1 horiz scroll
000121r 2               	xba
000121r 2               	sta $210D
000121r 2               .endmacro
000121r 2               
000121r 2               .macro SetVScroll vVal
000121r 2               ;parameter: mem address of vertical scroll val
000121r 2               	rep #$20
000121r 2               	lda vVal
000121r 2               	sep #$20
000121r 2               	sta $210E	; BG1 vert scroll
000121r 2               	xba
000121r 2               	sta $210E
000121r 2               .endmacro
000121r 2               
000121r 2               .macro SetMosaic level
000121r 2               ;parameter: mosaic level (0-15 dec, 0-f hex)
000121r 2               	lda level
000121r 2               	and #$F ;param %=15
000121r 2               	clc
000121r 2               	ror a
000121r 2               	ror a
000121r 2               	ror a
000121r 2               	ora #$1
000121r 2               	sta $2106
000121r 2               .endmacro
000121r 2               
000121r 2               .macro PositiveDiff val1, val2
000121r 2               ;puts the difference of val1 and val2 into a
000121r 2               	lda val1
000121r 2               	cmp val2
000121r 2               	bcs @Val1Greater
000121r 2               	sec
000121r 2               	lda val2
000121r 2               	sbc val1
000121r 2               	jmp @end
000121r 2               @Val1Greater:
000121r 2               	sec
000121r 2               	sbc val2
000121r 2               @end:
000121r 2               .endmacro
000121r 2               
000121r 2               .macro a16
000121r 2               	rep #$20
000121r 2               	.a16
000121r 2               .endmacro
000121r 2               
000121r 2               .macro a8
000121r 2               	sep #$20
000121r 2               	.a8
000121r 2               .endmacro
000121r 2               
000121r 2               .segment "CODE"
000121r 2               DMAPalette:
000121r 2               ;a- data bank
000121r 2               ;x- data offset
000121r 2               ;y- size of data
000121r 2               
000121r 2               ;processor status onto stack
000121r 2  8B           	phb
000122r 2  08           	php
000123r 2  8E 02 43     	stx $4302 ;address into dma 0 source register
000126r 2  8D 04 43     	sta $4304 ;bank into channel 0 bank register
000129r 2  8C 05 43     	sty $4305 ;number of bytes into channel 0 size
00012Cr 2  9C 00 43     	stz $4300 ;dma byte mode, increment by 1
00012Fr 2  A9 22        	lda #$22 ;$2122=color palette write
000131r 2  8D 01 43     	sta $4301
000134r 2  A9 01        	lda #$1
000136r 2  8D 0B 42     	sta $420B ;start transfer
000139r 2               
000139r 2  28           	plp
00013Ar 2  AB           	plb
00013Br 2  60           	rts
00013Cr 2               
00013Cr 2               LoadVRAM:
00013Cr 2               ;a- data bank
00013Cr 2               ;x- data offset
00013Cr 2               ;y- num of bytes to copy
00013Cr 2  8B           	phb
00013Dr 2  08               php         ; Preserve Registers
00013Er 2  8E 02 43         stx $4302   ; Store Data offset into DMA source offset
000141r 2  8D 04 43         sta $4304   ; Store data Bank into DMA source bank
000144r 2  8C 05 43         sty $4305   ; Store size of data block
000147r 2               
000147r 2  A9 01            lda #$1
000149r 2  8D 00 43         sta $4300   ; Set DMA mode (word, normal increment)
00014Cr 2  A9 18            lda #$18    ; Set the destination register (VRAM write register)
00014Er 2  8D 01 43         sta $4301
000151r 2  A9 01            lda #$1    ; Initiate DMA transfer (channel 1)
000153r 2  8D 0B 42     	sta $420B
000156r 2               
000156r 2  28               plp         ; restore registers
000157r 2  AB           	plb
000158r 2  60               rts         ; return
000159r 2               
000159r 2               ClearMem:
000159r 2               ;x- amount of ram to clear
000159r 2               @ClearLoop:
000159r 2  74 00        	stz $0, x
00015Br 2  CA           	dex
00015Cr 2  D0 FB        	bne @ClearLoop
00015Er 2  64 00        	stz $0
000160r 2  60           	rts
000161r 2               
000161r 2               
000161r 1               .include "sprites.asm"
000161r 2               spriteNum = $0
000161r 2               xPos = $1
000161r 2               yPos = $3
000161r 2               tileNum = $4
000161r 2               sprAttrs = $5
000161r 2               oam2Data = $6
000161r 2               oam2WriteIndex = $7
000161r 2               
000161r 2               
000161r 2               .macro LoadSprite sprite, tile, xOffset, yOffset, attributes
000161r 2               ;parameters: sprite num, pointer to x coord, pointer to y coord, pointer to tile num, attributes, big/small
000161r 2               ;shoutout to nintendo for making me go through all this bullshit, can't have
000161r 2               ; all the memory together or something sane
000161r 2               	a8
000161r 2               	lda sprite
000161r 2               	sta spriteNum
000161r 2               	a16
000161r 2               	lda xOffset
000161r 2               	sta xPos
000161r 2               	a8
000161r 2               	lda yOffset
000161r 2               	sta yPos
000161r 2               	lda tile
000161r 2               	sta tileNum
000161r 2               	lda attributes
000161r 2               	sta sprAttrs
000161r 2               	jsr SetOamMirror
000161r 2               	a16
000161r 2               .endmacro
000161r 2               
000161r 2               .segment "CODE"
000161r 2               InitSprites:
000161r 2  08           	php
000162r 2  A9 01        	lda #$1
000164r 2  A2 00 00     	ldx #$0
000167r 2               OamInitLoop: ;apparently just setting the sprites to $100 doesn't actually cause them to be removed from the scanline limit
000167r 2  9D 00 04     	sta OamMirror,x ;sets lower byte of every sprite's x pos to 1
00016Ar 2  E8           	inx
00016Br 2  E8           	inx
00016Cr 2  E8           	inx
00016Dr 2  E8           	inx
00016Er 2  E0 00 02     	cpx #$200 ;$80 * 4
000171r 2  D0 F4        	bne OamInitLoop
000173r 2  A9 55        	lda #$55
000175r 2  A2 00 00     	ldx #$0
000178r 2               Oam2InitLoop:
000178r 2  9D 00 06     	sta Oam2Mirror,x
00017Br 2  E8           	inx
00017Cr 2  E0 20 00     	cpx #$20 ;size of oam pt 2
00017Fr 2  D0 F7        	bne Oam2InitLoop
000181r 2  28           	plp
000182r 2  60           	rts
000183r 2               
000183r 2               SetOamMirror: ;OAM handler function
000183r 2  A5 00        	lda spriteNum
000185r 2  EB           	xba
000186r 2  A9 00        	lda #$0 ;make sure top byte of a is 0
000188r 2  EB           	xba
000189r 2  C2 20        	a16
00018Br 2  18           	clc
00018Cr 2  2A           	rol a ;we multiply by 4 because each sprite has 4 bytes of data in OAM table
00018Dr 2  2A           	rol a
00018Er 2  AA           	tax
00018Fr 2  A5 01        	lda xPos
000191r 2  E2 20        	a8
000193r 2  9D 00 04     	sta OamMirror,x
000196r 2  EB           	xba ;high byte of sprite x position
000197r 2  29 01        	and #$1 ;SNES only cares about bit 9
000199r 2  85 06        	sta oam2Data ;data to write to OAM part 2
00019Br 2  E8           	inx
00019Cr 2  A5 03        	lda yPos
00019Er 2  9D 00 04     	sta OamMirror,x
0001A1r 2  E8           	inx
0001A2r 2  A5 04        	lda tileNum
0001A4r 2  9D 00 04     	sta OamMirror,x
0001A7r 2  E8           	inx
0001A8r 2  A5 05        	lda sprAttrs
0001AAr 2  9D 00 04     	sta OamMirror,x
0001ADr 2               
0001ADr 2               	; lda size ;i don't care about size at the moment, might enable later if I do
0001ADr 2               	; and #$1 ;combine sprite size and msb of xpos
0001ADr 2               	; ror a
0001ADr 2               	; ora oam2Data
0001ADr 2               	; sta oam2Data
0001ADr 2  A5 00        	lda spriteNum
0001AFr 2  18           	clc
0001B0r 2  6A           	ror a ;4 sprites per oam table byte
0001B1r 2  6A           	ror a
0001B2r 2  29 7F        	and #$7F
0001B4r 2  85 07        	sta oam2WriteIndex
0001B6r 2               
0001B6r 2  A5 00        	lda spriteNum
0001B8r 2  29 03        	and #%00000011 ;only care if it's 0 to 3 since there's 4 bytes in OAM pt 2
0001BAr 2  F0 0B        	beq Sprite0 ;check where in the byte to place 1st x bit/sprite size
0001BCr 2  C9 01        	cmp #$1
0001BEr 2  F0 16        	beq Sprite1
0001C0r 2  C9 02        	cmp #$2
0001C2r 2  F0 26        	beq Sprite2
0001C4r 2  4C rr rr     	jmp Sprite3
0001C7r 2               
0001C7r 2               Sprite0:
0001C7r 2  A6 07        	ldx oam2WriteIndex
0001C9r 2  BD 00 06     	lda Oam2Mirror,x
0001CCr 2  29 FC        	and #SPRITE0_MASK
0001CEr 2  05 06        	ora oam2Data
0001D0r 2  9D 00 06     	sta Oam2Mirror,x
0001D3r 2  4C rr rr     	jmp EndBitStuff
0001D6r 2               
0001D6r 2               Sprite1:
0001D6r 2  18           	clc
0001D7r 2  26 06        	rol oam2Data
0001D9r 2  26 06        	rol oam2Data
0001DBr 2               
0001DBr 2  A6 07        	ldx oam2WriteIndex
0001DDr 2  BD 00 06     	lda Oam2Mirror,x
0001E0r 2  29 F3        	and #SPRITE1_MASK
0001E2r 2  05 06        	ora oam2Data
0001E4r 2  9D 00 06     	sta Oam2Mirror,x
0001E7r 2  4C rr rr     	jmp EndBitStuff
0001EAr 2               
0001EAr 2               Sprite2:
0001EAr 2  18           	clc
0001EBr 2  26 06        	rol oam2Data
0001EDr 2  26 06        	rol oam2Data
0001EFr 2  26 06        	rol oam2Data
0001F1r 2  26 06        	rol oam2Data
0001F3r 2               
0001F3r 2  A6 07        	ldx oam2WriteIndex
0001F5r 2  BD 00 06     	lda Oam2Mirror,x
0001F8r 2  29 CF        	and #SPRITE2_MASK
0001FAr 2  05 06        	ora oam2Data
0001FCr 2  9D 00 06     	sta Oam2Mirror,x
0001FFr 2  4C rr rr     	jmp EndBitStuff
000202r 2               
000202r 2               Sprite3:
000202r 2  18           	clc
000203r 2  26 06        	rol oam2Data
000205r 2  26 06        	rol oam2Data
000207r 2  26 06        	rol oam2Data
000209r 2  26 06        	rol oam2Data
00020Br 2  26 06        	rol oam2Data
00020Dr 2  26 06        	rol oam2Data
00020Fr 2               
00020Fr 2  A6 07        	ldx oam2WriteIndex
000211r 2  BD 00 06     	lda Oam2Mirror,x
000214r 2  29 3F        	and #SPRITE3_MASK
000216r 2  05 06        	ora oam2Data
000218r 2  9D 00 06     	sta Oam2Mirror,x
00021Br 2               
00021Br 2               EndBitStuff:
00021Br 2  60           	rts
00021Cr 2               
00021Cr 2               
00021Cr 1               .include "text.asm"
00021Cr 2               .macro DrawText textAddr, xPos, yPos ;assumes a is 16 bits
00021Cr 2               	lda #textAddr
00021Cr 2               	sta $0
00021Cr 2               	lda xPos
00021Cr 2               	sta $2
00021Cr 2               	lda yPos
00021Cr 2               	jsr WriteString
00021Cr 2               .endmacro
00021Cr 2               
00021Cr 2               .macro DrawByte byteAddr, xPos, yPos ;assumes a is 16 bits
00021Cr 2               	lda byteAddr
00021Cr 2               	sta $0
00021Cr 2               	lda xPos
00021Cr 2               	sta $2
00021Cr 2               	lda yPos
00021Cr 2               	jsr WriteByte
00021Cr 2               .endmacro
00021Cr 2               
00021Cr 2               .segment "CODE"
00021Cr 2               
00021Cr 2               ;tile number = (asciiNum - $20)
00021Cr 2               
00021Cr 2               TextL0:
00021Cr 2               ;      01234567890123456789012345678901
00021Cr 2  48 69 74 20  .byte "Hit or miss, I guess they never",0
000220r 2  6F 72 20 6D  
000224r 2  69 73 73 2C  
00023Cr 2               TextL1:
00023Cr 2  6D 69 73 73  .byte "miss, huh? You got a boyfriend?",0
000240r 2  2C 20 68 75  
000244r 2  68 3F 20 59  
00025Cr 2               TextL2:
00025Cr 2  49 20 62 65  .byte "I bet he doesn't kiss ya! He gon",0
000260r 2  74 20 68 65  
000264r 2  20 64 6F 65  
00027Dr 2               TextL3:
00027Dr 2  66 69 6E 64  .byte "find another girl and he won't",0
000281r 2  20 61 6E 6F  
000285r 2  74 68 65 72  
00029Cr 2               TextL4:
00029Cr 2  6D 69 73 73  .byte "miss ya! He gon' skrrt and hit",0
0002A0r 2  20 79 61 21  
0002A4r 2  20 48 65 20  
0002BBr 2               TextL5:
0002BBr 2  74 68 65 20  .byte "the dab like Wiz Khalifa.",0
0002BFr 2  64 61 62 20  
0002C3r 2  6C 69 6B 65  
0002D5r 2               
0002D5r 2               
0002D5r 2               WriteString:
0002D5r 2  C2 20        	a16
0002D7r 2  0A           	asl ;yPos (already in a) * 32 + xPos = tilemap pos to start writing at
0002D8r 2  0A           	asl
0002D9r 2  0A           	asl
0002DAr 2  0A           	asl
0002DBr 2  0A           	asl
0002DCr 2  18           	clc
0002DDr 2  65 02        	adc $2
0002DFr 2  0A           	asl ;words -> bytes
0002E0r 2  AA           	tax
0002E1r 2               
0002E1r 2  A9 00 00     	lda #$0
0002E4r 2  A0 00 00     	ldy #$0
0002E7r 2               
0002E7r 2               	AsciiLoop:
0002E7r 2  B1 00        	lda ($0), y
0002E9r 2  29 FF 00     	and #$ff ;limit to first byte
0002ECr 2  F0 0F        	beq EndAsciiLoop ;strings are null terminated
0002EEr 2  38           		sec
0002EFr 2  E9 20 00     		sbc #$20
0002F2r 2  09 00 20     		ora #$2000 ;max priority
0002F5r 2  9D 00 0B     		sta TextMirror, x
0002F8r 2               
0002F8r 2  E8           		inx ;destination- words so inc by 2
0002F9r 2  E8           		inx
0002FAr 2  C8           		iny ;source- bytes so inc by 1
0002FBr 2  80 EA        	bra AsciiLoop
0002FDr 2               	EndAsciiLoop:
0002FDr 2  60           	rts
0002FEr 2               
0002FEr 2               WriteByte:
0002FEr 2  C2 20        	a16
000300r 2  0A           	asl ;yPos (already in a) * 32 + xPos = tilemap pos to start writing at
000301r 2  0A           	asl
000302r 2  0A           	asl
000303r 2  0A           	asl
000304r 2  0A           	asl
000305r 2  18           	clc
000306r 2  65 02        	adc $2
000308r 2  0A           	asl ;words -> bytes
000309r 2  AA           	tax
00030Ar 2               
00030Ar 2  A5 00        	lda $0
00030Cr 2  29 F0 00     	and #$f0
00030Fr 2  4A           	lsr
000310r 2  4A           	lsr
000311r 2  4A           	lsr
000312r 2  4A           	lsr
000313r 2  C9 0A 00     	cmp #$a ;because of how ASCII works, you have to add #$10 to the value to get
000316r 2  B0 06        	bcs AddLettersN1 ;the ascii tile if it's between 0-9, but #$17 if it's between A-F
000318r 2  18           		clc
000319r 2  69 10 00     		adc #$10
00031Cr 2  80 04        		bra DoneAddN1
00031Er 2               	AddLettersN1:
00031Er 2  18           		clc
00031Fr 2  69 17 00     		adc #$17
000322r 2               	DoneAddN1:
000322r 2  09 00 20     	ora #$2000
000325r 2  9D 00 0B     	sta TextMirror, x
000328r 2  E8           	inx
000329r 2  E8           	inx
00032Ar 2               	;repeat for second nybble
00032Ar 2  A5 00        	lda $0
00032Cr 2  29 0F 00     	and #$0f
00032Fr 2  C9 0A 00     	cmp #$a
000332r 2  B0 06        	bcs AddLettersN2
000334r 2  18           		clc
000335r 2  69 10 00     		adc #$10
000338r 2  80 04        		bra DoneAddN2
00033Ar 2               	AddLettersN2:
00033Ar 2  18           		clc
00033Br 2  69 17 00     		adc #$17
00033Er 2               	DoneAddN2:
00033Er 2  09 00 20     	ora #$2000
000341r 2  9D 00 0B     	sta TextMirror, x
000344r 2  60           	rts
000345r 2               
000345r 2               
000345r 1               .include "tiles.asm"
000345r 2               .segment "CODE"
000345r 2               
000345r 2               TILE_HARD = $0 ; if player is ejected from tile
000345r 2               
000345r 2               TileAttrs: ;either "hard" aka eject or pointer to heightmap
000345r 2  00 00        .word TILE_HARD
000347r 2  00 00        .word TILE_HARD
000349r 2  rr rr        .word HeightMap4
00034Br 2  rr rr        .word HeightMap6
00034Dr 2  rr rr        .word HeightMap8
00034Fr 2  rr rr        .word HeightMapA
000351r 2               
000351r 2               ADD = $0
000351r 2               SUBTRACT = $1
000351r 2               
000351r 2               AddSubTable: ;whether to add or subtract momentum depending on tile num
000351r 2  00 00        .word $0
000353r 2  00 00        .word $0
000355r 2  01 00        .word SUBTRACT
000357r 2  00 00        .word ADD
000359r 2  01 00        .word SUBTRACT
00035Br 2  01 00        .word SUBTRACT
00035Dr 2               
00035Dr 2               ;if tile has momentum, needs to be more than PLAYER_ACCEL or else weird stuff happens
00035Dr 2               MomentumTable:
00035Dr 2  00 00        .word $0
00035Fr 2  00 00        .word $0
000361r 2  00 60        .word $6000
000363r 2  00 60        .word $6000
000365r 2  00 44        .word $4400
000367r 2  00 44        .word $4400
000369r 2               
000369r 2               HeightMap4: ;height map for tile 4
000369r 2  01 00        .word $1
00036Br 2  02 00        .word $2
00036Dr 2  03 00        .word $3
00036Fr 2  04 00        .word $4
000371r 2  05 00        .word $5
000373r 2  06 00        .word $6
000375r 2  07 00        .word $7
000377r 2  08 00        .word $8
000379r 2  09 00        .word $9
00037Br 2  0A 00        .word $a
00037Dr 2  0B 00        .word $b
00037Fr 2  0C 00        .word $c
000381r 2  0D 00        .word $d
000383r 2  0E 00        .word $e
000385r 2  0F 00        .word $f
000387r 2  10 00        .word $10
000389r 2               
000389r 2               HeightMap6:
000389r 2  10 00        .word $10
00038Br 2  0F 00        .word $f
00038Dr 2  0E 00        .word $e
00038Fr 2  0D 00        .word $d
000391r 2  0C 00        .word $c
000393r 2  0B 00        .word $b
000395r 2  0A 00        .word $a
000397r 2  09 00        .word $9
000399r 2  08 00        .word $8
00039Br 2  07 00        .word $7
00039Dr 2  06 00        .word $6
00039Fr 2  05 00        .word $5
0003A1r 2  04 00        .word $4
0003A3r 2  03 00        .word $3
0003A5r 2  02 00        .word $2
0003A7r 2  01 00        .word $1
0003A9r 2               
0003A9r 2               HeightMap8:
0003A9r 2  01 00        .word $1
0003ABr 2  01 00        .word $1
0003ADr 2  02 00        .word $2
0003AFr 2  02 00        .word $2
0003B1r 2  03 00        .word $3
0003B3r 2  03 00        .word $3
0003B5r 2  04 00        .word $4
0003B7r 2  04 00        .word $4
0003B9r 2  05 00        .word $5
0003BBr 2  05 00        .word $5
0003BDr 2  06 00        .word $6
0003BFr 2  06 00        .word $6
0003C1r 2  07 00        .word $7
0003C3r 2  07 00        .word $7
0003C5r 2  08 00        .word $8
0003C7r 2  08 00        .word $8
0003C9r 2               
0003C9r 2               HeightMapA:
0003C9r 2  09 00        .word $9
0003CBr 2  09 00        .word $9
0003CDr 2  0A 00        .word $a
0003CFr 2  0A 00        .word $a
0003D1r 2  0B 00        .word $b
0003D3r 2  0B 00        .word $b
0003D5r 2  0C 00        .word $c
0003D7r 2  0C 00        .word $c
0003D9r 2  0D 00        .word $d
0003DBr 2  0D 00        .word $d
0003DDr 2  0E 00        .word $e
0003DFr 2  0E 00        .word $e
0003E1r 2  0F 00        .word $f
0003E3r 2  0F 00        .word $f
0003E5r 2  10 00        .word $10
0003E7r 2  10 00        .word $10
0003E9r 2               
0003E9r 1               .include "player.asm"
0003E9r 2               .segment "CODE"
0003E9r 2               
0003E9r 2               PLAYER_ACCEL = $4000 ;0.25 px
0003E9r 2               PLAYER_JUMP_SPEED = $fff8 ;-7
0003E9r 2               GRAVITY = $6fff ;~0.4px
0003E9r 2               
0003E9r 2               
0003E9r 2               MAX_PLAYER_SPEED = $3
0003E9r 2               MAX_SLOPE_SPEED = $4
0003E9r 2               PLAYER_STILL_TILE = $0
0003E9r 2               FIRST_PLAYER_TILE = $2
0003E9r 2               LAST_PLAYER_TILE = $8 ;horizontally
0003E9r 2               PLAYER_JUMPING_TILE = $E
0003E9r 2               PLAYER_TIMER_VAL = $6 ;animation timer
0003E9r 2               GROUND = $B0
0003E9r 2               
0003E9r 2               PLAYER_RIGHT_ATTRS = %00110000
0003E9r 2               PLAYER_LEFT_ATTRS =  %01110000
0003E9r 2               
0003E9r 2               PLAYER_WIDTH = $10
0003E9r 2               PLAYER_HEIGHT = $20
0003E9r 2               PLAYER_TOP = $9 ;offset from y pos to top of sprite
0003E9r 2               
0003E9r 2               .enum
0003E9r 2               STATE_DECEL
0003E9r 2               STATE_RIGHT_HELD
0003E9r 2               STATE_LEFT_HELD
0003E9r 2               .endenum
0003E9r 2               
0003E9r 2               .enum
0003E9r 2               MOVE_STATE_NORMAL
0003E9r 2               MOVE_STATE_JUMPING
0003E9r 2               MOVE_STATE_FALLING ;like jumping but without the jumping frame
0003E9r 2               MOVE_STATE_SLOPE ;when player is on slope
0003E9r 2               .endenum
0003E9r 2               
0003E9r 2               .enum
0003E9r 2               ANIM_MODE_ADD
0003E9r 2               ANIM_MODE_SUBTRACT
0003E9r 2               .endenum
0003E9r 2               
0003E9r 2               InitPlayer:
0003E9r 2  08           	php
0003EAr 2  E2 20        	a8
0003ECr 2  A9 B0        	lda #GROUND
0003EEr 2  85 2A        	sta playerY+2
0003F0r 2  A9 20        	lda #$20
0003F2r 2  85 26        	sta playerX+2
0003F4r 2  85 2C        	sta playerSpriteX
0003F6r 2  A9 30        	lda #PLAYER_RIGHT_ATTRS
0003F8r 2  85 3B        	sta playerAttrs
0003FAr 2  A9 02        	lda #FIRST_PLAYER_TILE
0003FCr 2  85 38        	sta playerTileNum
0003FEr 2  28           	plp
0003FFr 2  60           	rts
000400r 2               
000400r 2               HandlePlayerMovement:
000400r 2  08           	php
000401r 2  C2 20        	a16
000403r 2  A5 10        	lda joypad
000405r 2  89 00 01     	bit #KEY_RIGHT ;sets up player state based on joypad input
000408r 2  F0 10        	beq NotRight
00040Ar 2  A9 01 00     		lda #STATE_RIGHT_HELD
00040Dr 2  85 3C        		sta playerState
00040Fr 2  E2 20        		a8
000411r 2  A9 30        		lda #PLAYER_RIGHT_ATTRS
000413r 2  85 3B        		sta playerAttrs
000415r 2  C2 20        		a16
000417r 2  4C rr rr     		jmp EndStateAssign
00041Ar 2               	NotRight:
00041Ar 2  89 00 02     	bit #KEY_LEFT
00041Dr 2  F0 10        	beq NotLeft
00041Fr 2  A9 02 00     		lda #STATE_LEFT_HELD
000422r 2  85 3C        		sta playerState
000424r 2  E2 20        		a8
000426r 2  A9 70        		lda #PLAYER_LEFT_ATTRS
000428r 2  85 3B        		sta playerAttrs
00042Ar 2  C2 20        		a16
00042Cr 2  4C rr rr     		jmp EndStateAssign
00042Fr 2               	NotLeft:
00042Fr 2  A9 00 00     	lda #STATE_DECEL
000432r 2  85 3C        	sta playerState
000434r 2               
000434r 2               	EndStateAssign:
000434r 2               
000434r 2  A5 3C        	lda playerState
000436r 2  D0 03        	bne ModifySpeed
000438r 2  4C rr rr     		jmp Released
00043Br 2               	ModifySpeed:
00043Br 2  C9 01 00     	cmp #STATE_RIGHT_HELD
00043Er 2  D0 1C        	bne RightNotHeld
000440r 2  A5 30        		lda playerXSpeed+2		;if player speed is greater than max speed, don't apply acceleration
000442r 2  C9 03 00     		cmp #MAX_PLAYER_SPEED
000445r 2  30 03        		bmi @AccelPlayer
000447r 2  4C rr rr     			jmp AddSpeed
00044Ar 2               		@AccelPlayer:
00044Ar 2  A5 2E        			lda playerXSpeed
00044Cr 2  18           			clc
00044Dr 2  69 00 40     			adc #PLAYER_ACCEL
000450r 2  85 2E        			sta playerXSpeed
000452r 2  A5 30        			lda playerXSpeed+2
000454r 2  69 00 00     			adc #$0
000457r 2  85 30        			sta playerXSpeed+2
000459r 2  4C rr rr     			jmp AddSpeed
00045Cr 2               	RightNotHeld:
00045Cr 2  C9 02 00     	cmp #STATE_LEFT_HELD
00045Fr 2  D0 1C        	bne LeftNotHeld
000461r 2  A5 30        		lda playerXSpeed+2
000463r 2  C9 FD FF     		cmp #-(MAX_PLAYER_SPEED)
000466r 2  10 03        		bpl @AccelPlayer
000468r 2  4C rr rr     			jmp AddSpeed
00046Br 2               		@AccelPlayer:
00046Br 2  A5 2E        			lda playerXSpeed
00046Dr 2  38           			sec
00046Er 2  E9 00 40     			sbc #PLAYER_ACCEL
000471r 2  85 2E        			sta playerXSpeed
000473r 2  A5 30        			lda playerXSpeed+2
000475r 2  E9 00 00     			sbc #$0
000478r 2  85 30        			sta playerXSpeed+2
00047Ar 2  4C rr rr     			jmp AddSpeed
00047Dr 2               	LeftNotHeld:
00047Dr 2               
00047Dr 2               	Released:
00047Dr 2  A5 2E        	lda playerXSpeed
00047Fr 2  D0 07        	bne PlayerMoving
000481r 2  A5 30        	lda playerXSpeed+2
000483r 2  D0 03        	bne PlayerMoving
000485r 2  4C rr rr     	jmp PlayerStill
000488r 2               	PlayerMoving:
000488r 2  A5 30        		lda playerXSpeed+2
00048Ar 2  29 00 80     		and #$8000
00048Dr 2  F0 1B        		beq DecelRight
00048Fr 2  A5 2E        			lda playerXSpeed ;going left, add speed until 0
000491r 2  18           			clc
000492r 2  69 00 40     			adc #PLAYER_ACCEL
000495r 2  85 2E        			sta playerXSpeed
000497r 2  A5 30        			lda playerXSpeed+2
000499r 2  69 00 00     			adc #$0
00049Cr 2  85 30        			sta playerXSpeed+2
00049Er 2  29 00 80     			and #$8000
0004A1r 2  D0 04        			bne @NotBelowZero
0004A3r 2  64 2E        				stz playerXSpeed
0004A5r 2  64 30        				stz playerXSpeed+2
0004A7r 2               		@NotBelowZero:
0004A7r 2  4C rr rr     			jmp AddSpeed
0004AAr 2               		DecelRight:
0004AAr 2  A5 2E        			lda playerXSpeed
0004ACr 2  38           			sec
0004ADr 2  E9 00 40     			sbc #PLAYER_ACCEL
0004B0r 2  85 2E        			sta playerXSpeed
0004B2r 2  A5 30        			lda playerXSpeed+2
0004B4r 2  E9 00 00     			sbc #$0
0004B7r 2  85 30        			sta playerXSpeed+2
0004B9r 2  29 00 80     			and #$8000
0004BCr 2  F0 04        			beq @NotBelowZero
0004BEr 2  64 2E        				stz playerXSpeed
0004C0r 2  64 30        				stz playerXSpeed+2
0004C2r 2               			@NotBelowZero:
0004C2r 2               
0004C2r 2               	AddSpeed:
0004C2r 2  C6 39        	dec playerAnimTimer
0004C4r 2  A5 24        	lda playerX
0004C6r 2  18           	clc
0004C7r 2  65 2E        	adc playerXSpeed
0004C9r 2  85 24        	sta playerX
0004CBr 2  A5 26        	lda playerX+2
0004CDr 2  65 30        	adc playerXSpeed+2
0004CFr 2  85 26        	sta playerX+2
0004D1r 2               
0004D1r 2  A5 30        	lda playerXSpeed+2
0004D3r 2  29 00 80     	and #$8000
0004D6r 2  F0 0B        	beq CheckRightCollision
0004D8r 2  20 rr rr     		jsr HandleXCollisionL ;going left
0004DBr 2  A9 01 00     		lda #$1
0004DEr 2  85 40        		sta playerDirection
0004E0r 2  4C rr rr     		jmp EndCheckCollision
0004E3r 2               	CheckRightCollision:
0004E3r 2  20 rr rr     		jsr HandleXCollisionR
0004E6r 2  A9 02 00     		lda #$2
0004E9r 2  85 40        		sta playerDirection
0004EBr 2               	EndCheckCollision:
0004EBr 2  4C rr rr     	jmp EndModifySpeed
0004EEr 2               
0004EEr 2               	PlayerStill:
0004EEr 2  E2 20        	a8 ;if not pressing any buttons, reset tile and animation timer
0004F0r 2  A9 00        	lda #PLAYER_STILL_TILE
0004F2r 2  85 38        	sta playerTileNum
0004F4r 2  A9 06        	lda #PLAYER_TIMER_VAL
0004F6r 2  85 39        	sta playerAnimTimer
0004F8r 2  A9 00        	lda #ANIM_MODE_ADD
0004FAr 2  85 3A        	sta playerAnimMode
0004FCr 2  C2 20        	a16
0004FEr 2  64 40        	stz playerDirection
000500r 2               	EndModifySpeed:
000500r 2               
000500r 2  A5 3E        	lda movementState ;eject vertically to the next tile when walking off a slope
000502r 2  C9 03 00     	cmp #MOVE_STATE_SLOPE
000505r 2  D0 20        	bne @NotOnSlope
000507r 2  20 rr rr     		jsr CheckYCollisionD ;if on a non-slope tile and was on a slope
00050Ar 2  F0 1B        		beq @NotOnSlope
00050Cr 2  AA           		tax
00050Dr 2  BD rr rr     		lda TileAttrs, x
000510r 2  D0 15        		bne @NotOnSlope
000512r 2  A9 00 00     			lda #MOVE_STATE_NORMAL
000515r 2  85 3E        			sta movementState
000517r 2               			@EjectLoop: ;vertical eject
000517r 2  C6 2A        				dec playerY+2
000519r 2  20 rr rr     				jsr CheckYCollisionD
00051Cr 2  F0 09        				beq @NotOnSlope
00051Er 2  AA           				tax
00051Fr 2  BD rr rr     				lda TileAttrs, x
000522r 2  D0 03        				bne @NotOnSlope
000524r 2  4C rr rr     			jmp @EjectLoop
000527r 2               	@NotOnSlope:
000527r 2               
000527r 2  A5 3E        	lda movementState
000529r 2  C9 01 00     	cmp #MOVE_STATE_JUMPING
00052Cr 2  F0 21        	beq OnGround
00052Er 2  20 rr rr     		jsr CheckYCollisionD
000531r 2  F0 17        		beq StartFall
000533r 2  AA           			tax
000534r 2  BD rr rr     			lda TileAttrs, x
000537r 2  D0 03        			bne SlopeInsertLoop
000539r 2  4C rr rr     		jmp OnGround
00053Cr 2               			SlopeInsertLoop: ;if on a slope tile, insert into ground until touching a non-slope tile
00053Cr 2  E6 2A        				inc playerY+2
00053Er 2  20 rr rr     				jsr CheckYCollisionD
000541r 2  AA           				tax
000542r 2  BD rr rr     				lda TileAttrs, x
000545r 2  F0 08        				beq OnGround
000547r 2  4C rr rr     			jmp SlopeInsertLoop
00054Ar 2               		StartFall:
00054Ar 2  A9 02 00     			lda #MOVE_STATE_FALLING
00054Dr 2  85 3E        			sta movementState
00054Fr 2               	OnGround:
00054Fr 2  20 rr rr     	jsr HandleSlopeCollision
000552r 2               
000552r 2  A5 10        	lda joypad
000554r 2  89 00 80     	bit #KEY_B
000557r 2  F0 20        	beq DontStartJump
000559r 2  A5 12        	lda joypadBuf ;if holding down B from last jump, don't start jumping again
00055Br 2  89 00 80     	bit #KEY_B
00055Er 2  D0 2F        	bne NotRising
000560r 2  A5 3E        		lda movementState
000562r 2  C9 01 00     		cmp #MOVE_STATE_JUMPING
000565r 2  F0 28        		beq NotRising ;don't want player jumping in air
000567r 2  C9 02 00     		cmp #MOVE_STATE_FALLING
00056Ar 2  F0 23        		beq NotRising
00056Cr 2  A9 01 00     			lda #MOVE_STATE_JUMPING
00056Fr 2  85 3E        			sta movementState
000571r 2  A9 F8 FF     			lda #PLAYER_JUMP_SPEED
000574r 2  85 34        			sta playerYSpeed+2
000576r 2  4C rr rr     			jmp NotRising
000579r 2               			; dec playerY+2
000579r 2               	DontStartJump:
000579r 2  A5 34        	lda playerYSpeed+2
00057Br 2  29 00 80     	and #$8000
00057Er 2  F0 0F        	beq NotRising ;if player is rising and let go of jump button, add a big ass number to speed to make them
000580r 2  A5 32        		lda playerYSpeed ;fall faster
000582r 2  18           		clc
000583r 2  69 00 B0     		adc #$B000
000586r 2  85 32        		sta playerYSpeed
000588r 2  A5 34        		lda playerYSpeed+2
00058Ar 2  69 00 00     		adc #$0
00058Dr 2  85 34        		sta playerYSpeed+2
00058Fr 2               	NotRising:
00058Fr 2               
00058Fr 2               
00058Fr 2  A5 3E        	lda movementState
000591r 2  C9 01 00     	cmp #MOVE_STATE_JUMPING
000594r 2  F0 08        	beq Jumping
000596r 2  C9 02 00     	cmp #MOVE_STATE_FALLING
000599r 2  F0 03        	beq Jumping
00059Br 2  4C rr rr     	jmp NotJumping
00059Er 2               	Jumping:
00059Er 2  A5 32        		lda playerYSpeed
0005A0r 2  18           		clc
0005A1r 2  69 FF 6F     		adc #GRAVITY
0005A4r 2  85 32        		sta playerYSpeed
0005A6r 2  A5 34        		lda playerYSpeed+2
0005A8r 2  69 00 00     		adc #$0
0005ABr 2  85 34        		sta playerYSpeed+2
0005ADr 2  A5 28        		lda playerY
0005AFr 2  18           		clc
0005B0r 2  65 32        		adc playerYSpeed
0005B2r 2  85 28        		sta playerY
0005B4r 2  A5 2A        		lda playerY+2
0005B6r 2  65 34        		adc playerYSpeed+2
0005B8r 2  85 2A        		sta playerY+2
0005BAr 2               		UEjectLoop:
0005BAr 2  20 rr rr     		jsr CheckYCollisionU
0005BDr 2  F0 09        		beq NoCollisionU
0005BFr 2  64 32        			stz playerYSpeed
0005C1r 2  64 34        			stz playerYSpeed+2
0005C3r 2  E6 2A        			inc playerY+2
0005C5r 2  4C rr rr     			jmp UEjectLoop
0005C8r 2               		NoCollisionU:
0005C8r 2  A5 34        		lda playerYSpeed+2 ;if player isn't falling, don't check down collision
0005CAr 2  29 00 80     		and #$8000
0005CDr 2  D0 03        		bne NotJumping
0005CFr 2  20 rr rr     		jsr HandleYCollisionD
0005D2r 2               	NotJumping:
0005D2r 2               
0005D2r 2  A5 3E        	lda movementState
0005D4r 2  C9 01 00     	cmp #MOVE_STATE_JUMPING
0005D7r 2  D0 08        	bne NoJumpingSprite ;switch to jumping sprite when jumping
0005D9r 2  A9 0E 00     		lda #PLAYER_JUMPING_TILE
0005DCr 2  85 38        		sta playerTileNum
0005DEr 2  4C rr rr     		jmp DoneAnim
0005E1r 2               	NoJumpingSprite:
0005E1r 2               
0005E1r 2  E2 20        	a8
0005E3r 2  A5 39        	lda playerAnimTimer ;is timer zero?
0005E5r 2  D0 27        	bne DoneAnim
0005E7r 2  A9 06        		lda #PLAYER_TIMER_VAL
0005E9r 2  85 39        		sta playerAnimTimer
0005EBr 2  A5 3A        		lda playerAnimMode
0005EDr 2  D0 11        		bne AnimSubtract
0005EFr 2  A5 38        			lda playerTileNum ;add to tile nim
0005F1r 2  1A           			ina
0005F2r 2  1A           			ina
0005F3r 2  85 38        			sta playerTileNum
0005F5r 2  C9 08        			cmp #LAST_PLAYER_TILE ;if up to last tile, go to subtract mode
0005F7r 2  D0 15        			bne DoneAnim
0005F9r 2  A9 01        				lda #ANIM_MODE_SUBTRACT
0005FBr 2  85 3A        				sta playerAnimMode
0005FDr 2  4C rr rr     				jmp DoneAnim
000600r 2               		AnimSubtract: ;subtract from tile num
000600r 2  A5 38        			lda playerTileNum
000602r 2  3A           			dea
000603r 2  3A           			dea
000604r 2  85 38        			sta playerTileNum
000606r 2  C9 02        			cmp #FIRST_PLAYER_TILE
000608r 2  D0 04        			bne DoneAnim
00060Ar 2  A9 00        				lda #ANIM_MODE_ADD
00060Cr 2  85 3A        				sta playerAnimMode
00060Er 2               	DoneAnim:
00060Er 2               
00060Er 2  C2 20        	a16
000610r 2  28           	plp
000611r 2  60           	rts
000612r 2               
000612r 2               HandleXCollisionL:
000612r 2  A5 3E        	lda movementState ;no wall collision if on slope
000614r 2  C9 03 00     	cmp #MOVE_STATE_SLOPE
000617r 2  F0 14        	beq NoCollisionL
000619r 2  20 rr rr     		jsr CheckXCollisionL
00061Cr 2  F0 0F        		beq NoCollisionL
00061Er 2  AA           		tax
00061Fr 2  BD rr rr     		lda TileAttrs, x ;tile attributes table in tiles.asm
000622r 2  D0 09        		bne NoCollisionL ;non-zero: "soft" tile
000624r 2  64 2E        			stz playerXSpeed
000626r 2  64 30        			stz playerXSpeed+2
000628r 2  E6 26        			inc playerX+2
00062Ar 2  4C rr rr     			jmp HandleXCollisionL
00062Dr 2               	NoCollisionL:
00062Dr 2  60           	rts
00062Er 2               
00062Er 2               HandleXCollisionR:
00062Er 2  A5 3E        	lda movementState
000630r 2  C9 03 00     	cmp #MOVE_STATE_SLOPE
000633r 2  F0 14        	beq NoCollisionR
000635r 2  20 rr rr     		jsr CheckXCollisionR
000638r 2  F0 0F        		beq NoCollisionR
00063Ar 2  AA           		tax
00063Br 2  BD rr rr     		lda TileAttrs, x ;tile attributes table in tiles.asm
00063Er 2  D0 09        		bne NoCollisionR ;non-zero: "soft" tile
000640r 2  64 2E        			stz playerXSpeed
000642r 2  64 30        			stz playerXSpeed+2
000644r 2  C6 26        			dec playerX+2
000646r 2  4C rr rr     			jmp HandleXCollisionR
000649r 2               	NoCollisionR:
000649r 2  60           	rts
00064Ar 2               
00064Ar 2               
00064Ar 2               HandleYCollisionD:
00064Ar 2  20 rr rr     	jsr CheckYCollisionD ;0 = sprite in air
00064Dr 2  F0 2D        	beq NotInGround
00064Fr 2               
00064Fr 2               	; tax
00064Fr 2               	; lda TileAttrs, x
00064Fr 2               	; beq NormalEject
00064Fr 2               	; jmp HandleSlopeCollision
00064Fr 2               	NormalEject:
00064Fr 2  64 32        		stz playerYSpeed
000651r 2  64 34        		stz playerYSpeed+2
000653r 2  64 28        		stz playerY
000655r 2  A9 00 00     		lda #MOVE_STATE_NORMAL
000658r 2  85 3E        		sta movementState
00065Ar 2  E2 20        		a8
00065Cr 2  A9 00        		lda #PLAYER_STILL_TILE
00065Er 2  85 38        		sta playerTileNum
000660r 2  A9 06        		lda #PLAYER_TIMER_VAL
000662r 2  85 39        		sta playerAnimTimer
000664r 2  A9 00        		lda #ANIM_MODE_ADD
000666r 2  85 3A        		sta playerAnimMode
000668r 2  C2 20        		a16
00066Ar 2               		YEjectLoop:
00066Ar 2  C6 2A        			dec playerY+2
00066Cr 2  20 rr rr     			jsr CheckYCollisionD
00066Fr 2  F0 09        			beq EjectedFromGround
000671r 2  AA           			tax ;don't eject from ground if it's a slope tile
000672r 2  BD rr rr     			lda TileAttrs, x
000675r 2  D0 03        			bne EjectedFromGround
000677r 2  4C rr rr     		jmp YEjectLoop
00067Ar 2               		EjectedFromGround:
00067Ar 2  E6 2A        			inc playerY+2
00067Cr 2               	NotInGround:
00067Cr 2  60           	rts
00067Dr 2               
00067Dr 2               	;playerY = ((playerY + PLAYER_HEIGHT-1) & $FFF0) - (tileLut, (middle of sprite x & $F)) - $10
00067Dr 2               HandleSlopeCollision:
00067Dr 2  A5 3E        	lda movementState
00067Fr 2  C9 01 00     	cmp #MOVE_STATE_JUMPING
000682r 2  F0 63        	beq NotOnSlope
000684r 2  20 rr rr     	jsr CheckCollisionC
000687r 2  AA           	tax
000688r 2  BD rr rr     	lda TileAttrs, x
00068Br 2  F0 5A        	beq NotOnSlope
00068Dr 2  85 04        		sta $4 ;location of height LUT for that block
00068Fr 2  A5 00        		lda $0 ;x value of middle of sprite
000691r 2  29 0F 00     		and #$000f
000694r 2  2A           		rol ;words->bytes
000695r 2  A8           		tay
000696r 2  B1 04        		lda ($4), y
000698r 2  85 00        		sta $0 ;value to bump up y position by
00069Ar 2  A5 02        		lda $2 ;tile where sprite's feet are
00069Cr 2  29 F0 FF     		and #$fff0
00069Fr 2  38           		sec
0006A0r 2  E5 00        		sbc $0
0006A2r 2  38           		sec
0006A3r 2  E9 10 00     		sbc #$10
0006A6r 2  85 2A        		sta playerY+2
0006A8r 2  A9 03 00     		lda #MOVE_STATE_SLOPE
0006ABr 2  85 3E        		sta movementState
0006ADr 2               
0006ADr 2  BD rr rr     		lda AddSubTable, x
0006B0r 2  D0 19        		bne @SubtractMomentum
0006B2r 2  A5 2E        			lda playerXSpeed
0006B4r 2  18           			clc
0006B5r 2  7D rr rr     			adc MomentumTable, x
0006B8r 2  85 2E        			sta playerXSpeed
0006BAr 2  A5 30        			lda playerXSpeed+2
0006BCr 2  69 00 00     			adc #$0
0006BFr 2  C9 04 00     			cmp #MAX_SLOPE_SPEED
0006C2r 2  D0 02        			bne @DontCapAddSpeed
0006C4r 2  64 2E        				stz playerXSpeed
0006C6r 2               			@DontCapAddSpeed:
0006C6r 2  85 30        			sta playerXSpeed+2
0006C8r 2  4C rr rr     			jmp NotOnSlope
0006CBr 2               		@SubtractMomentum:
0006CBr 2  A5 2E        			lda playerXSpeed
0006CDr 2  38           			sec
0006CEr 2  FD rr rr     			sbc MomentumTable, x
0006D1r 2  85 2E        			sta playerXSpeed
0006D3r 2  A5 30        			lda playerXSpeed+2
0006D5r 2  E9 00 00     			sbc #$0
0006D8r 2  C9 FB FF     			cmp #-(MAX_SLOPE_SPEED+1)
0006DBr 2  D0 08        			bne @DontCapSubSpeed
0006DDr 2  A9 FF FF     				lda #$ffff
0006E0r 2  85 2E        				sta playerXSpeed
0006E2r 2  A9 FB FF     				lda #-(MAX_SLOPE_SPEED+1)
0006E5r 2               			@DontCapSubSpeed:
0006E5r 2  85 30        			sta playerXSpeed+2
0006E7r 2               	NotOnSlope:
0006E7r 2  60           	rts
0006E8r 2               
0006E8r 2               CheckXCollisionL: ;for when player is moving left
0006E8r 2  A5 26        	lda playerX+2
0006EAr 2  85 00        	sta $0
0006ECr 2  A5 2A        	lda playerY+2
0006EEr 2  18           	clc
0006EFr 2  69 1F 00     	adc #PLAYER_HEIGHT-1
0006F2r 2  85 02        	sta $2
0006F4r 2  4C rr rr     	jmp CheckPlayerCollision
0006F7r 2               
0006F7r 2               CheckXCollisionR: ;when player is moving right
0006F7r 2  A5 26        	lda playerX+2
0006F9r 2  18           	clc
0006FAr 2  69 10 00     	adc #PLAYER_WIDTH
0006FDr 2  85 00        	sta $0
0006FFr 2  A5 2A        	lda playerY+2
000701r 2  18           	clc
000702r 2  69 1F 00     	adc #PLAYER_HEIGHT-1
000705r 2  85 02        	sta $2
000707r 2  4C rr rr     	jmp CheckPlayerCollision
00070Ar 2               
00070Ar 2               ;center collision -> left collision -> right collision
00070Ar 2               CheckYCollisionD:
00070Ar 2  A5 26        	lda playerX+2 ;1. check for bottom-center collision
00070Cr 2  18           	clc
00070Dr 2  69 08 00     	adc #PLAYER_WIDTH/2
000710r 2  85 00        	sta $0
000712r 2  A5 2A        	lda playerY+2
000714r 2  18           	clc
000715r 2  69 21 00     	adc #PLAYER_HEIGHT+1
000718r 2  85 02        	sta $2
00071Ar 2  20 rr rr     	jsr CheckPlayerCollision
00071Dr 2  D0 14        	bne @EndCheck ;if center hard collision, exit routine
00071Fr 2               
00071Fr 2  A5 26        	lda playerX+2 ;2. check for bottom-left collision
000721r 2  85 00        	sta $0
000723r 2  20 rr rr     	jsr CheckPlayerCollision
000726r 2  D0 0B        	bne @EndCheck
000728r 2               
000728r 2  A5 26        	lda playerX+2 ;3. check for bottom-right collision
00072Ar 2  18           	clc
00072Br 2  69 10 00     	adc #PLAYER_WIDTH
00072Er 2  85 00        	sta $0
000730r 2  20 rr rr     	jsr CheckPlayerCollision
000733r 2               	@EndCheck:
000733r 2  60           	rts
000734r 2               
000734r 2               CheckYCollisionU: ;when player is moving up
000734r 2  A5 26        	lda playerX+2 ;1. check for bottom-center collision
000736r 2  18           	clc
000737r 2  69 08 00     	adc #PLAYER_WIDTH/2
00073Ar 2  85 00        	sta $0
00073Cr 2  A5 2A        	lda playerY+2
00073Er 2  18           	clc
00073Fr 2  69 0B 00     	adc #PLAYER_TOP+2
000742r 2  85 02        	sta $2
000744r 2  20 rr rr     	jsr CheckPlayerCollision
000747r 2  D0 14        	bne @EndCheck ;if center collision, exit routine
000749r 2               
000749r 2  A5 26        	lda playerX+2 ;2. check for bottom-left collision
00074Br 2  85 00        	sta $0
00074Dr 2  20 rr rr     	jsr CheckPlayerCollision
000750r 2  D0 0B        	bne @EndCheck
000752r 2               
000752r 2  A5 26        	lda playerX+2 ;3. check for bottom-right collision
000754r 2  18           	clc
000755r 2  69 10 00     	adc #PLAYER_WIDTH
000758r 2  85 00        	sta $0
00075Ar 2  20 rr rr     	jsr CheckPlayerCollision
00075Dr 2               	@EndCheck:
00075Dr 2  60           	rts
00075Er 2               
00075Er 2               CheckCollisionC: ;look at the center of the bottom of the player
00075Er 2  A5 26        	lda playerX+2
000760r 2  18           	clc
000761r 2  69 08 00     	adc #(PLAYER_WIDTH/2)
000764r 2  85 00        	sta $0
000766r 2  A5 2A        	lda playerY+2
000768r 2  18           	clc
000769r 2  69 1F 00     	adc #PLAYER_HEIGHT-1
00076Cr 2  85 02        	sta $2
00076Er 2               
00076Er 2               CheckPlayerCollision:
00076Er 2  A5 00        	lda $0 ;divide by 16
000770r 2  29 FF 01     	and #$1ff
000773r 2  4A           	lsr
000774r 2  4A           	lsr
000775r 2  4A           	lsr
000776r 2  4A           	lsr
000777r 2  85 36        	sta playerBGTile
000779r 2  A5 02        	lda $2 ;dividing y tile by 16 and then multiplying by 32 since tilemap's 32x32
00077Br 2  18           	clc
00077Cr 2  65 16        	adc scrollY
00077Er 2  29 F0 FF     	and #$fff0	  ;is the same as removing last nibble and shifting left once
000781r 2  2A           	rol
000782r 2  18           	clc
000783r 2  65 36        	adc playerBGTile
000785r 2  2A           	rol ;words->bytes
000786r 2  AA           	tax
000787r 2  BD 00 07     	lda TilemapMirror, x
00078Ar 2  29 FF 03     	and #$3ff ;just get the 9 bit tile number
00078Dr 2  85 36        	sta playerBGTile
00078Fr 2  60           	rts
000790r 2               
000790r 2               
000790r 1               .include "scroll.asm"
000790r 2               .segment "CODE"
000790r 2               ;2 way scrolling code (eventually)
000790r 2               
000790r 2               sourceAddr = $0
000790r 2               destAddr = $2
000790r 2               columnNum = $4
000790r 2               
000790r 2               InitScroll:
000790r 2  A9 rr rr     	lda #BGTilemap ;address of first offscreen column
000793r 2  85 1C        	sta scrollScreenAddr
000795r 2  A9 FF FF     	lda #$ffff
000798r 2  85 22        	sta scrollLock ;
00079Ar 2  60           	rts
00079Br 2               
00079Br 2               HandleScroll:
00079Br 2  08           	php
00079Cr 2  C2 20        	a16
00079Er 2  A5 26        	lda playerX+2
0007A0r 2  C9 80 00     	cmp #$80 ; if playerX < $80
0007A3r 2  F0 02        	beq LockL
0007A5r 2  B0 06        	bcs NoLockL
0007A7r 2               	LockL:
0007A7r 2  85 2C        		sta playerSpriteX ;spriteX = playerX
0007A9r 2  64 14        		stz scrollX ;scrollX = 0
0007ABr 2  80 2E        		bra EndSetScroll
0007ADr 2               	NoLockL:
0007ADr 2  A5 22        	lda scrollLock
0007AFr 2  F0 1D        	beq NoLockR
0007B1r 2  A5 26        	lda playerX+2
0007B3r 2  29 FF 03     	and #$3ff ;keep within screen bounds
0007B6r 2  C5 22        	cmp scrollLock ; else if (playerX & $3ff) >= scrollLock
0007B8r 2  90 14        	bcc NoLockR
0007BAr 2  38           		sec ;spriteX = $80 + ((playerX & $3ff) - scrollLock)
0007BBr 2  E5 22        		sbc scrollLock
0007BDr 2  18           		clc
0007BEr 2  69 80 00     		adc #$80
0007C1r 2  85 2C        		sta playerSpriteX
0007C3r 2               
0007C3r 2  A5 22        		lda scrollLock ;scrollX = maxScroll - $80
0007C5r 2  38           		sec
0007C6r 2  E9 80 00     		sbc #$80
0007C9r 2  85 14        		sta scrollX
0007CBr 2  4C rr rr     		jmp EndHandleScroll
0007CEr 2               	NoLockR:
0007CEr 2  A5 26        	lda playerX+2 ;else, keep sprite centered, do scrolling normally
0007D0r 2  38           	sec
0007D1r 2  E9 80 00     	sbc #$80
0007D4r 2  85 14        	sta scrollX
0007D6r 2  A9 80 00     	lda #$80
0007D9r 2  85 2C        	sta playerSpriteX
0007DBr 2               	EndSetScroll:
0007DBr 2               
0007DBr 2  A5 40        	lda playerDirection ;0 = still, 1 = left, 2 = right
0007DDr 2  F0 73        	beq EndHandleScroll ;if player's not moving, don't have to worry about scroll
0007DFr 2  C9 02 00     	cmp #$2
0007E2r 2  F0 1E        	beq MovingRight
0007E4r 2               	;if going left and scroll & 1f goes up, that means you wrapped (so should change screen addy)
0007E4r 2               	;same if going right and scroll & 1f goes down
0007E4r 2               	MovingLeft:
0007E4r 2  A5 14        	lda scrollX
0007E6r 2  4A           	lsr
0007E7r 2  4A           	lsr
0007E8r 2  4A           	lsr
0007E9r 2  4A           	lsr ;leftmost onscreen column
0007EAr 2  3A           	dec a ;first offscreen column to the left
0007EBr 2  29 1F 00     	and #$1f
0007EEr 2  C5 1A        	cmp scrollColumn
0007F0r 2  F0 60        	beq EndHandleScroll ; if it's the same, don't have to do anything
0007F2r 2  85 1A        	sta scrollColumn
0007F4r 2  90 2B        	bcc DoneMovementTests ;if it's less, normal screen movement
0007F6r 2  A5 1C        		lda scrollScreenAddr
0007F8r 2  38           		sec
0007F9r 2  E9 80 03     		sbc #$380 ;32 columns, 14 rows, 1 word per tile
0007FCr 2  85 1C        		sta scrollScreenAddr
0007FEr 2  C6 1E        		dec scrollScreenNum
000800r 2  80 1F        		bra DoneMovementTests
000802r 2               
000802r 2               	MovingRight:
000802r 2  A5 14        	lda scrollX
000804r 2  4A           	lsr
000805r 2  4A           	lsr
000806r 2  4A           	lsr
000807r 2  4A           	lsr ;leftmost tile column on screen
000808r 2  18           	clc
000809r 2  69 11 00     	adc #$11 ;first offscreen tile
00080Cr 2  29 1F 00     	and #$1f
00080Fr 2  C5 1A        	cmp scrollColumn ;beyond a new scroll boundary?
000811r 2  F0 3F        	beq EndHandleScroll ;same? don't do anything
000813r 2  85 1A        	sta scrollColumn
000815r 2  B0 0A        	bcs DoneMovementTests ;greater? tile pos didn't wrap
000817r 2  A5 1C        		lda scrollScreenAddr ;otherwise, you've reached a new screen
000819r 2  18           		clc
00081Ar 2  69 80 03     		adc #$380 ;32 columns, 14 rows, 1 word per tile
00081Dr 2  85 1C        		sta scrollScreenAddr
00081Fr 2  E6 1E        		inc scrollScreenNum
000821r 2               	NotOnScreenBoundary:
000821r 2               
000821r 2               	DoneMovementTests:
000821r 2  A5 1A        		lda scrollColumn
000823r 2  0A           		asl ;words->bytes
000824r 2  48           		pha ;>
000825r 2  18           		clc
000826r 2  65 1C        		adc scrollScreenAddr
000828r 2  85 00        		sta sourceAddr
00082Ar 2  68           		pla ;<
00082Br 2  18           		clc
00082Cr 2  69 00 07     		adc #TilemapMirror
00082Fr 2  85 20        		sta scrollMirrorPtr
000831r 2  A2 0E 00     		ldx #$e ;number of tiles to copy
000834r 2  A0 00 00     		ldy #$0
000837r 2  F4 02 00     		pea $0002 ;bank with map data: $2 return bank: $0
00083Ar 2               							;doesn't use immediate syntax for some reason
00083Ar 2  AB           		plb ;load $2 from stack
00083Br 2               		@CopyLoop:
00083Br 2  B1 00        			lda (sourceAddr), y
00083Dr 2  91 20        			sta (scrollMirrorPtr), y
00083Fr 2  98           			tya
000840r 2  18           			clc
000841r 2  69 40 00     			adc #$40
000844r 2  A8           			tay
000845r 2  CA           			dex
000846r 2  D0 F3        			bne @CopyLoop
000848r 2  A5 1E        		lda scrollScreenNum
00084Ar 2  0A           		asl
00084Br 2  A8           		tay
00084Cr 2  B9 rr rr     		lda BGScrollBounds, y
00084Fr 2  85 22        		sta scrollLock
000851r 2  AB           		plb ;load $0 from stack
000852r 2               	EndHandleScroll:
000852r 2  28           	plp
000853r 2  60           	rts
000854r 2               
000854r 2               VramScrollCopy: ;run during vblank if there's new tile data to copy
000854r 2  E2 20        	a8
000856r 2  A9 01        	lda #$1 ;increment vram access by 64 bytes
000858r 2  8D 15 21     	sta PPUCTRL
00085Br 2  C2 20        	a16
00085Dr 2               	; lda scrollColumn
00085Dr 2               	; asl
00085Dr 2               	; clc
00085Dr 2               	; adc #TilemapMirror ;copy from tilemap mirror to real tilemap
00085Dr 2               	; sta sourceAddr
00085Dr 2               
00085Dr 2  A5 1A        	lda scrollColumn
00085Fr 2  8D 16 21     	sta PPUADDR ;set up where to write to in VRAM
000862r 2  A2 0E 00     	ldx #$e ;number of tiles to copy
000865r 2  A0 00 00     	ldy #$0
000868r 2               	@CopyLoop:
000868r 2  B1 20        		lda (scrollMirrorPtr), y
00086Ar 2  8D 18 21     		sta PPUDATA
00086Dr 2  98           		tya
00086Er 2  18           		clc
00086Fr 2  69 40 00     		adc #$40
000872r 2  A8           		tay
000873r 2  CA           		dex
000874r 2  D0 F2        		bne @CopyLoop
000876r 2  64 20        	stz scrollMirrorPtr ;how I mark that the tile column has been copied already
000878r 2  E2 20        	a8
00087Ar 2  60           	rts
00087Br 2               
00087Br 2               
00087Br 1               .include "art.asm"
00087Br 2               .segment "BANK2"
000000r 2               FontPalette:
000000r 2  00 00 FF 7F  	.INCBIN ".\art\font.clr"
000004r 2  00 00 00 00  
000008r 2               FontTiles:
000008r 2  00 00 00 00  	.INCBIN ".\art\font.pic"
00000Cr 2  00 00 00 00  
000010r 2  00 00 00 00  
000608r 2               
000608r 2               PlayerPalette:
000608r 2  00 00 C0 00  	.INCBIN ".\art\player.clr"
00060Cr 2  26 1B 0C 00  
000610r 2  9F 1A FF 7F  
000628r 2               PlayerTiles:
000628r 2  00 00 00 00  	.INCBIN ".\art\player.pic"
00062Cr 2  00 00 00 00  
000630r 2  00 00 00 00  
001628r 2               
001628r 2               BGPalette:
001628r 2  00 00 FF 7F  	.INCBIN ".\art\bgtiles.clr"
00162Cr 2  05 4D 93 7B  
001630r 2  A1 71 3F 16  
001648r 2               BGTiles:
001648r 2  00 00 00 00  	.incbin ".\art\bgtiles.pic"
00164Cr 2  00 00 00 00  
001650r 2  00 00 00 00  
001A48r 2               
001A48r 2               BG2Palette:
001A48r 2  00 00 01 6D  	.INCBIN ".\art\bg2tiles.clr"
001A4Cr 2  87 6E A3 48  
001A50r 2  A1 71 C5 0D  
001A68r 2               BG2Tiles:
001A68r 2  00 00 00 00  	.incbin ".\art\bg2tiles.pic"
001A6Cr 2  00 00 00 00  
001A70r 2  00 00 00 00  
001C68r 2               
001C68r 2               BGScrollBounds: ;player x position within screen when screen locks
001C68r 2  00 00        	.word $0	;0 = no bounds
001C6Ar 2  70 03        	.word $370
001C6Cr 2               
001C6Cr 2               BGTilemap: ;14 columns tall ($380 bytes) because SNES screen is 14 tiles tall (14*16=224)
001C6Cr 2  02 00 00 00  	.word $2,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001C70r 2  00 00 00 00  
001C74r 2  00 00 00 00  
001CACr 2  02 00 00 00  	.word $2,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001CB0r 2  00 00 00 00  
001CB4r 2  00 00 00 00  
001CECr 2  02 00 00 00  	.word $2,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001CF0r 2  00 00 00 00  
001CF4r 2  00 00 00 00  
001D2Cr 2  02 00 00 00  	.word $2,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001D30r 2  00 00 00 00  
001D34r 2  00 00 00 00  
001D6Cr 2  02 00 00 00  	.word $2,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001D70r 2  00 00 00 00  
001D74r 2  00 00 00 00  
001DACr 2  02 00 00 00  	.word $2,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$2,$2,$0,$0,$2,$0,$0,$2,$0,$0,$2,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001DB0r 2  00 00 00 00  
001DB4r 2  00 00 00 00  
001DECr 2  02 00 00 00  	.word $2,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001DF0r 2  00 00 00 00  
001DF4r 2  00 00 00 00  
001E2Cr 2  02 00 00 00  	.word $2,$0,$0,$0,$0,$0,$0,$0,$2,$2,$2,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001E30r 2  00 00 00 00  
001E34r 2  00 00 00 00  
001E6Cr 2  02 00 00 00  	.word $2,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001E70r 2  00 00 00 00  
001E74r 2  00 00 00 00  
001EACr 2  02 00 00 00  	.word $2,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001EB0r 2  00 00 00 00  
001EB4r 2  00 00 00 00  
001EECr 2  02 00 00 00  	.word $2,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001EF0r 2  00 00 00 00  
001EF4r 2  00 00 00 00  
001F2Cr 2  02 00 00 00  	.word $2,$0,$0,$0,$0,$0,$4,$2,$6,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001F30r 2  00 00 00 00  
001F34r 2  00 00 00 00  
001F6Cr 2  02 00 00 00  	.word $2,$0,$0,$0,$8,$a,$2,$2,$2,$6,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001F70r 2  00 00 00 00  
001F74r 2  08 00 0A 00  
001FACr 2  02 00 02 00  	.word $2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2
001FB0r 2  02 00 02 00  
001FB4r 2  02 00 02 00  
001FECr 2               
001FECr 2               BGTilemapPt2: ;part that gets scrolled in
001FECr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$2
001FF0r 2  00 00 00 00  
001FF4r 2  00 00 00 00  
00202Cr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$2
002030r 2  00 00 00 00  
002034r 2  00 00 00 00  
00206Cr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$2
002070r 2  00 00 00 00  
002074r 2  00 00 00 00  
0020ACr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$2
0020B0r 2  00 00 00 00  
0020B4r 2  00 00 00 00  
0020ECr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$2
0020F0r 2  00 00 00 00  
0020F4r 2  00 00 00 00  
00212Cr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$2
002130r 2  00 00 00 00  
002134r 2  00 00 00 00  
00216Cr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$2
002170r 2  00 00 00 00  
002174r 2  00 00 00 00  
0021ACr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$2
0021B0r 2  00 00 00 00  
0021B4r 2  00 00 00 00  
0021ECr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$2
0021F0r 2  00 00 00 00  
0021F4r 2  00 00 00 00  
00222Cr 2  00 00 00 00  	.word $0,$0,$0,$0,$4,$2,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$2
002230r 2  00 00 00 00  
002234r 2  04 00 02 00  
00226Cr 2  00 00 00 00  	.word $0,$0,$0,$4,$2,$2,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$2
002270r 2  00 00 04 00  
002274r 2  02 00 02 00  
0022ACr 2  00 00 00 00  	.word $0,$0,$4,$2,$2,$2,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$2,$2
0022B0r 2  04 00 02 00  
0022B4r 2  02 00 02 00  
0022ECr 2  00 00 04 00  	.word $0,$4,$2,$2,$2,$2,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$2
0022F0r 2  02 00 02 00  
0022F4r 2  02 00 02 00  
00232Cr 2  02 00 02 00  	.word $2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2
002330r 2  02 00 02 00  
002334r 2  02 00 02 00  
00236Cr 2               
00236Cr 2               BG2Tilemap:
00236Cr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002370r 2  00 00 00 00  
002374r 2  00 00 00 00  
0023ACr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0023B0r 2  00 00 00 00  
0023B4r 2  00 00 00 00  
0023ECr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0023F0r 2  00 00 00 00  
0023F4r 2  00 00 00 00  
00242Cr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002430r 2  00 00 00 00  
002434r 2  00 00 00 00  
00246Cr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002470r 2  00 00 00 00  
002474r 2  00 00 00 00  
0024ACr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0024B0r 2  00 00 00 00  
0024B4r 2  00 00 00 00  
0024ECr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0024F0r 2  00 00 00 00  
0024F4r 2  00 00 00 00  
00252Cr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002530r 2  00 00 00 00  
002534r 2  00 00 00 00  
00256Cr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002570r 2  00 00 00 00  
002574r 2  00 00 00 00  
0025ACr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0025B0r 2  00 00 00 00  
0025B4r 2  00 00 00 00  
0025ECr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0025F0r 2  00 00 00 00  
0025F4r 2  00 00 00 00  
00262Cr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002630r 2  00 00 00 00  
002634r 2  00 00 00 00  
00266Cr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002670r 2  00 00 00 00  
002674r 2  00 00 00 00  
0026ACr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0026B0r 2  00 00 00 00  
0026B4r 2  00 00 00 00  
0026ECr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0026F0r 2  00 00 00 00  
0026F4r 2  00 00 00 00  
00272Cr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002730r 2  00 00 00 00  
002734r 2  00 00 00 00  
00276Cr 2  01 00 02 00  	.word $1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4
002770r 2  03 00 04 00  
002774r 2  01 00 02 00  
0027ACr 2  05 00 06 00  	.word $5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8
0027B0r 2  07 00 08 00  
0027B4r 2  05 00 06 00  
0027ECr 2  01 00 02 00  	.word $1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4
0027F0r 2  03 00 04 00  
0027F4r 2  01 00 02 00  
00282Cr 2  05 00 06 00  	.word $5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8
002830r 2  07 00 08 00  
002834r 2  05 00 06 00  
00286Cr 2  01 00 02 00  	.word $1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4
002870r 2  03 00 04 00  
002874r 2  01 00 02 00  
0028ACr 2  05 00 06 00  	.word $5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8
0028B0r 2  07 00 08 00  
0028B4r 2  05 00 06 00  
0028ECr 2  01 00 02 00  	.word $1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4
0028F0r 2  03 00 04 00  
0028F4r 2  01 00 02 00  
00292Cr 2  05 00 06 00  	.word $5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8
002930r 2  07 00 08 00  
002934r 2  05 00 06 00  
00296Cr 2  01 00 02 00  	.word $1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4
002970r 2  03 00 04 00  
002974r 2  01 00 02 00  
0029ACr 2  05 00 06 00  	.word $5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8
0029B0r 2  07 00 08 00  
0029B4r 2  05 00 06 00  
0029ECr 2  01 00 02 00  	.word $1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4
0029F0r 2  03 00 04 00  
0029F4r 2  01 00 02 00  
002A2Cr 2  05 00 06 00  	.word $5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8
002A30r 2  07 00 08 00  
002A34r 2  05 00 06 00  
002A6Cr 2  01 00 02 00  	.word $1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4
002A70r 2  03 00 04 00  
002A74r 2  01 00 02 00  
002AACr 2  05 00 06 00  	.word $5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8
002AB0r 2  07 00 08 00  
002AB4r 2  05 00 06 00  
002AECr 2  01 00 02 00  	.word $1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4
002AF0r 2  03 00 04 00  
002AF4r 2  01 00 02 00  
002B2Cr 2  05 00 06 00  	.word $5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8
002B30r 2  07 00 08 00  
002B34r 2  05 00 06 00  
002B6Cr 2               
002B6Cr 2               
002B6Cr 1               .include "sound.asm"
002B6Cr 2               .segment "BANK1"
000000r 2               
000000r 2               SPCPrg:
000000r 2  20 CD EF BD  	.incbin ".\sound\sound.bin"
000004r 2  E8 2C C4 F2  
000008r 2  E8 00 C4 F3  
003ACAr 2               SPCPrgEnd:
003ACAr 2               
003ACAr 2               SPC_LENGTH = SPCPrgEnd-SPCPrg
003ACAr 2               NUM_SPC_BLOCKS = (SPC_LENGTH / 256) + 1
003ACAr 2               copyAddr = $0 ;address to copy to (word)
003ACAr 2               copyIndex = $2 ;index within one block (byte)
003ACAr 2               blockIndex = $3 ;what block's being copied (byte)
003ACAr 2               kick = $4 ;current "kick" val
003ACAr 2               
003ACAr 2               LoadSPC:
003ACAr 2  08           	php
003ACBr 2  C2 20        	a16
003ACDr 2  A9 3B 00     	lda #NUM_SPC_BLOCKS
003AD0r 2  A9 00 02     	lda #$200
003AD3r 2  85 00        	sta copyAddr ;set up copy address
003AD5r 2  64 03        	stz blockIndex
003AD7r 2  E2 20        	a8
003AD9r 2  A9 CC        	lda #$cc ;starting kick val
003ADBr 2  85 04        	sta kick
003ADDr 2               
003ADDr 2               WaitForInit:
003ADDr 2  AD 40 21     	lda $2140
003AE0r 2  C9 AA        	cmp #$aa ;spc sets reg 0 to aa after it inits
003AE2r 2  D0 F9        	bne WaitForInit
003AE4r 2               
003AE4r 2               CopyLoop:
003AE4r 2  C2 20        	a16
003AE6r 2  A5 00        	lda copyAddr
003AE8r 2  8D 42 21     	sta $2142 ;write destination address
003AEBr 2  18           	clc
003AECr 2  69 00 01     	adc #$100
003AEFr 2  85 00        	sta copyAddr
003AF1r 2  E2 20        	a8
003AF3r 2               
003AF3r 2  A9 01        	lda #$1
003AF5r 2  8D 41 21     	sta $2141 ;write command
003AF8r 2  A5 04        	lda kick
003AFAr 2  8D 40 21     	sta $2140 ;"enable"
003AFDr 2               WaitForAck: ;spc returns kick when it's ready to write
003AFDr 2  AD 40 21     	lda $2140
003B00r 2  C5 04        	cmp kick
003B02r 2  D0 F9        	bne WaitForAck
003B04r 2               
003B04r 2               CopyBlock: ;copies blocks of 256 bytes
003B04r 2  C2 20        	a16
003B06r 2  A5 02        	lda copyIndex ;because blockIndex is next to copyIndex in memory hopefully
003B08r 2  AA           	tax	;this will get the address (look at me, so smart for making blocks 256 bytes)
003B09r 2  E2 20        	a8
003B0Br 2  BF rr rr rr  	lda f:SPCPrg,x ;specify bank
003B0Fr 2  8D 41 21     	sta $2141
003B12r 2  A5 02        	lda copyIndex
003B14r 2  8D 40 21     	sta $2140
003B17r 2               
003B17r 2               WaitReceive:
003B17r 2  CD 40 21     	cmp $2140 ;spc mirrors count after receiving data
003B1Ar 2  D0 FB        	bne WaitReceive
003B1Cr 2  1A           	inc a
003B1Dr 2  85 02        	sta copyIndex
003B1Fr 2  C9 00        	cmp #$00 ;256 bytes in a block
003B21r 2  D0 E1        	bne CopyBlock
003B23r 2               
003B23r 2  E6 03        	inc blockIndex
003B25r 2  A5 04        	lda kick
003B27r 2  18           	clc
003B28r 2  69 02        	adc #$2
003B2Ar 2  29 7F        	and #$7f ;kick=previous kick "+2 to 127" -ninty
003B2Cr 2  85 04        	sta kick
003B2Er 2  A5 03        	lda blockIndex
003B30r 2  C9 3B        	cmp #NUM_SPC_BLOCKS
003B32r 2  D0 B0        	bne CopyLoop
003B34r 2               
003B34r 2  C2 20        	a16
003B36r 2  A9 00 02     	lda #$200 ;entry point
003B39r 2  8D 42 21     	sta $2142
003B3Cr 2  E2 20        	a8
003B3Er 2  9C 41 21     	stz $2141 ;start command
003B41r 2  A5 04        	lda kick
003B43r 2  8D 40 21     	sta $2140
003B46r 2  A2 06 00     	ldx #$6
003B49r 2               @ClrLoop:
003B49r 2  74 00        	stz $0,x
003B4Br 2  CA           	dex
003B4Cr 2  D0 FB        	bne @ClrLoop
003B4Er 2  28           	plp
003B4Fr 2  6B           	rtl
003B50r 2               
003B50r 1               
003B50r 1               .segment "CODE"
00087Br 1               
00087Br 1               Reset:
00087Br 1  78 18 FB C2  	InitSNES
00087Fr 1  38 A2 FF 1F  
000883r 1  9A 22 rr rr  
00088Ar 1  22 rr rr rr  	jsl LoadSPC
00088Er 1  A9 00 8D 21  	LoadPalette BGPalette, $0, $10
000892r 1  21 A9 rr A2  
000896r 1  rr rr A0 20  
00089Er 1  A9 10 8D 21  	LoadPalette BG2Palette, $10, $10
0008A2r 1  21 A9 rr A2  
0008A6r 1  rr rr A0 20  
0008AEr 1  A9 20 8D 21  	LoadPalette FontPalette, $20, $4
0008B2r 1  21 A9 rr A2  
0008B6r 1  rr rr A0 08  
0008BEr 1  A9 80 8D 21      LoadPalette PlayerPalette, $80, $10
0008C2r 1  21 A9 rr A2  
0008C6r 1  rr rr A0 20  
0008CEr 1               	; Load Tile data to VRAM
0008CEr 1  A9 80 8D 15  	LoadBlockToVRAM BGTilemap, $0, $400
0008D2r 1  21 A2 00 00  
0008D6r 1  8E 16 21 A9  
0008E4r 1  A2 rr rr 8E  	LoadBlockToWRAM BGTilemap, TilemapMirror, $380
0008E8r 1  02 43 A9 rr  
0008ECr 1  8D 04 43 A2  
00090Br 1  A9 80 8D 15      LoadBlockToVRAM BGTiles, $1000, $400
00090Fr 1  21 A2 00 10  
000913r 1  8E 16 21 A9  
000921r 1               
000921r 1  A9 80 8D 15  	LoadBlockToVRAM BG2Tilemap, $2000, $800
000925r 1  21 A2 00 20  
000929r 1  8E 16 21 A9  
000937r 1  A9 80 8D 15  	LoadBlockToVRAM BG2Tiles, $3000, $200 ;8 tiles, 4bpp
00093Br 1  21 A2 00 30  
00093Fr 1  8E 16 21 A9  
00094Dr 1               
00094Dr 1  A9 80 8D 15  	LoadBlockToVRAM FontTiles, $4000, $600
000951r 1  21 A2 00 40  
000955r 1  8E 16 21 A9  
000963r 1  A9 80 8D 15  	LoadBlockToVRAM PlayerTiles, $6000, $1000
000967r 1  21 A2 00 60  
00096Br 1  8E 16 21 A9  
000979r 1                   ; Setup Video modes and other stuff, then turn on the screen
000979r 1  20 rr rr         jsr SetupVideo
00097Cr 1               
00097Cr 1  20 rr rr     	jsr InitSprites
00097Fr 1               
00097Fr 1  C2 20        	a16
000981r 1  A9 rr rr 85  	DrawText TextL0, #$0, #$1
000985r 1  00 A9 00 00  
000989r 1  85 02 A9 01  
000991r 1  A9 rr rr 85  	DrawText TextL1, #$0, #$2
000995r 1  00 A9 00 00  
000999r 1  85 02 A9 02  
0009A1r 1  A9 rr rr 85  	DrawText TextL2, #$0, #$3
0009A5r 1  00 A9 00 00  
0009A9r 1  85 02 A9 03  
0009B1r 1  A9 rr rr 85  	DrawText TextL3, #$0, #$4
0009B5r 1  00 A9 00 00  
0009B9r 1  85 02 A9 04  
0009C1r 1  A9 rr rr 85  	DrawText TextL4, #$0, #$5
0009C5r 1  00 A9 00 00  
0009C9r 1  85 02 A9 05  
0009D1r 1  A9 rr rr 85  	DrawText TextL5, #$0, #$6
0009D5r 1  00 A9 00 00  
0009D9r 1  85 02 A9 06  
0009E1r 1  E2 20        	a8
0009E3r 1               
0009E3r 1               	WaitStartFrame:
0009E3r 1  AD 37 21     	lda $2137 ;latches h/v counter
0009E6r 1  AD 3D 21     	lda $213d
0009E9r 1  D0 F8        	bne WaitStartFrame ;if not at the start of a frame, don't continue
0009EBr 1               
0009EBr 1  AD 10 42     	lda $4210
0009EEr 1  A9 81        	lda #VBLANK_NMI | AUTOREAD
0009F0r 1  8D 00 42     	sta PPUNMI ;enable vblank interrupt and joypad read
0009F3r 1  AD 10 42     	lda $4210
0009F6r 1               
0009F6r 1  C2 20        	a16
0009F8r 1  64 14        	stz scrollX
0009FAr 1  64 16        	stz scrollY
0009FCr 1               
0009FCr 1  20 rr rr     	jsr InitPlayer
0009FFr 1  20 rr rr     	jsr InitScroll
000A02r 1               
000A02r 1               MainLoop:
000A02r 1  E2 20        	a8
000A04r 1  A9 01        	lda #$1
000A06r 1  85 19        	sta frameStatus ;how we check if the program's done executing
000A08r 1  C2 20        	a16
000A0Ar 1  AD 18 42     	lda JOY1CUR ;p1 joypad read address
000A0Dr 1  85 10        	sta joypad
000A0Fr 1  20 rr rr     	jsr HandlePlayerMovement
000A12r 1  20 rr rr     	jsr HandleScroll
000A15r 1               
000A15r 1  C2 20        	a16
000A17r 1  E2 20 A9 00  	LoadSprite #$0, playerTileNum, playerSpriteX, playerY+2, playerAttrs
000A1Br 1  85 00 C2 20  
000A1Fr 1  A5 2C 85 01  
000A36r 1  A5 2A        	lda playerY+2
000A38r 1  18           	clc
000A39r 1  69 10 00     	adc #$10
000A3Cr 1  85 0A        	sta $a
000A3Er 1  A5 38        	lda playerTileNum
000A40r 1  18           	clc
000A41r 1  69 20 00     	adc #$20
000A44r 1  85 0C        	sta $c
000A46r 1  E2 20 A9 01  	LoadSprite #$1, $c, playerSpriteX, $a, playerAttrs
000A4Ar 1  85 00 C2 20  
000A4Er 1  A5 2C 85 01  
000A65r 1               
000A65r 1               ; SetupScrollTable:
000A65r 1               	; clc
000A65r 1               	; lda scroll2X
000A65r 1               	; clc
000A65r 1               	; adc #$5
000A65r 1               	; sta scroll2X
000A65r 1               	; ror
000A65r 1               	; sta BG2ScrollTable
000A65r 1               	; ror
000A65r 1               	; sta BG2ScrollTable+2
000A65r 1               	; ror
000A65r 1               	; sta BG2ScrollTable+4
000A65r 1               	; ror
000A65r 1               	; sta BG2ScrollTable+6
000A65r 1               	; ror
000A65r 1               	; sta BG2ScrollTable+8
000A65r 1               	; a8
000A65r 1               
000A65r 1  A5 10        	lda joypad
000A67r 1  85 12        	sta joypadBuf
000A69r 1  A5 2C 85 00  	DrawByte playerSpriteX, #$5, #$a
000A6Dr 1  A9 05 00 85  
000A71r 1  02 A9 0A 00  
000A78r 1  E2 20        	a8
000A7Ar 1  64 19        	stz frameStatus
000A7Cr 1  CB           	wai
000A7Dr 1  4C rr rr     	jmp MainLoop
000A80r 1               
000A80r 1               VBlank:
000A80r 1  08           	php
000A81r 1  8B           	phb
000A82r 1  0B           	phd
000A83r 1  48           	pha ;push regs to stack so if my main loop is ever too long it'll continue without
000A84r 1  DA           	phx ;fucking up
000A85r 1  5A           	phy
000A86r 1  E2 20        	a8
000A88r 1  A5 19        	lda frameStatus
000A8Ar 1  D0 50        	bne SkipVblank
000A8Cr 1  A9 80        	lda #FORCEBLANK
000A8Er 1  8D 00 21     	sta PPUBRIGHT
000A91r 1  C2 20 A5 14  	SetHScroll scrollX
000A95r 1  E2 20 8D 0D  
000A99r 1  21 EB 8D 0D  
000A9Er 1  C2 20 A5 16  	SetVScroll scrollY
000AA2r 1  E2 20 8D 0E  
000AA6r 1  21 EB 8D 0E  
000AABr 1  A9 80 8D 15  	WRAMtoVRAM TextMirror, $4c00, $400
000AAFr 1  21 A2 00 4C  
000AB3r 1  8E 16 21 A9  
000AC1r 1               
000AC1r 1  C2 20        	a16
000AC3r 1  A5 20        	lda scrollMirrorPtr ;how I check if need to copy scroll data or not
000AC5r 1  F0 03        	beq DontCopyScroll
000AC7r 1  20 rr rr     		jsr VramScrollCopy
000ACAr 1               	DontCopyScroll:
000ACAr 1  E2 20        	a8
000ACCr 1  20 rr rr     	jsr DMASpriteMirror
000ACFr 1  A9 01        	lda #$1 ;start dma transfer on channel 1 (change to 3 if i reenable dmatilemapmirror)
000AD1r 1  8D 0B 42     	sta $420b
000AD4r 1               	; jsr SetupHDMA
000AD4r 1               
000AD4r 1  A9 0F        	lda #$F ;disable force blank, set back to max brightness
000AD6r 1  8D 00 21     	sta PPUBRIGHT
000AD9r 1  AD 10 42     	lda $4210 ;clear vblank flag
000ADCr 1               SkipVblank:
000ADCr 1  7A           	ply
000ADDr 1  FA           	plx
000ADEr 1  68           	pla
000ADFr 1  2B           	pld
000AE0r 1  AB           	plb
000AE1r 1  28           	plp
000AE2r 1               
000AE2r 1  40           	rti
000AE3r 1               
000AE3r 1               SetupVideo:
000AE3r 1  08               php
000AE4r 1               
000AE4r 1  A9 63        	lda #OBSIZE_16_32 | $3
000AE6r 1  8D 01 21     	sta OBSEL ;16x16 or 32x32 sprites, sprite data @ $6000
000AE9r 1  9C 02 21     	stz OAMADDR ;set OAM write cursor to $0
000AECr 1  9C 03 21     	stz OAMADDR+1
000AEFr 1  A9 19        	lda #%00011001
000AF1r 1  8D 05 21         sta BGMODE ;mode 1, 16x16 tiles in bgs 1 and 3, 8x8 tiles in bg 2
000AF4r 1               
000AF4r 1  A9 00            lda #$0 ;bg1 tilemap offset $0, size 32x32
000AF6r 1  8D 07 21         sta NTADDR
000AF9r 1               
000AF9r 1  A9 20        	lda #$20  ; bg2 tilemap offset: $2000, size: 32x32
000AFBr 1  8D 08 21     	sta NTADDR+1
000AFEr 1               
000AFEr 1  A9 4C        	lda #$4c
000B00r 1  8D 09 21     	sta NTADDR+2 ;bg3 tilemap offset: $4C00, size 32x32
000B03r 1               
000B03r 1  A9 31        	lda #$31
000B05r 1  8D 0B 21         sta BGCHRADDR ;bg2 chr vram addr to $3000, bg1 chr vram offset $1000
000B08r 1               
000B08r 1  A9 04        	lda #$04
000B0Ar 1  8D 0C 21     	sta BGCHRADDR+1 ;bg3 chr vram addr is $4000
000B0Dr 1               
000B0Dr 1  A9 17            lda #%00010111 ;enable bg1, bg2, bg3, and sprites
000B0Fr 1  8D 2C 21         sta BLENDMAIN
000B12r 1               
000B12r 1                   ; lda #$FF ;bg1 horizontal scroll to -1 to fix weird stuff
000B12r 1                   ; sta BGSCROLLY
000B12r 1                   ; sta BGSCROLLY
000B12r 1               
000B12r 1  A9 0F            lda #$F ;max brightness
000B14r 1  8D 00 21         sta PPUBRIGHT
000B17r 1               
000B17r 1  28               plp
000B18r 1  60               rts
000B19r 1               
000B19r 1               
000B19r 1               ; ScrollTable:
000B19r 1               	; .byte $80
000B19r 1               	; .word $0000
000B19r 1               	; .byte $10
000B19r 1               	; .word BG2ScrollTable+8
000B19r 1               	; .byte $10
000B19r 1               	; .word BG2ScrollTable+6
000B19r 1               	; .byte $10
000B19r 1               	; .word BG2ScrollTable+4
000B19r 1               	; .byte $10
000B19r 1               	; .word BG2ScrollTable+2
000B19r 1               	; .byte $10
000B19r 1               	; .word BG2ScrollTable
000B19r 1               	; .byte $00
000B19r 1               
000B19r 1               ; PaletteIndexTable: ;needed because palette index auto-increments after every write
000B19r 1               ; ;400 instead of $4 because the endianness of the CGRAM write port is reversed for some reason
000B19r 1               	; .byte $C
000B19r 1               	; .word $400
000B19r 1               	; .byte $C
000B19r 1               	; .word $400
000B19r 1               	; .byte $C
000B19r 1               	; .word $400
000B19r 1               	; .byte $C
000B19r 1               	; .word $400
000B19r 1               	; .byte $C
000B19r 1               	; .word $400
000B19r 1               	; .byte $C
000B19r 1               	; .word $400
000B19r 1               	; .byte $C
000B19r 1               	; .word $400
000B19r 1               	; .byte $C
000B19r 1               	; .word $400
000B19r 1               	; .byte $C
000B19r 1               	; .word $400
000B19r 1               	; .byte $C
000B19r 1               	; .word $400
000B19r 1               	; .byte $C
000B19r 1               	; .word $400
000B19r 1               	; .byte $00
000B19r 1               
000B19r 1               
000B19r 1               ; GradientTable:
000B19r 1               	; .byte $C
000B19r 1               	; .word $71C4; R:4 G:14 B:28
000B19r 1               	; .byte $C
000B19r 1               	; .word $5DC7; R:7 G:14 B:23
000B19r 1               	; .byte $C
000B19r 1               	; .word $51CB; R:11 G:14 B:20
000B19r 1               	; .byte $C
000B19r 1               	; .word $49CD; R:13 G:14 B:18
000B19r 1               	; .byte $C
000B19r 1               	; .word $41F1; R:17 G:15 B:16
000B19r 1               	; .byte $C
000B19r 1               	; .word $35F4; R:20 G:15 B:13
000B19r 1               	; .byte $C
000B19r 1               	; .word $2DF7; R:23 G:15 B:11
000B19r 1               	; .byte $C
000B19r 1               	; .word $221A; R:26 G:16 B:8
000B19r 1               	; .byte $C
000B19r 1               	; .word $1A1C; R:28 G:16 B:6
000B19r 1               	; .byte $C
000B19r 1               	; .word $121F; R:31 G:16 B:4
000B19r 1               	; .byte $C
000B19r 1               	; .word $71A1
000B19r 1               	; .byte $00
000B19r 1               
000B19r 1               DMASpriteMirror:
000B19r 1  9C 02 21     	stz OAMADDR		; set OAM write cursor to 0
000B1Cr 1  9C 03 21     	stz OAMADDR+1
000B1Fr 1               
000B1Fr 1  A9 00        	lda #DMA_LINEAR
000B21r 1  8D 00 43     	sta DMAMODE
000B24r 1  A9 04        	lda #$04 ;write to $2104 (OAMDATA)
000B26r 1  8D 01 43     	sta DMAPPUREG
000B29r 1  A0 00 04     	ldy #OamMirror
000B2Cr 1  8C 02 43     	sty DMAADDR		; source offset
000B2Fr 1  A9 7E        	lda #$7E
000B31r 1  8D 04 43     	sta DMAADDRBANK		; bank address = $7E  (work RAM)
000B34r 1  A0 20 02     	ldy #$0220
000B37r 1  8C 05 43     	sty DMALEN		; number of bytes to transfer
000B3Ar 1  60           	rts
000B3Br 1               
000B3Br 1               
