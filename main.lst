ca65 V2.16 - Git f19651c
Main file   : main.asm
Current file: main.asm

000000r 1               .include "header.inc"
000000r 2               ; Sets up ROM headers/vectors
000000r 2               
000000r 2               .p816   ; 65816 processor
000000r 2               .i16    ; X/Y are 16 bits
000000r 2               .a8     ; A is 8 bits
000000r 2               
000000r 2               .define ROM_NAME "zoz zle zozzle       "
000000r 2                               ;"123456789012345678901"
000000r 2               .segment "HEADER"     ; +$7FE0 in file
000000r 2  7A 6F 7A 20      .byte ROM_NAME
000004r 2  7A 6C 65 20  
000008r 2  7A 6F 7A 7A  
000015r 2               
000015r 2               .segment "ROMINFO"    ; +$7FD5 in file
000000r 2  30               .byte $30         ; LoROM, fast-capable
000001r 2  00               .byte 0           ; no battery RAM
000002r 2  07               .byte $07         ; 128K ROM
000003r 2  00 00 00 00      .byte 0,0,0,0
000007r 2  AA AA 55 55      .word $AAAA,$5555 ; dummy checksum and complement
00000Br 2               
00000Br 2               ;cop,brk,abort,nmi,reset,irq
00000Br 2               ;cop,abort,nmi,res,brk,irqbrk
00000Br 2               .segment "VECTORS"
000000r 2  00 00 00 00      .word 0, 0, EmptyHandler0, EmptyHandler1, EmptyHandler2, VBlank, Reset, EmptyHandler3
000004r 2  rr rr rr rr  
000008r 2  rr rr rr rr  
000010r 2  00 00 00 00      .word 0, 0, EmptyHandler4, EmptyHandler5, VBlank, EmptyHandler6, Reset, EmptyHandler7
000014r 2  rr rr rr rr  
000018r 2  rr rr rr rr  
000020r 2               
000020r 2               .segment "CODE"
000000r 2               EmptyHandler0:
000000r 2  40           	rti
000001r 2               EmptyHandler1:
000001r 2  40           	rti
000002r 2               EmptyHandler2:
000002r 2  40           	rti
000003r 2               EmptyHandler3:
000003r 2  40           	rti
000004r 2               EmptyHandler4:
000004r 2  40           	rti
000005r 2               EmptyHandler5:
000005r 2  40           	rti
000006r 2               EmptyHandler6:
000006r 2  40           	rti
000007r 2               EmptyHandler7:
000007r 2  40           	rti
000008r 2               
000008r 1               .include "initSNES.inc"
000008r 2               ;------------------------------------------------------------------------
000008r 2               ;-  Written by: Neviksti
000008r 2               ;-     If you use my code, please share your creations with me
000008r 2               ;-     as I am always curious :)
000008r 2               ;------------------------------------------------------------------------
000008r 2               
000008r 2               
000008r 2               ;----------------------------------------------------------------------------
000008r 2               ; InitSNES -- my "standard" initialization of SNES memory and registers
000008r 2               ;----------------------------------------------------------------------------
000008r 2               .macro InitSNES
000008r 2                 sei                     ;disable interrupts
000008r 2                 clc                     ;switch to native mode
000008r 2                 xce
000008r 2               
000008r 2                 REP #$38		; mem/A = 16 bit, X/Y = 16 bit
000008r 2               			;decimal mode off
000008r 2                 .i16
000008r 2                 LDX #$1FFF	;Setup the stack
000008r 2                 TXS			;Transfer Index X to Stack Pointer Register
000008r 2               
000008r 2                 ;do the rest of the initialization in a routine
000008r 2                 JSL InitializeSNES
000008r 2               
000008r 2                 SEP #$20		; mem/A = 8 bit
000008r 2               .endmacro
000008r 2               
000008r 2               ;----------------------------------------------------------------------------
000008r 2               
000008r 2               .segment "CODE"
000008r 2               
000008r 2               InitializeSNES:
000008r 2  4B             PHK			;set Data Bank = Program Bank
000009r 2  AB             PLB
00000Ar 2               
00000Ar 2  A9 00          LDA #$0000	;set Direct Page = $0000
00000Cr 2  5B             TCD			;Transfer Accumulator to Direct Register
00000Dr 2               
00000Dr 2  AE FD 1F       LDX $1FFD		;we clear all the mem at one point ...
000010r 2  8E 72 43       STX $4372  	;so save the return address in a place that won't get overwritten
000013r 2  AE FF 1F       LDX $1FFF
000016r 2  8E 74 43       STX $4374
000019r 2               
000019r 2  E2 20          SEP #$20		; mem/A = 8 bit
00001Br 2  C2 10          REP #$10
00001Dr 2               
00001Dr 2  A9 8F          LDA #$8F
00001Fr 2  8D 00 21       STA $2100		;turn screen off for now, set brightness to normal
000022r 2               
000022r 2  A2 01 21       LDX #$2101
000025r 2               _Loop00:		;regs $2101-$210C
000025r 2  74 00          STZ $00,X		;set Sprite,Character,Tile sizes to lowest, and set addresses to $0000
000027r 2  E8             INX
000028r 2  E0 0D 21       CPX #$210D
00002Br 2  D0 F8          BNE _Loop00
00002Dr 2               
00002Dr 2               _Loop01:		;regs $210D-$2114
00002Dr 2  74 00          STZ $00,X		;Set all BG scroll values to $0000
00002Fr 2  74 00          STZ $00,X
000031r 2  E8             INX
000032r 2  E0 15 21       CPX #$2115
000035r 2  D0 F6          BNE _Loop01
000037r 2               
000037r 2  A9 80          LDA #$80		;reg $2115
000039r 2  8D 15 21       STA $2115		; Initialize VRAM transfer mode to word-access, increment by 1
00003Cr 2               
00003Cr 2  9C 16 21       STZ $2116		;regs $2117-$2117
00003Fr 2  9C 17 21       STZ $2117		;VRAM address = $0000
000042r 2               
000042r 2               			;reg $2118-$2119
000042r 2               			;VRAM write register... don't need to initialize
000042r 2               
000042r 2  9C 1A 21       STZ $211A		;clear Mode7 setting
000045r 2               
000045r 2  A2 1B 21       LDX #$211B
000048r 2               _Loop02:		;regs $211B-$2120
000048r 2  74 00          STZ $00,X		;clear out the Mode7 matrix values
00004Ar 2  74 00          STZ $00,X
00004Cr 2  E8             INX
00004Dr 2  E0 21 21       CPX #$2121
000050r 2  D0 F6          BNE _Loop02
000052r 2               
000052r 2               			;reg $2121 - Color address, doesn't need initilaizing
000052r 2               			;reg $2122 - Color data, is initialized later
000052r 2               
000052r 2  A2 23 21       LDX #$2123
000055r 2               _Loop03:		;regs $2123-$2133
000055r 2  74 00          STZ $00,X		;turn off windows, main screens, sub screens, color addition,
000057r 2  E8             INX			;fixed color = $00, no super-impose (external synchronization),
000058r 2  E0 34 21       CPX #$2134	;no interlaced mode, normal resolution
00005Br 2  D0 F8          BNE _Loop03
00005Dr 2               
00005Dr 2               			;regs $2134-$2136  - multiplication result, no initialization needed
00005Dr 2               			;reg $2137 - software H/V latch, no initialization needed
00005Dr 2               			;reg $2138 - Sprite data read, no initialization needed
00005Dr 2               			;regs $2139-$213A  - VRAM data read, no initialization needed
00005Dr 2               			;reg $213B - Color RAM data read, no initialization needed
00005Dr 2               			;regs $213C-$213D  - H/V latched data read, no initialization needed
00005Dr 2               
00005Dr 2  9C 3E 21       STZ $213E		;reg $213E - might not be necesary, but selects PPU master/slave mode
000060r 2               			;reg $213F - PPU status flag, no initialization needed
000060r 2               
000060r 2               			;reg $2140-$2143 - APU communication regs, no initialization required
000060r 2               
000060r 2               			;reg $2180  -  read/write WRAM register, no initialization required
000060r 2               			;reg $2181-$2183  -  WRAM address, no initialization required
000060r 2               
000060r 2               			;reg $4016-$4017  - serial JoyPad read registers, no need to initialize
000060r 2               
000060r 2               
000060r 2  9C 00 42       STZ $4200		;reg $4200  - disable timers, NMI,and auto-joyread
000063r 2               
000063r 2  A9 FF          LDA #$FF
000065r 2  8D 01 42       STA $4201		;reg $4201  - programmable I/O write port, initalize to allow reading at in-port
000068r 2               
000068r 2               			;regs $4202-$4203  - multiplication registers, no initialization required
000068r 2               			;regs $4204-$4206  - division registers, no initialization required
000068r 2               
000068r 2               			;regs $4207-$4208  - Horizontal-IRQ timer setting, since we disabled this, it is OK to not init
000068r 2               			;regs $4209-$420A  - Vertical-IRQ timer setting, since we disabled this, it is OK to not init
000068r 2               
000068r 2  9C 0B 42       STZ $420B		;reg $420B  - turn off all general DMA channels
00006Br 2  9C 0C 42       STZ $420C		;reg $420C  - turn off all H-MA channels
00006Er 2               
00006Er 2  9C 0D 42       STZ $420D		;reg $420D  - ROM access time to slow (2.68Mhz)
000071r 2               
000071r 2  AD 10 42       LDA $4210		;reg $4210  - NMI status, reading resets
000074r 2               
000074r 2               			;reg $4211  - IRQ status, no need to initialize
000074r 2               			;reg $4212  - H/V blank and JoyRead status, no need to initialize
000074r 2               			;reg $4213  - programmable I/O inport, no need to initialize
000074r 2               
000074r 2               			;reg $4214-$4215  - divide results, no need to initialize
000074r 2               			;reg $4216-$4217  - multiplication or remainder results, no need to initialize
000074r 2               
000074r 2               			;regs $4218-$421f  - JoyPad read registers, no need to initialize
000074r 2               
000074r 2               			;regs $4300-$437F
000074r 2               			;no need to intialize because DMA was disabled above
000074r 2               			;also, we're not sure what all of the registers do, so it is better to leave them at
000074r 2               			;their reset state value
000074r 2               
000074r 2               ;  JSR ClearVRAM      ;Reset VRAM
000074r 2                ; JSR ClearPalette   ;Reset colors
000074r 2               
000074r 2                 ;**** clear Sprite tables ********
000074r 2               
000074r 2  9C 02 21       STZ $2102	;sprites initialized to be off the screen, palette 0, character 0
000077r 2  9C 03 21       STZ $2103
00007Ar 2  A2 80 00       LDX #$0080
00007Dr 2  A9 F0          LDA #$F0
00007Fr 2               _Loop08:
00007Fr 2  8D 04 21       STA $2104	;set X = 240
000082r 2  8D 04 21       STA $2104	;set Y = 240
000085r 2  9C 04 21       STZ $2104	;set character = $00
000088r 2  9C 04 21       STZ $2104	;set priority=0, no flips
00008Br 2  CA             DEX
00008Cr 2  D0 F1          BNE _Loop08
00008Er 2               
00008Er 2  A2 20 00       LDX #$0020
000091r 2               _Loop09:
000091r 2  9C 04 21       STZ $2104		;set size bit=0, x MSB = 0
000094r 2  CA             DEX
000095r 2  D0 FA          BNE _Loop09
000097r 2               
000097r 2                 ;**** clear WRAM ********
000097r 2  9C 81 21       STZ $2181		;set WRAM address to $000000
00009Ar 2  9C 82 21       STZ $2182
00009Dr 2  9C 83 21       STZ $2183
0000A0r 2               
0000A0r 2  A2 08 80       LDX #$8008
0000A3r 2  8E 00 43       STX $4300         ;Set DMA mode to fixed source, BYTE to $2180
0000A6r 2  A2 rr rr       LDX #wram_fill_byte
0000A9r 2  8E 02 43       STX $4302         ;Set source offset
0000ACr 2  A9 rr          LDA #<.bank(wram_fill_byte)
0000AEr 2  8D 04 43       STA $4304         ;Set source bank
0000B1r 2  A2 00 00       LDX #$0000
0000B4r 2  8E 05 43       STX $4305         ;Set transfer size to 64k bytes
0000B7r 2  A9 01          LDA #$01
0000B9r 2  8D 0B 42       STA $420B         ;Initiate transfer
0000BCr 2               
0000BCr 2  A9 01          LDA #$01          ;now set the next 64k bytes
0000BEr 2  8D 0B 42       STA $420B         ;Initiate transfer
0000C1r 2               
0000C1r 2  4B             PHK			;make sure Data Bank = Program Bank
0000C2r 2  AB             PLB
0000C3r 2               
0000C3r 2  58             CLI			;enable interrupts again
0000C4r 2               
0000C4r 2  AE 72 43       LDX $4372  	;get our return address...
0000C7r 2  8E FD 1F       STX $1FFD
0000CAr 2  AD 74 43       LDA $4374
0000CDr 2  8D FF 1F       STA $1FFF
0000D0r 2  6B             RTL
0000D1r 2               
0000D1r 2               wram_fill_byte:
0000D1r 2  00           .byte $00
0000D2r 2               
0000D2r 2               ;----------------------------------------------------------------------------
0000D2r 2               ; ClearVRAM -- Sets every byte of VRAM to zero
0000D2r 2               ; In: None
0000D2r 2               ; Out: None
0000D2r 2               ; Modifies: flags
0000D2r 2               ;----------------------------------------------------------------------------
0000D2r 2               ClearVRAM:
0000D2r 2  48              pha
0000D3r 2  DA              phx
0000D4r 2  08              php
0000D5r 2               
0000D5r 2  C2 30           REP #$30		; mem/A = 8 bit, X/Y = 16 bit
0000D7r 2  E2 20           SEP #$20
0000D9r 2               
0000D9r 2  A9 80           LDA #$80
0000DBr 2  8D 15 21        STA $2115         ;Set VRAM port to word access
0000DEr 2  A2 09 18        LDX #$1809
0000E1r 2  8E 00 43        STX $4300         ;Set DMA mode to fixed source, WORD to $2118/9
0000E4r 2  A2 00 00        LDX #$0000
0000E7r 2  8E 16 21        STX $2116         ;Set VRAM port address to $0000
0000EAr 2  86 00           STX $0000         ;Set $00:0000 to $0000 (assumes scratchpad ram)
0000ECr 2  8E 02 43        STX $4302         ;Set source address to $xx:0000
0000EFr 2  A9 00           LDA #$00
0000F1r 2  8D 04 43        STA $4304         ;Set source bank to $00
0000F4r 2  A2 FF FF        LDX #$FFFF
0000F7r 2  8E 05 43        STX $4305         ;Set transfer size to 64k-1 bytes
0000FAr 2  A9 01           LDA #$01
0000FCr 2  8D 0B 42        STA $420B         ;Initiate transfer
0000FFr 2               
0000FFr 2  9C 19 21        STZ $2119         ;clear the last byte of the VRAM
000102r 2               
000102r 2  28              plp
000103r 2  FA              plx
000104r 2  68              pla
000105r 2  60              RTS
000106r 2               
000106r 2               ;----------------------------------------------------------------------------
000106r 2               ; ClearPalette -- Reset all palette colors to zero
000106r 2               ; In: None
000106r 2               ; Out: None
000106r 2               ; Modifies: flags
000106r 2               ;----------------------------------------------------------------------------
000106r 2               ClearPalette:
000106r 2  DA              PHX
000107r 2  08              PHP
000108r 2  C2 30           REP #$30		; mem/A = 8 bit, X/Y = 16 bit
00010Ar 2  E2 20           SEP #$20
00010Cr 2               
00010Cr 2  9C 21 21        STZ $2121
00010Fr 2  A2 00 01        LDX #$0100
000112r 2               ClearPaletteLoop:
000112r 2  9C 22 21        STZ $2122
000115r 2  9C 22 21        STZ $2122
000118r 2  CA              DEX
000119r 2  D0 F7           BNE ClearPaletteLoop
00011Br 2               
00011Br 2  28              PLP
00011Cr 2  FA              PLX
00011Dr 2  60              RTS
00011Er 2               
00011Er 2               
00011Er 1               .include "constants.asm"
00011Er 2               .enum ;start at $10 because first 15 bytes are "scratchpad"
00011Er 2               scrollX = $10
00011Er 2               scrollY = scrollX+2 ;12
00011Er 2               scroll2X = scrollY+2 ;14
00011Er 2               playerHSpeed = scroll2X+2 ;16
00011Er 2               spriteX = playerHSpeed+2 ;18
00011Er 2               spriteY = spriteX+2 ;2a
00011Er 2               playerX = spriteY+2;like sprite x but "relative to tilemap" ;1c
00011Er 2               playerY = playerX+2 ;1e
00011Er 2               playerTileOffset = playerY+2 ;20
00011Er 2               playerTileNum = playerTileOffset+2 ;22
00011Er 2               collision
00011Er 2               playerAnimDelay = collision+2
00011Er 2               playerAttrs
00011Er 2               playerVSpeed
00011Er 2               playerState
00011Er 2               movementState
00011Er 2               .endenum
00011Er 2               
00011Er 2               ;---joypad---
00011Er 2               
00011Er 2               .define JOY_B $80
00011Er 2               .define JOY_Y $40
00011Er 2               .define JOY_SELECT $20
00011Er 2               .define JOY_START $10
00011Er 2               .define JOY_UP $8
00011Er 2               .define JOY_DOWN $4
00011Er 2               .define JOY_LEFT $2
00011Er 2               .define JOY_RIGHT $1
00011Er 2               
00011Er 2               ;---oam pt 2 write masks---
00011Er 2               
00011Er 2               .define SPRITE3_MASK %00111111
00011Er 2               .define SPRITE2_MASK %11001111
00011Er 2               .define SPRITE1_MASK %11110011
00011Er 2               .define SPRITE0_MASK %11111100
00011Er 2               
00011Er 2               ;oam mirror defines
00011Er 2               .define OamMirror $400
00011Er 2               .define Oam2Mirror $600
00011Er 2               .define TilemapMirror $2000
00011Er 2               
00011Er 2               .define BG2ScrollTable $620
00011Er 2               
00011Er 1               .include "macros.asm"
00011Er 2               .macro LoadPalette source, colorIndex, numColors
00011Er 2               ;parameters:
00011Er 2               ;source, color to start on, number of colors to copy
00011Er 2                   lda #colorIndex
00011Er 2                   sta $2121       ; Start at START color
00011Er 2                   lda #<.bank(source)        ; Using : before the parameter gets its bank.
00011Er 2                   ldx #source         ; Not using : gets the offset address.
00011Er 2                   ldy #(numColors * 2)   ; 2 bytes for every color
00011Er 2                   jsr DMAPalette
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro LoadBlockToVRAM source, destination, size
00011Er 2               ;parameters:
00011Er 2               ;source, destination, size
00011Er 2                   lda #$80
00011Er 2                   sta $2115       ; Set VRAM transfer mode to word-access, increment by 1
00011Er 2                   ldx #destination         ; DEST
00011Er 2                   stx $2116       ; $2116: Word address for accessing VRAM.
00011Er 2                   lda #<.bank(source)        ; SRCBANK
00011Er 2                   ldx #source         ; SRCOFFSET
00011Er 2                   ldy #size         ; SIZE
00011Er 2                  jsr LoadVRAM
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro LoadBlockToWRAM source, destination, size
00011Er 2               	ldx #source
00011Er 2               	stx $4302 ;source address
00011Er 2               	lda #<.bank(source)
00011Er 2               	sta $4304 ;bank
00011Er 2               	ldx #size
00011Er 2               	stx $4305
00011Er 2               	ldx #destination ; set wram transfer address
00011Er 2               	stx $2181
00011Er 2               	stz $2183 ;only accesses the first 64k, yolo
00011Er 2               	lda #$80 ;dest = vram port
00011Er 2               	sta $4301
00011Er 2               	stz $4300 ; 1 byte transfer, auto-increment
00011Er 2               	lda #$1
00011Er 2               	sta $420b ;start transfer
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro DMATilemapMirror screen
00011Er 2               	lda #$80
00011Er 2               	sta $2115 ;word-access,increment by one
00011Er 2               	a16
00011Er 2               	lda screen ;calculate offset based on screen parameter
00011Er 2               	xba
00011Er 2               	clc
00011Er 2               	rol a
00011Er 2               	rol a
00011Er 2               	sta $2116 ;vram address to write to
00011Er 2               	rol a
00011Er 2               	ora #$2000
00011Er 2               	sta $4312 ;dma source address
00011Er 2               	a8
00011Er 2               	lda #$7e
00011Er 2               	sta $4314 ;bank
00011Er 2               	ldx #$800
00011Er 2               	stx $4315
00011Er 2               	lda #$18 ;dest = $2118, vram write register
00011Er 2               	sta $4311
00011Er 2               	lda #$1 ;word increment on dest, src increment
00011Er 2               	sta $4310
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro WriteTilemap screen, xOff, yOff, data
00011Er 2               ;point to write to = ($800*screen + $20*yOff+xOff)*2
00011Er 2               ;writes to $0 and $1
00011Er 2               	a16
00011Er 2               	lda screen
00011Er 2               	xba
00011Er 2               	clc
00011Er 2               	rol a
00011Er 2               	rol a
00011Er 2               	rol a ;screens are $800 apart, so multiply it by that
00011Er 2               	sta $0
00011Er 2               	lda yOff ;each "screen" is 32x32 words or $40x$40 bytes
00011Er 2               	; rol a
00011Er 2               	; rol a
00011Er 2               	; rol a
00011Er 2               	; rol a
00011Er 2               	; rol a
00011Er 2               	; rol a
00011Er 2               	xba
00011Er 2               	clc
00011Er 2               	ror a
00011Er 2               	ror a
00011Er 2               	ora $0
00011Er 2               	clc
00011Er 2               	adc xOff ;words, so add twice to multiply by 2
00011Er 2               	clc
00011Er 2               	adc xOff
00011Er 2               	sta $0
00011Er 2               	a8
00011Er 2               	lda #$7e
00011Er 2               	pha
00011Er 2               	plb
00011Er 2               	a16
00011Er 2               	lda data
00011Er 2               	ldx $0
00011Er 2               	sta $2000,x
00011Er 2               	a8
00011Er 2               	lda #$0
00011Er 2               	pha
00011Er 2               	plb
00011Er 2               	stz $0 ;cleanup
00011Er 2               	stz $1 ;cleanup
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro DrawBox screen, x1, y1, x2, y2
00011Er 2               ;note that "coordinates" are tiles, not pixels
00011Er 2               .scope
00011Er 2               	lda x2
00011Er 2               	sta $4
00011Er 2               	lda y1 ;$2 apart because gets read in 16-bit mdode
00011Er 2               	sta $6 ;inside writeTilemap
00011Er 2               	lda y2
00011Er 2               	sta $8
00011Er 2               @DrawVLoop:
00011Er 2               	lda x1
00011Er 2               	sta $2
00011Er 2               @DrawHLoop:
00011Er 2               	WriteTilemap screen, $2, $6, #$1
00011Er 2               	lda $2
00011Er 2               	inc a
00011Er 2               	sta $2
00011Er 2               	cmp $4
00011Er 2               	bne @DrawHLoop
00011Er 2               	lda $6
00011Er 2               	inc a
00011Er 2               	sta $6
00011Er 2               	cmp $8
00011Er 2               	bne @DrawVLoop
00011Er 2               	ldx #$a
00011Er 2               	jsr ClearMem
00011Er 2               .endscope
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro DrawLine screen, x1, x2, yVal
00011Er 2               .scope
00011Er 2               	lda x1
00011Er 2               	sta $2
00011Er 2               	lda x2 ;$2 apart because gets read in 16-bit mdode
00011Er 2               	sta $4 ;inside writeTilemap
00011Er 2               @DrawLoop:
00011Er 2               	WriteTilemap screen, $2, yVal, #$1
00011Er 2               	lda $2
00011Er 2               	inc a
00011Er 2               	sta $2
00011Er 2               	cmp $4
00011Er 2               	bne @DrawLoop
00011Er 2               	ldx #$6
00011Er 2               	jsr ClearMem
00011Er 2               .endscope
00011Er 2               .endmacro
00011Er 2               
00011Er 2               
00011Er 2               .macro SetHScroll hVal
00011Er 2               ;parameter: mem address of horizontal scroll val
00011Er 2               	rep #$20
00011Er 2               	lda hVal
00011Er 2               	sep #$20
00011Er 2               	sta $210D	; BG1 horiz scroll
00011Er 2               	xba
00011Er 2               	sta $210D
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro SetVScroll vVal
00011Er 2               ;parameter: mem address of vertical scroll val
00011Er 2               	rep #$20
00011Er 2               	lda vVal
00011Er 2               	sep #$20
00011Er 2               	sta $210E	; BG1 vert scroll
00011Er 2               	xba
00011Er 2               	sta $210E
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro SetMosaic level
00011Er 2               ;parameter: mosaic level (0-15 dec, 0-f hex)
00011Er 2               	lda level
00011Er 2               	and #$F ;param %=15
00011Er 2               	clc
00011Er 2               	ror a
00011Er 2               	ror a
00011Er 2               	ror a
00011Er 2               	ora #$1
00011Er 2               	sta $2106
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro PositiveDiff val1, val2
00011Er 2               ;puts the difference of val1 and val2 into a
00011Er 2               	lda val1
00011Er 2               	cmp val2
00011Er 2               	bcs @Val1Greater
00011Er 2               	sec
00011Er 2               	lda val2
00011Er 2               	sbc val1
00011Er 2               	jmp @end
00011Er 2               @Val1Greater:
00011Er 2               	sec
00011Er 2               	sbc val2
00011Er 2               @end:
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro a16
00011Er 2               	rep #$20
00011Er 2               	.a16
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro a8
00011Er 2               	sep #$20
00011Er 2               	.a8
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .segment "CODE"
00011Er 2               DMAPalette:
00011Er 2               ;a- data bank
00011Er 2               ;x- data offset
00011Er 2               ;y- size of data
00011Er 2               
00011Er 2               ;processor status onto stack
00011Er 2  8B           	phb
00011Fr 2  08           	php
000120r 2  8E 02 43     	stx $4302 ;address into dma 0 source register
000123r 2  8D 04 43     	sta $4304 ;bank into channel 0 bank register
000126r 2  8C 05 43     	sty $4305 ;number of bytes into channel 0 size
000129r 2  9C 00 43     	stz $4300 ;dma byte mode, increment by 1
00012Cr 2  A9 22        	lda #$22 ;$2122=color palette write
00012Er 2  8D 01 43     	sta $4301
000131r 2  A9 01        	lda #$1
000133r 2  8D 0B 42     	sta $420B ;start transfer
000136r 2               
000136r 2  28           	plp
000137r 2  AB           	plb
000138r 2  60           	rts
000139r 2               
000139r 2               LoadVRAM:
000139r 2               ;a- data bank
000139r 2               ;x- data offset
000139r 2               ;y- num of bytes to copy
000139r 2  8B           	phb
00013Ar 2  08               php         ; Preserve Registers
00013Br 2  8E 02 43         stx $4302   ; Store Data offset into DMA source offset
00013Er 2  8D 04 43         sta $4304   ; Store data Bank into DMA source bank
000141r 2  8C 05 43         sty $4305   ; Store size of data block
000144r 2               
000144r 2  A9 01            lda #$1
000146r 2  8D 00 43         sta $4300   ; Set DMA mode (word, normal increment)
000149r 2  A9 18            lda #$18    ; Set the destination register (VRAM write register)
00014Br 2  8D 01 43         sta $4301
00014Er 2  A9 01            lda #$1    ; Initiate DMA transfer (channel 1)
000150r 2  8D 0B 42     	sta $420B
000153r 2               
000153r 2  28               plp         ; restore registers
000154r 2  AB           	plb
000155r 2  60               rts         ; return
000156r 2               
000156r 2               ClearMem:
000156r 2               ;x- amount of ram to clear
000156r 2               @ClearLoop:
000156r 2  74 00        	stz $0, x
000158r 2  CA           	dex
000159r 2  D0 FB        	bne @ClearLoop
00015Br 2  64 00        	stz $0
00015Dr 2  60           	rts
00015Er 2               
00015Er 2               
00015Er 1               .include "sprites.asm"
00015Er 2               spriteNum = $0
00015Er 2               oam2Data = $1
00015Er 2               oam2WriteIndex = $2
00015Er 2               
00015Er 2               .macro LoadSprite sprite, xOffset, yOffset, tileNum, attributes, xBit, size
00015Er 2               ;parameters: sprite num, pointer to x coord, pointer to y coord, pointer to tile num, attributes,first bit of x coordinate, big/small
00015Er 2               ;shoutout to nintendo for making me go through all this bullshit, can't have
00015Er 2               ; all the memory together or something sane
00015Er 2               	lda sprite
00015Er 2               	sta spriteNum
00015Er 2               	a16
00015Er 2               	lda sprite
00015Er 2               	clc
00015Er 2               	rol a
00015Er 2               	rol a ;multiply sprite num by 4 because each index in oam table is 4 bytes
00015Er 2               	tax
00015Er 2               	a8
00015Er 2               	lda xOffset
00015Er 2               	sta OamMirror,x
00015Er 2               	inx
00015Er 2               	lda yOffset
00015Er 2               	sta OamMirror,x
00015Er 2               	inx
00015Er 2               	lda tileNum
00015Er 2               	sta OamMirror,x
00015Er 2               	inx
00015Er 2               	lda attributes
00015Er 2               	sta OamMirror,x
00015Er 2               
00015Er 2               	lda xBit
00015Er 2               	and #$1 ;make sure only 1 bit
00015Er 2               	sta oam2Data ;mess around with first bit of x coordinate b/c nintendo stored it separately
00015Er 2               	lda size
00015Er 2               	and #$1 ;combine sprite size and msb of xpos
00015Er 2               	ror a
00015Er 2               	ora oam2Data
00015Er 2               	sta oam2Data
00015Er 2               	lda spriteNum
00015Er 2               	clc
00015Er 2               	ror a ;4 sprites per oam table byte
00015Er 2               	ror a
00015Er 2               	and #$7F
00015Er 2               	sta oam2WriteIndex
00015Er 2               	jsr SetOam2Mirror
00015Er 2               .endmacro
00015Er 2               
00015Er 2               .segment "CODE"
00015Er 2               InitSprites:
00015Er 2  08           	php
00015Fr 2  A9 01        	lda #$1
000161r 2  A2 00 00     	ldx #$0
000164r 2               OamInitLoop: ;apparently just setting the sprites to $100 doesn't actually cause them to be removed from the scanline limit
000164r 2  9D 00 04     	sta OamMirror,x
000167r 2  E8           	inx
000168r 2  E8           	inx
000169r 2  E8           	inx
00016Ar 2  E8           	inx
00016Br 2  E0 00 02     	cpx #$200
00016Er 2  D0 F4        	bne OamInitLoop
000170r 2  A9 55        	lda #$55
000172r 2  A2 00 00     	ldx #$0
000175r 2               Oam2InitLoop:
000175r 2  9D 00 06     	sta Oam2Mirror,x
000178r 2  E8           	inx
000179r 2  E0 20 00     	cpx #$20 ;size of oam pt 2
00017Cr 2  D0 F7        	bne Oam2InitLoop
00017Er 2  28           	plp
00017Fr 2  60           	rts
000180r 2               
000180r 2               SetOam2Mirror:
000180r 2  08           	php
000181r 2  A5 00        	lda $0
000183r 2  29 03        	and #$3 ;check where in the byte to place 1st x bit/sprite size
000185r 2  F0 0B        	beq Sprite0
000187r 2  C9 01        	cmp #1
000189r 2  F0 16        	beq Sprite1
00018Br 2  C9 02        	cmp #2
00018Dr 2  F0 26        	beq Sprite2
00018Fr 2  4C rr rr     	jmp Sprite3
000192r 2               
000192r 2               Sprite0:
000192r 2  A6 02        	ldx oam2WriteIndex
000194r 2  BD 00 06     	lda Oam2Mirror,x
000197r 2  29 FC        	and #SPRITE0_MASK
000199r 2  05 01        	ora oam2Data
00019Br 2  9D 00 06     	sta Oam2Mirror,x
00019Er 2  4C rr rr     	jmp EndBitStuff
0001A1r 2               
0001A1r 2               Sprite1:
0001A1r 2  18           	clc
0001A2r 2  66 01        	ror oam2Data
0001A4r 2  66 01        	ror oam2Data
0001A6r 2               
0001A6r 2  A6 02        	ldx oam2WriteIndex
0001A8r 2  BD 00 06     	lda Oam2Mirror,x
0001ABr 2  29 F3        	and #SPRITE1_MASK
0001ADr 2  05 01        	ora oam2Data
0001AFr 2  9D 00 06     	sta Oam2Mirror,x
0001B2r 2  4C rr rr     	jmp EndBitStuff
0001B5r 2               Sprite2:
0001B5r 2  18           	clc
0001B6r 2  66 01        	ror oam2Data
0001B8r 2  66 01        	ror oam2Data
0001BAr 2  66 01        	ror oam2Data
0001BCr 2  66 01        	ror oam2Data
0001BEr 2               
0001BEr 2  A6 02        	ldx oam2WriteIndex
0001C0r 2  BD 00 06     	lda Oam2Mirror,x
0001C3r 2  29 CF        	and #SPRITE2_MASK
0001C5r 2  05 01        	ora oam2Data
0001C7r 2  9D 00 06     	sta Oam2Mirror,x
0001CAr 2  4C rr rr     	jmp EndBitStuff
0001CDr 2               Sprite3:
0001CDr 2  18           	clc
0001CEr 2  66 01        	ror oam2Data
0001D0r 2  66 01        	ror oam2Data
0001D2r 2  66 01        	ror oam2Data
0001D4r 2  66 01        	ror oam2Data
0001D6r 2  66 01        	ror oam2Data
0001D8r 2  66 01        	ror oam2Data
0001DAr 2               
0001DAr 2  A6 02        	ldx oam2WriteIndex
0001DCr 2  BD 00 06     	lda Oam2Mirror,x
0001DFr 2  29 3F        	and #SPRITE3_MASK
0001E1r 2  05 01        	ora oam2Data
0001E3r 2  9D 00 06     	sta Oam2Mirror,x
0001E6r 2  4C rr rr     	jmp EndBitStuff
0001E9r 2               
0001E9r 2               EndBitStuff:
0001E9r 2  28           	plp
0001EAr 2  60           	rts
0001EBr 2               
0001EBr 2               
0001EBr 1               .include "art.asm"
0001EBr 2               BGPalette:
0001EBr 2  00 00 01 6D  	.INCBIN ".\art\bgtiles.clr"
0001EFr 2  87 6E A3 48  
0001F3r 2  A1 71 DE 46  
0003EBr 2               
0003EBr 2               BG2Palette:
0003EBr 2  00 00 01 6D  	.INCBIN ".\art\bg2tiles.clr"
0003EFr 2  87 6E A3 48  
0003F3r 2  A1 71 C5 0D  
0005EBr 2               
0005EBr 2               SpritePalette:
0005EBr 2  00 00 10 00  	.INCBIN ".\art\larry.clr"
0005EFr 2  9F 5F 66 72  
0005F3r 2  C5 0D 1D 6F  
0007EBr 2               
0007EBr 2               LarryTiles:
0007EBr 2               	.define NUM_LARRY_TILES $E
0007EBr 2               	.define LARRY_OFFSET $20
0007EBr 2               	.define LARRY_ANIMATION_DELAY $2 ;number of frames between incrementing movement
0007EBr 2  00 00 00 00  	.INCBIN ".\art\larry.pic"
0007EFr 2  00 00 00 00  
0007F3r 2  00 0F 00 1F  
000FEBr 2               BGTiles:
000FEBr 2  00 00 00 00  	.incbin ".\art\bgtiles.pic"
000FEFr 2  00 00 00 00  
000FF3r 2  00 00 00 00  
0013EBr 2               
0013EBr 2               BG2Tiles:
0013EBr 2  00 00 00 00  	.incbin ".\art\bg2tiles.pic"
0013EFr 2  00 00 00 00  
0013F3r 2  00 00 00 00  
0015EBr 2               
0015EBr 2               BGTilemap:
0015EBr 2               	;top left screen
0015EBr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0015EFr 2  00 00 00 00  
0015F3r 2  00 00 00 00  
00162Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00162Fr 2  00 00 00 00  
001633r 2  00 00 00 00  
00166Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00166Fr 2  00 00 00 00  
001673r 2  00 00 00 00  
0016ABr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0016AFr 2  00 00 00 00  
0016B3r 2  00 00 00 00  
0016EBr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0016EFr 2  00 00 00 00  
0016F3r 2  00 00 00 00  
00172Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00172Fr 2  00 00 00 00  
001733r 2  00 00 00 00  
00176Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00176Fr 2  00 00 00 00  
001773r 2  00 00 00 00  
0017ABr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0017AFr 2  00 00 00 00  
0017B3r 2  00 00 00 00  
0017EBr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0017EFr 2  00 00 00 00  
0017F3r 2  00 00 00 00  
00182Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00182Fr 2  00 00 00 00  
001833r 2  00 00 00 00  
00186Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00186Fr 2  00 00 00 00  
001873r 2  00 00 00 00  
0018ABr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0018AFr 2  00 00 00 00  
0018B3r 2  00 00 00 00  
0018EBr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0018EFr 2  00 00 00 00  
0018F3r 2  00 00 00 00  
00192Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00192Fr 2  00 00 00 00  
001933r 2  00 00 00 00  
00196Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00196Fr 2  00 00 00 00  
001973r 2  00 00 00 00  
0019ABr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0019AFr 2  00 00 00 00  
0019B3r 2  00 00 00 00  
0019EBr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0019EFr 2  00 00 00 00  
0019F3r 2  00 00 00 00  
001A2Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001A2Fr 2  00 00 00 00  
001A33r 2  00 00 00 00  
001A6Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001A6Fr 2  00 00 00 00  
001A73r 2  00 00 00 00  
001AABr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001AAFr 2  00 00 00 00  
001AB3r 2  00 00 00 00  
001AEBr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001AEFr 2  00 00 00 00  
001AF3r 2  00 00 00 00  
001B2Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001B2Fr 2  00 00 00 00  
001B33r 2  00 00 00 00  
001B6Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001B6Fr 2  00 00 00 00  
001B73r 2  00 00 00 00  
001BABr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001BAFr 2  00 00 00 00  
001BB3r 2  00 00 00 00  
001BEBr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001BEFr 2  00 00 00 00  
001BF3r 2  00 00 00 00  
001C2Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001C2Fr 2  00 00 00 00  
001C33r 2  00 00 00 00  
001C6Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001C6Fr 2  00 00 00 00  
001C73r 2  00 00 00 00  
001CABr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001CAFr 2  00 00 00 00  
001CB3r 2  00 00 00 00  
001CEBr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001CEFr 2  00 00 00 00  
001CF3r 2  00 00 00 00  
001D2Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001D2Fr 2  00 00 00 00  
001D33r 2  00 00 00 00  
001D6Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001D6Fr 2  00 00 00 00  
001D73r 2  00 00 00 00  
001DABr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001DAFr 2  00 00 00 00  
001DB3r 2  00 00 00 00  
001DEBr 2               
001DEBr 2               	;top right screen
001DEBr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001DEFr 2  00 00 00 00  
001DF3r 2  00 00 00 00  
001E2Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001E2Fr 2  00 00 00 00  
001E33r 2  00 00 00 00  
001E6Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001E6Fr 2  00 00 00 00  
001E73r 2  00 00 00 00  
001EABr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001EAFr 2  00 00 00 00  
001EB3r 2  00 00 00 00  
001EEBr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001EEFr 2  00 00 00 00  
001EF3r 2  00 00 00 00  
001F2Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001F2Fr 2  00 00 00 00  
001F33r 2  00 00 00 00  
001F6Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001F6Fr 2  00 00 00 00  
001F73r 2  00 00 00 00  
001FABr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001FAFr 2  00 00 00 00  
001FB3r 2  00 00 00 00  
001FEBr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001FEFr 2  00 00 00 00  
001FF3r 2  00 00 00 00  
00202Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$1,$0,$0,$1,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00202Fr 2  00 00 00 00  
002033r 2  00 00 00 00  
00206Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00206Fr 2  00 00 00 00  
002073r 2  00 00 00 00  
0020ABr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0020AFr 2  00 00 00 00  
0020B3r 2  00 00 00 00  
0020EBr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$1,$1,$1,$1,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0020EFr 2  00 00 00 00  
0020F3r 2  00 00 00 00  
00212Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00212Fr 2  00 00 00 00  
002133r 2  00 00 00 00  
00216Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00216Fr 2  00 00 00 00  
002173r 2  00 00 00 00  
0021ABr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0021AFr 2  00 00 00 00  
0021B3r 2  00 00 00 00  
0021EBr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0021EFr 2  00 00 00 00  
0021F3r 2  00 00 00 00  
00222Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00222Fr 2  00 00 00 00  
002233r 2  00 00 00 00  
00226Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00226Fr 2  00 00 00 00  
002273r 2  00 00 00 00  
0022ABr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0022AFr 2  00 00 00 00  
0022B3r 2  00 00 00 00  
0022EBr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0022EFr 2  00 00 00 00  
0022F3r 2  00 00 00 00  
00232Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00232Fr 2  00 00 00 00  
002333r 2  00 00 00 00  
00236Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00236Fr 2  00 00 00 00  
002373r 2  00 00 00 00  
0023ABr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0023AFr 2  00 00 00 00  
0023B3r 2  00 00 00 00  
0023EBr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0023EFr 2  00 00 00 00  
0023F3r 2  00 00 00 00  
00242Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00242Fr 2  00 00 00 00  
002433r 2  00 00 00 00  
00246Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00246Fr 2  00 00 00 00  
002473r 2  00 00 00 00  
0024ABr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0024AFr 2  00 00 00 00  
0024B3r 2  00 00 00 00  
0024EBr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0024EFr 2  00 00 00 00  
0024F3r 2  00 00 00 00  
00252Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00252Fr 2  00 00 00 00  
002533r 2  00 00 00 00  
00256Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00256Fr 2  00 00 00 00  
002573r 2  00 00 00 00  
0025ABr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0025AFr 2  00 00 00 00  
0025B3r 2  00 00 00 00  
0025EBr 2               
0025EBr 2               	;bottom left screen
0025EBr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0025EFr 2  00 00 00 00  
0025F3r 2  00 00 00 00  
00262Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00262Fr 2  00 00 00 00  
002633r 2  00 00 00 00  
00266Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00266Fr 2  00 00 00 00  
002673r 2  00 00 00 00  
0026ABr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0026AFr 2  00 00 00 00  
0026B3r 2  00 00 00 00  
0026EBr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0026EFr 2  00 00 00 00  
0026F3r 2  00 00 00 00  
00272Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00272Fr 2  00 00 00 00  
002733r 2  00 00 00 00  
00276Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00276Fr 2  00 00 00 00  
002773r 2  00 00 00 00  
0027ABr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0027AFr 2  00 00 00 00  
0027B3r 2  00 00 00 00  
0027EBr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0027EFr 2  00 00 00 00  
0027F3r 2  00 00 00 00  
00282Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00282Fr 2  00 00 00 00  
002833r 2  00 00 00 00  
00286Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00286Fr 2  00 00 00 00  
002873r 2  00 00 00 00  
0028ABr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0028AFr 2  00 00 00 00  
0028B3r 2  00 00 00 00  
0028EBr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0028EFr 2  00 00 00 00  
0028F3r 2  00 00 00 00  
00292Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00292Fr 2  00 00 00 00  
002933r 2  00 00 00 00  
00296Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00296Fr 2  00 00 00 00  
002973r 2  00 00 00 00  
0029ABr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0029AFr 2  00 00 00 00  
0029B3r 2  00 00 00 00  
0029EBr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0029EFr 2  00 00 00 00  
0029F3r 2  00 00 00 00  
002A2Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002A2Fr 2  00 00 00 00  
002A33r 2  00 00 00 00  
002A6Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002A6Fr 2  00 00 00 00  
002A73r 2  00 00 00 00  
002AABr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002AAFr 2  00 00 00 00  
002AB3r 2  00 00 00 00  
002AEBr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$1,$1,$1,$1,$1,$1,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002AEFr 2  00 00 00 00  
002AF3r 2  00 00 00 00  
002B2Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002B2Fr 2  00 00 00 00  
002B33r 2  00 00 00 00  
002B6Br 2  00 00 00 00  	.word $0,$0,$0,$0,$1,$1,$1,$1,$1,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002B6Fr 2  00 00 00 00  
002B73r 2  01 00 01 00  
002BABr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002BAFr 2  00 00 00 00  
002BB3r 2  00 00 00 00  
002BEBr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002BEFr 2  00 00 00 00  
002BF3r 2  00 00 00 00  
002C2Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002C2Fr 2  00 00 00 00  
002C33r 2  00 00 00 00  
002C6Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002C6Fr 2  00 00 00 00  
002C73r 2  00 00 00 00  
002CABr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002CAFr 2  00 00 00 00  
002CB3r 2  00 00 00 00  
002CEBr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002CEFr 2  00 00 00 00  
002CF3r 2  00 00 00 00  
002D2Br 2  01 00 01 00  	.word $1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1
002D2Fr 2  01 00 01 00  
002D33r 2  01 00 01 00  
002D6Br 2  02 00 02 00  	.word $2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2
002D6Fr 2  02 00 02 00  
002D73r 2  02 00 02 00  
002DABr 2  02 00 02 00  	.word $2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2
002DAFr 2  02 00 02 00  
002DB3r 2  02 00 02 00  
002DEBr 2               	;bottom right screen
002DEBr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002DEFr 2  00 00 00 00  
002DF3r 2  00 00 00 00  
002E2Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002E2Fr 2  00 00 00 00  
002E33r 2  00 00 00 00  
002E6Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002E6Fr 2  00 00 00 00  
002E73r 2  00 00 00 00  
002EABr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002EAFr 2  00 00 00 00  
002EB3r 2  00 00 00 00  
002EEBr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002EEFr 2  00 00 00 00  
002EF3r 2  00 00 00 00  
002F2Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002F2Fr 2  00 00 00 00  
002F33r 2  00 00 00 00  
002F6Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002F6Fr 2  00 00 00 00  
002F73r 2  00 00 00 00  
002FABr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002FAFr 2  00 00 00 00  
002FB3r 2  00 00 00 00  
002FEBr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002FEFr 2  00 00 00 00  
002FF3r 2  00 00 00 00  
00302Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00302Fr 2  00 00 00 00  
003033r 2  00 00 00 00  
00306Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00306Fr 2  00 00 00 00  
003073r 2  00 00 00 00  
0030ABr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0030AFr 2  00 00 00 00  
0030B3r 2  00 00 00 00  
0030EBr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0030EFr 2  00 00 00 00  
0030F3r 2  00 00 00 00  
00312Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00312Fr 2  00 00 00 00  
003133r 2  00 00 00 00  
00316Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00316Fr 2  00 00 00 00  
003173r 2  00 00 00 00  
0031ABr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0031AFr 2  00 00 00 00  
0031B3r 2  00 00 00 00  
0031EBr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0031EFr 2  00 00 00 00  
0031F3r 2  00 00 00 00  
00322Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00322Fr 2  00 00 00 00  
003233r 2  00 00 00 00  
00326Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00326Fr 2  00 00 00 00  
003273r 2  00 00 00 00  
0032ABr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0032AFr 2  00 00 00 00  
0032B3r 2  00 00 00 00  
0032EBr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0032EFr 2  00 00 00 00  
0032F3r 2  00 00 00 00  
00332Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00332Fr 2  00 00 00 00  
003333r 2  00 00 00 00  
00336Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00336Fr 2  00 00 00 00  
003373r 2  00 00 00 00  
0033ABr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0033AFr 2  00 00 00 00  
0033B3r 2  00 00 00 00  
0033EBr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0033EFr 2  00 00 00 00  
0033F3r 2  00 00 00 00  
00342Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00342Fr 2  00 00 00 00  
003433r 2  00 00 00 00  
00346Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00346Fr 2  00 00 00 00  
003473r 2  00 00 00 00  
0034ABr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0034AFr 2  00 00 00 00  
0034B3r 2  00 00 00 00  
0034EBr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0034EFr 2  00 00 00 00  
0034F3r 2  00 00 00 00  
00352Br 2  01 00 01 00  	.word $1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1
00352Fr 2  01 00 01 00  
003533r 2  01 00 01 00  
00356Br 2  02 00 02 00  	.word $2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2
00356Fr 2  02 00 02 00  
003573r 2  02 00 02 00  
0035ABr 2  02 00 02 00  	.word $2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2
0035AFr 2  02 00 02 00  
0035B3r 2  02 00 02 00  
0035EBr 2               
0035EBr 2               CollisionMap: ;like bg map but in a more "friendly" format
0035EBr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0035EFr 2  00 00 00 00  
0035F3r 2  00 00 00 00  
00362Br 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00362Fr 2  00 00 00 00  
003633r 2  00 00 00 00  
00366Br 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00366Fr 2  00 00 00 00  
003673r 2  00 00 00 00  
0036ABr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0036AFr 2  00 00 00 00  
0036B3r 2  00 00 00 00  
0036EBr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0036EFr 2  00 00 00 00  
0036F3r 2  00 00 00 00  
00372Br 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00372Fr 2  00 00 00 00  
003733r 2  00 00 00 00  
00376Br 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00376Fr 2  00 00 00 00  
003773r 2  00 00 00 00  
0037ABr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0037AFr 2  00 00 00 00  
0037B3r 2  00 00 00 00  
0037EBr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0037EFr 2  00 00 00 00  
0037F3r 2  00 00 00 00  
00382Br 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00382Fr 2  00 00 00 00  
003833r 2  00 00 00 00  
00386Br 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00386Fr 2  00 00 00 00  
003873r 2  00 00 00 00  
0038ABr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0038AFr 2  00 00 00 00  
0038B3r 2  00 00 00 00  
0038EBr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0038EFr 2  00 00 00 00  
0038F3r 2  00 00 00 00  
00392Br 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00392Fr 2  00 00 00 00  
003933r 2  00 00 00 00  
00396Br 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00396Fr 2  00 00 00 00  
003973r 2  00 00 00 00  
0039ABr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0039AFr 2  00 00 00 00  
0039B3r 2  00 00 00 00  
0039EBr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0039EFr 2  00 00 00 00  
0039F3r 2  00 00 00 00  
003A2Br 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003A2Fr 2  00 00 00 00  
003A33r 2  00 00 00 00  
003A6Br 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003A6Fr 2  00 00 00 00  
003A73r 2  00 00 00 00  
003AABr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003AAFr 2  00 00 00 00  
003AB3r 2  00 00 00 00  
003AEBr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003AEFr 2  00 00 00 00  
003AF3r 2  00 00 00 00  
003B2Br 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003B2Fr 2  00 00 00 00  
003B33r 2  00 00 00 00  
003B6Br 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003B6Fr 2  00 00 00 00  
003B73r 2  00 00 00 00  
003BABr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003BAFr 2  00 00 00 00  
003BB3r 2  00 00 00 00  
003BEBr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003BEFr 2  00 00 00 00  
003BF3r 2  00 00 00 00  
003C2Br 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003C2Fr 2  00 00 00 00  
003C33r 2  00 00 00 00  
003C6Br 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003C6Fr 2  00 00 00 00  
003C73r 2  00 00 00 00  
003CABr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003CAFr 2  00 00 00 00  
003CB3r 2  00 00 00 00  
003CEBr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003CEFr 2  00 00 00 00  
003CF3r 2  00 00 00 00  
003D2Br 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003D2Fr 2  00 00 00 00  
003D33r 2  00 00 00 00  
003D6Br 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003D6Fr 2  00 00 00 00  
003D73r 2  00 00 00 00  
003DABr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003DAFr 2  00 00 00 00  
003DB3r 2  00 00 00 00  
003DEBr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003DEFr 2  00 00 00 00  
003DF3r 2  00 00 00 00  
003E2Br 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003E2Fr 2  00 00 00 00  
003E33r 2  00 00 00 00  
003E6Br 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003E6Fr 2  00 00 00 00  
003E73r 2  00 00 00 00  
003EABr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003EAFr 2  00 00 00 00  
003EB3r 2  00 00 00 00  
003EEBr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003EEFr 2  00 00 00 00  
003EF3r 2  00 00 00 00  
003F2Br 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003F2Fr 2  00 00 00 00  
003F33r 2  00 00 00 00  
003F6Br 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003F6Fr 2  00 00 00 00  
003F73r 2  00 00 00 00  
003FABr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003FAFr 2  00 00 00 00  
003FB3r 2  00 00 00 00  
003FEBr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003FEFr 2  00 00 00 00  
003FF3r 2  00 00 00 00  
00402Br 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00402Fr 2  00 00 00 00  
004033r 2  00 00 00 00  
00406Br 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00406Fr 2  00 00 00 00  
004073r 2  00 00 00 00  
0040ABr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0040AFr 2  00 00 00 00  
0040B3r 2  00 00 00 00  
0040EBr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0040EFr 2  00 00 00 00  
0040F3r 2  00 00 00 00  
00412Br 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00412Fr 2  00 00 00 00  
004133r 2  00 00 00 00  
00416Br 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00416Fr 2  00 00 00 00  
004173r 2  00 00 00 00  
0041ABr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0041AFr 2  00 00 00 00  
0041B3r 2  00 00 00 00  
0041EBr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0041EFr 2  00 00 00 00  
0041F3r 2  00 00 00 00  
00422Br 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00422Fr 2  00 00 00 00  
004233r 2  00 00 00 00  
00426Br 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00426Fr 2  00 00 00 00  
004273r 2  00 00 00 00  
0042ABr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0042AFr 2  00 00 00 00  
0042B3r 2  00 00 00 00  
0042EBr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0042EFr 2  00 00 00 00  
0042F3r 2  00 00 00 00  
00432Br 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$1,$1,$1,$1,$1,$1,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00432Fr 2  00 00 00 00  
004333r 2  00 00 01 01  
00436Br 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00436Fr 2  00 00 00 00  
004373r 2  00 00 00 00  
0043ABr 2  00 00 00 00  	.byte $0,$0,$0,$0,$1,$1,$1,$1,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0043AFr 2  01 01 01 01  
0043B3r 2  00 00 00 00  
0043EBr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0043EFr 2  00 00 00 00  
0043F3r 2  00 00 00 00  
00442Br 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00442Fr 2  00 00 00 00  
004433r 2  00 00 00 00  
00446Br 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00446Fr 2  00 00 00 00  
004473r 2  00 00 00 00  
0044ABr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0044AFr 2  00 00 00 00  
0044B3r 2  00 00 00 00  
0044EBr 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0044EFr 2  00 00 00 00  
0044F3r 2  00 00 00 00  
00452Br 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00452Fr 2  00 00 00 00  
004533r 2  00 00 00 00  
00456Br 2  01 01 01 01  	.byte $1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1
00456Fr 2  01 01 01 01  
004573r 2  01 01 01 01  
0045ABr 2  01 01 01 01  	.byte $1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1
0045AFr 2  01 01 01 01  
0045B3r 2  01 01 01 01  
0045EBr 2  01 01 01 01  	.byte $1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1
0045EFr 2  01 01 01 01  
0045F3r 2  01 01 01 01  
00462Br 2               
00462Br 2               BG2Tilemap:
00462Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00462Fr 2  00 00 00 00  
004633r 2  00 00 00 00  
00466Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00466Fr 2  00 00 00 00  
004673r 2  00 00 00 00  
0046ABr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0046AFr 2  00 00 00 00  
0046B3r 2  00 00 00 00  
0046EBr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0046EFr 2  00 00 00 00  
0046F3r 2  00 00 00 00  
00472Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00472Fr 2  00 00 00 00  
004733r 2  00 00 00 00  
00476Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00476Fr 2  00 00 00 00  
004773r 2  00 00 00 00  
0047ABr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0047AFr 2  00 00 00 00  
0047B3r 2  00 00 00 00  
0047EBr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0047EFr 2  00 00 00 00  
0047F3r 2  00 00 00 00  
00482Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00482Fr 2  00 00 00 00  
004833r 2  00 00 00 00  
00486Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00486Fr 2  00 00 00 00  
004873r 2  00 00 00 00  
0048ABr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0048AFr 2  00 00 00 00  
0048B3r 2  00 00 00 00  
0048EBr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0048EFr 2  00 00 00 00  
0048F3r 2  00 00 00 00  
00492Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00492Fr 2  00 00 00 00  
004933r 2  00 00 00 00  
00496Br 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00496Fr 2  00 00 00 00  
004973r 2  00 00 00 00  
0049ABr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0049AFr 2  00 00 00 00  
0049B3r 2  00 00 00 00  
0049EBr 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0049EFr 2  00 00 00 00  
0049F3r 2  00 00 00 00  
004A2Br 2  01 00 02 00  	.word $1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4
004A2Fr 2  03 00 04 00  
004A33r 2  01 00 02 00  
004A6Br 2  05 00 06 00  	.word $5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8
004A6Fr 2  07 00 08 00  
004A73r 2  05 00 06 00  
004AABr 2  01 00 02 00  	.word $1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4
004AAFr 2  03 00 04 00  
004AB3r 2  01 00 02 00  
004AEBr 2  05 00 06 00  	.word $5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8
004AEFr 2  07 00 08 00  
004AF3r 2  05 00 06 00  
004B2Br 2  01 00 02 00  	.word $1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4
004B2Fr 2  03 00 04 00  
004B33r 2  01 00 02 00  
004B6Br 2  05 00 06 00  	.word $5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8
004B6Fr 2  07 00 08 00  
004B73r 2  05 00 06 00  
004BABr 2  01 00 02 00  	.word $1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4
004BAFr 2  03 00 04 00  
004BB3r 2  01 00 02 00  
004BEBr 2  05 00 06 00  	.word $5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8
004BEFr 2  07 00 08 00  
004BF3r 2  05 00 06 00  
004C2Br 2  01 00 02 00  	.word $1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4
004C2Fr 2  03 00 04 00  
004C33r 2  01 00 02 00  
004C6Br 2  05 00 06 00  	.word $5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8
004C6Fr 2  07 00 08 00  
004C73r 2  05 00 06 00  
004CABr 2  01 00 02 00  	.word $1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4
004CAFr 2  03 00 04 00  
004CB3r 2  01 00 02 00  
004CEBr 2  05 00 06 00  	.word $5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8
004CEFr 2  07 00 08 00  
004CF3r 2  05 00 06 00  
004D2Br 2  01 00 02 00  	.word $1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4
004D2Fr 2  03 00 04 00  
004D33r 2  01 00 02 00  
004D6Br 2  05 00 06 00  	.word $5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8
004D6Fr 2  07 00 08 00  
004D73r 2  05 00 06 00  
004DABr 2  01 00 02 00  	.word $1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4
004DAFr 2  03 00 04 00  
004DB3r 2  01 00 02 00  
004DEBr 2  05 00 06 00  	.word $5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8
004DEFr 2  07 00 08 00  
004DF3r 2  05 00 06 00  
004E2Br 2               
004E2Br 2               
004E2Br 1               .include "larry.asm"
004E2Br 2               .macro HandleLarry xPos, yPos, tileNum
004E2Br 2               ;parameters: pointer to xpos, pointer to ypos, pointer to tile number
004E2Br 2               	lda xPos
004E2Br 2               	sta $4
004E2Br 2               	lda yPos
004E2Br 2               	sta $5
004E2Br 2               	lda tileNum
004E2Br 2               	sta $6
004E2Br 2               	LoadSprite #0, $4, $5, $6, playerAttrs, #0, #0
004E2Br 2               	lda $5 ;add $10 to sprite y pos because second 16x16 sprite is directly below first
004E2Br 2               	clc
004E2Br 2               	adc #$10
004E2Br 2               	sta $5
004E2Br 2               
004E2Br 2               	lda $6
004E2Br 2               	clc
004E2Br 2               	adc #LARRY_OFFSET
004E2Br 2               	sta $6
004E2Br 2               	LoadSprite #1, $4, $5, $6, playerAttrs, #0, #0
004E2Br 2               	ldx $7
004E2Br 2               	ClearMemRange $0, #$7
004E2Br 2               .endmacro
004E2Br 2               
004E2Br 2               .macro ClearMemRange start, range
004E2Br 2               ;start-address to start clearing
004E2Br 2               ;range-num of bytes to clear
004E2Br 2               .scope
004E2Br 2               	ldx #$0
004E2Br 2               	@loop:
004E2Br 2               	stz start,x
004E2Br 2               	inx
004E2Br 2               	cpx range
004E2Br 2               	bne @loop
004E2Br 2               .endscope
004E2Br 2               .endmacro
004E2Br 2               
004E2Br 2               ;sprite constants
004E2Br 2               .define LARRY_ACCEL $1
004E2Br 2               .define MAX_LARRY_SPEED $6
004E2Br 2               .define MAX_LARRY_JUMP_HEIGHT $10
004E2Br 2               .define MAX_LARRY_FALL_SPEED $8
004E2Br 2               ;various movement states
004E2Br 2               .define STATE_NONE $0
004E2Br 2               .define STATE_RIGHT_PRESSED $1
004E2Br 2               .define STATE_RIGHT_RELEASED $2
004E2Br 2               .define STATE_LEFT_PRESSED $3
004E2Br 2               .define STATE_LEFT_RELEASED $4
004E2Br 2               
004E2Br 2               ;player states
004E2Br 2               .define STATE_GROUND $0
004E2Br 2               .define STATE_JUMP_RISE $1
004E2Br 2               .define STATE_JUMP_FALL $2
004E2Br 2               
004E2Br 2               SetPlayerVals:
004E2Br 2               	;set "absolute" player x and y values
004E2Br 2  C2 20        	a16
004E2Dr 2  A5 18        	lda spriteX
004E2Fr 2  18           	clc
004E30r 2  65 10        	adc scrollX
004E32r 2  29 FF 01     	and #$1ff ;snes background = 512 pixels, or $200 binary
004E35r 2  85 1C        	sta playerX
004E37r 2  A5 1A        	lda spriteY
004E39r 2  18           	clc
004E3Ar 2  65 12        	adc scrollY
004E3Cr 2  29 FF 01     	and #$1ff
004E3Fr 2  38           	sec
004E40r 2  E9 05 00     	sbc #$5 ;account for sprite's blank space
004E43r 2  85 1E        	sta playerY
004E45r 2  A5 1C        	lda playerX ; reduce the position to a $3f range
004E47r 2  6A           	ror a ;divide by 8
004E48r 2  6A           	ror a
004E49r 2  6A           	ror a
004E4Ar 2  29 3F 00     	and #$3f
004E4Dr 2  85 00        	sta $0
004E4Fr 2  A5 1E        	lda playerY ;same "formula" as for x, but also needs to be shifted left 6 times
004E51r 2  2A           	rol a
004E52r 2  2A           	rol a
004E53r 2  2A           	rol a
004E54r 2  29 C0 0F     	and #$fc0 ;max possible value
004E57r 2  18           	clc
004E58r 2  65 00        	adc $0
004E5Ar 2  85 20        	sta playerTileOffset
004E5Cr 2  E2 20        	a8
004E5Er 2  A2 02 00     	ldx #$2
004E61r 2  20 rr rr     	jsr ClearMem
004E64r 2  60           	rts
004E65r 2               
004E65r 2               CheckCollisionR: ;sprite is 16x32 or 2x4 tiles
004E65r 2  C2 20        	a16
004E67r 2  A5 20        	lda playerTileOffset ;top right
004E69r 2  1A           	ina
004E6Ar 2  AA           	tax
004E6Br 2  BD rr rr     	lda CollisionMap, x
004E6Er 2  85 23        	sta collision
004E70r 2  8A           	txa ;load offset back into a
004E71r 2  18           	clc
004E72r 2  69 80 00     	adc #$80 ;$40 tiles per row
004E75r 2  AA           	tax
004E76r 2  BD rr rr     	lda CollisionMap, x
004E79r 2  05 23        	ora collision ;if top or bottom collision
004E7Br 2  85 23        	sta collision
004E7Dr 2  E2 20        	a8
004E7Fr 2  60           	rts
004E80r 2               
004E80r 2               CheckCollisionL:
004E80r 2  C2 20        	a16
004E82r 2  A6 20        	ldx playerTileOffset ;top left
004E84r 2  BD rr rr     	lda CollisionMap, x
004E87r 2  85 23        	sta collision
004E89r 2  8A           	txa
004E8Ar 2  18           	clc
004E8Br 2  69 80 00     	adc #$80 ;bottom left
004E8Er 2  AA           	tax
004E8Fr 2  BD rr rr     	lda CollisionMap, x
004E92r 2  05 23        	ora collision
004E94r 2  85 23        	sta collision
004E96r 2  E2 20        	a8
004E98r 2  60           	rts
004E99r 2               
004E99r 2               CheckCollisionB: ;checks if block below character is solid or not
004E99r 2  C2 20        	a16
004E9Br 2  A5 20        	lda playerTileOffset
004E9Dr 2  18           	clc
004E9Er 2  69 40 01     	adc #$140
004EA1r 2  AA           	tax
004EA2r 2  BD rr rr     	lda CollisionMap, x ;bottom left
004EA5r 2  85 23        	sta collision
004EA7r 2  E8           	inx
004EA8r 2  BD rr rr     	lda CollisionMap, x ;bottom right
004EABr 2  05 23        	ora collision
004EADr 2  85 23        	sta collision
004EAFr 2  E2 20        	a8
004EB1r 2  60           	rts
004EB2r 2               
004EB2r 2               
004EB2r 1               .include "sound.asm"
004EB2r 2               .segment "BANK1"
000000r 2               
000000r 2               SPCPrg:
000000r 2  20 CD EF BD  	.incbin ".\sound\sound.bin"
000004r 2  E8 2C C4 F2  
000008r 2  E8 00 C4 F3  
003ACAr 2               SPCPrgEnd:
003ACAr 2               
003ACAr 2               SPC_LENGTH = SPCPrgEnd-SPCPrg
003ACAr 2               NUM_SPC_BLOCKS = SPC_LENGTH/256
003ACAr 2               .define copyAddr $0 ;address to copy to (word)
003ACAr 2               .define copyIndex $2 ;index within one block (byte)
003ACAr 2               .define blockIndex $3 ;what block's being copied (byte)
003ACAr 2               .define kick $4 ;current "kick" val
003ACAr 2               
003ACAr 2               LoadSPC:
003ACAr 2  8B           	phb
003ACBr 2  08           	php
003ACCr 2               
003ACCr 2  C2 20        	a16
003ACEr 2  A9 3A 00     	lda #NUM_SPC_BLOCKS
003AD1r 2  A9 00 02     	lda #$200
003AD4r 2  85 00        	sta copyAddr ;set up copy address
003AD6r 2  64 03        	stz blockIndex
003AD8r 2  E2 20        	a8
003ADAr 2  A9 CC        	lda #$cc ;starting kick val
003ADCr 2  85 04        	sta kick
003ADEr 2               
003ADEr 2  9C 00 42     	stz $4200
003AE1r 2  78           	sei ;disable interrupts, this is kinda time sensitive
003AE2r 2               WaitForInit:
003AE2r 2  AD 40 21     	lda $2140
003AE5r 2  C9 AA        	cmp #$aa ;spc sets reg 0 to aa after it inits
003AE7r 2  D0 F9        	bne WaitForInit
003AE9r 2               
003AE9r 2               CopyLoop:
003AE9r 2  C2 20        	a16
003AEBr 2  A5 00        	lda copyAddr
003AEDr 2  8D 42 21     	sta $2142 ;write destination address
003AF0r 2  18           	clc
003AF1r 2  69 00 01     	adc #$100
003AF4r 2  85 00        	sta copyAddr
003AF6r 2  E2 20        	a8
003AF8r 2               
003AF8r 2  A9 01        	lda #$1
003AFAr 2  8D 41 21     	sta $2141 ;write command
003AFDr 2  A5 04        	lda kick
003AFFr 2  8D 40 21     	sta $2140 ;"enable"
003B02r 2               WaitForAck: ;spc returns kick when it's ready to write
003B02r 2  AD 40 21     	lda $2140
003B05r 2  C5 04        	cmp kick
003B07r 2  D0 F9        	bne WaitForAck
003B09r 2               
003B09r 2               CopyBlock: ;copies blocks of 256 bytes
003B09r 2  C2 20        	a16
003B0Br 2  A5 02        	lda copyIndex ;because blockIndex is next to copyIndex in memory hopefully
003B0Dr 2  AA           	tax	;this will get the address (look at me, so smart for making blocks 256 bytes)
003B0Er 2  E2 20        	a8
003B10r 2  BF rr rr rr  	lda f:SPCPrg,x ;specify bank
003B14r 2  8D 41 21     	sta $2141
003B17r 2  A5 02        	lda copyIndex
003B19r 2  8D 40 21     	sta $2140
003B1Cr 2               
003B1Cr 2               WaitReceive:
003B1Cr 2  CD 40 21     	cmp $2140 ;spc mirrors count after receiving data
003B1Fr 2  D0 FB        	bne WaitReceive
003B21r 2  1A           	inc a
003B22r 2  85 02        	sta copyIndex
003B24r 2  C9 00        	cmp #$00 ;256 bytes in a block
003B26r 2  D0 E1        	bne CopyBlock
003B28r 2               
003B28r 2  E6 03        	inc blockIndex
003B2Ar 2  A5 04        	lda kick
003B2Cr 2  18           	clc
003B2Dr 2  69 02        	adc #$2
003B2Fr 2  29 7F        	and #$7f ;kick=previous kick "+2 to 127" -ninty
003B31r 2  85 04        	sta kick
003B33r 2  A5 03        	lda blockIndex
003B35r 2  C9 3A        	cmp #NUM_SPC_BLOCKS
003B37r 2  D0 B0        	bne CopyLoop
003B39r 2               
003B39r 2  C2 20        	a16
003B3Br 2  A9 00 02     	lda #$200 ;entry point
003B3Er 2  8D 42 21     	sta $2142
003B41r 2  E2 20        	a8
003B43r 2  9C 41 21     	stz $2141 ;start command
003B46r 2  A5 04        	lda kick
003B48r 2  8D 40 21     	sta $2140
003B4Br 2  58           	cli ;enable interrupts
003B4Cr 2  A2 06 00     	ldx #$6
003B4Fr 2               @ClrLoop:
003B4Fr 2  74 00        	stz $0,x
003B51r 2  CA           	dex
003B52r 2  D0 FB        	bne @ClrLoop
003B54r 2  28           	plp
003B55r 2  AB           	plb
003B56r 2  6B           	rtl
003B57r 2               
003B57r 1               
003B57r 1               .segment "CODE"
004EB2r 1               Reset:
004EB2r 1  78 18 FB C2  	InitSNES
004EB6r 1  38 A2 FF 1F  
004EBAr 1  9A 22 rr rr  
004EC1r 1  22 rr rr rr  	jsl LoadSPC
004EC5r 1  A9 00 8D 21  	LoadPalette BGPalette, 0, $10
004EC9r 1  21 A9 rr A2  
004ECDr 1  rr rr A0 20  
004ED5r 1  A9 10 8D 21  	LoadPalette BG2Palette, $10, $10
004ED9r 1  21 A9 rr A2  
004EDDr 1  rr rr A0 20  
004EE5r 1  A9 80 8D 21      LoadPalette SpritePalette, $80, $F
004EE9r 1  21 A9 rr A2  
004EEDr 1  rr rr A0 1E  
004EF5r 1               	; Load Tile data to VRAM
004EF5r 1  A9 80 8D 15      LoadBlockToVRAM BGTiles, $2000, $C0
004EF9r 1  21 A2 00 20  
004EFDr 1  8E 16 21 A9  
004F0Br 1  A9 80 8D 15  	LoadBlockToVRAM BG2Tiles, $5000, $200 ;8 tiles, 4bpp
004F0Fr 1  21 A2 00 50  
004F13r 1  8E 16 21 A9  
004F21r 1  A9 80 8D 15  	LoadBlockToVRAM LarryTiles, $6000, $800
004F25r 1  21 A2 00 60  
004F29r 1  8E 16 21 A9  
004F37r 1  A9 80 8D 15  	LoadBlockToVRAM BGTilemap, $0000, $2000
004F3Br 1  21 A2 00 00  
004F3Fr 1  8E 16 21 A9  
004F4Dr 1  A9 80 8D 15  	LoadBlockToVRAM BG2Tilemap, $4000, $800
004F51r 1  21 A2 00 40  
004F55r 1  8E 16 21 A9  
004F63r 1  A2 rr rr 8E  	LoadBlockToWRAM BGTilemap, TilemapMirror, $2000
004F67r 1  02 43 A9 rr  
004F6Br 1  8D 04 43 A2  
004F8Ar 1                   ; Setup Video modes and other stuff, then turn on the screen
004F8Ar 1  20 rr rr         jsr SetupVideo
004F8Dr 1               
004F8Dr 1  20 rr rr     	jsr InitSprites
004F90r 1  A9 81        	lda #$81
004F92r 1  8D 00 42     	sta $4200 ;enable vblank interrupt and joypad read
004F95r 1  A9 00        	lda #$00 ;idk why but sometimes spc writes crash the cpu without this line, at least on no$sns
004F97r 1               	;did a bit more debugging, looks like it's a conflict b/t loading larrytiles and bgtilemap to vram
004F97r 1  C2 20        	a16
004F99r 1  A9 1B 01     	lda #$11b
004F9Cr 1  85 12        	sta scrollY
004F9Er 1  E2 20        	sep #$20
004FA0r 1  E2 20        	a8
004FA2r 1  A9 50        	lda #$50
004FA4r 1  85 18        	sta spriteX
004FA6r 1               
004FA6r 1               .define GROUND_Y $B0
004FA6r 1  A9 B0        	lda #GROUND_Y
004FA8r 1  85 1A        	sta spriteY
004FAAr 1               
004FAAr 1  A9 30        	lda #$30 ;max sprite priority
004FACr 1  85 26        	sta playerAttrs
004FAEr 1               
004FAEr 1               
004FAEr 1               MainLoop:
004FAEr 1  AD 19 42     	lda $4219 ;p1 joypad read address ;if yes but it is no longer pressed, state=RIGHT_RELEASED
004FB1r 1  89 01        	bit #JOY_RIGHT
004FB3r 1  F0 0F        	beq AssignRightReleased ;if it is still being pressed, state=RIGHT_PRESSED
004FB5r 1  A5 16        	lda playerHSpeed
004FB7r 1  D0 15        	bne EndRightAssign
004FB9r 1  A9 01        	lda #STATE_RIGHT_PRESSED
004FBBr 1  85 29        	sta movementState
004FBDr 1  A9 30        	lda #$30 ;max sprite priority
004FBFr 1  85 26        	sta playerAttrs
004FC1r 1  4C rr rr     	jmp EndRightAssign
004FC4r 1               
004FC4r 1               AssignRightReleased:
004FC4r 1  A5 29        	lda movementState
004FC6r 1  C9 01        	cmp #STATE_RIGHT_PRESSED ;was right pressed last frame?
004FC8r 1  D0 04        	bne EndRightAssign ;if no, skip
004FCAr 1  A9 02        	lda #STATE_RIGHT_RELEASED
004FCCr 1  85 29        	sta movementState
004FCEr 1               
004FCEr 1               EndRightAssign:
004FCEr 1               
004FCEr 1  AD 19 42     	lda $4219 ;p1 joypad read address ;if yes but it is no longer pressed, state=RIGHT_RELEASED
004FD1r 1  89 02        	bit #JOY_LEFT
004FD3r 1  F0 0F        	beq AssignLeftReleased ;if it is still being pressed, state=RIGHT_PRESSED
004FD5r 1  A5 16        	lda playerHSpeed
004FD7r 1  D0 15        	bne EndLeftAssign
004FD9r 1  A9 03        	lda #STATE_LEFT_PRESSED
004FDBr 1  85 29        	sta movementState
004FDDr 1  A9 70        	lda #$70 ;max sprite priority, mirrored
004FDFr 1  85 26        	sta playerAttrs
004FE1r 1  4C rr rr     	jmp EndLeftAssign
004FE4r 1               
004FE4r 1               AssignLeftReleased:
004FE4r 1  A5 29        	lda movementState
004FE6r 1  C9 03        	cmp #STATE_LEFT_PRESSED ;was right pressed last frame?
004FE8r 1  D0 04        	bne EndLeftAssign ;if no, skip
004FEAr 1  A9 04        	lda #STATE_LEFT_RELEASED
004FECr 1  85 29        	sta movementState
004FEEr 1               
004FEEr 1               EndLeftAssign:
004FEEr 1               
004FEEr 1               ;if player is on ground, assign jump state
004FEEr 1  AD 19 42     	lda $4219
004FF1r 1  89 80        	bit #JOY_B
004FF3r 1  F0 0E        	beq JumpNotPressed
004FF5r 1  A5 28        	lda playerState
004FF7r 1  C9 00        	cmp #STATE_GROUND
004FF9r 1  D0 08        	bne JumpNotPressed
004FFBr 1  A9 01        	lda #STATE_JUMP_RISE
004FFDr 1  85 28        	sta playerState
004FFFr 1  A9 10        	lda #MAX_LARRY_JUMP_HEIGHT
005001r 1  85 27        	sta playerVSpeed
005003r 1               JumpNotPressed:
005003r 1               
005003r 1               EndStateAssigns:
005003r 1               
005003r 1               
005003r 1               ;accelerate player until reaches max speed
005003r 1  A5 29        	lda movementState
005005r 1  C9 01        	cmp #STATE_RIGHT_PRESSED
005007r 1  D0 19        	bne RightNotPressed
005009r 1               
005009r 1  A5 16        	lda playerHSpeed
00500Br 1  C9 06        	cmp #MAX_LARRY_SPEED
00500Dr 1  F0 05        	beq @DontAdd
00500Fr 1  18           	clc
005010r 1  69 01        	adc #LARRY_ACCEL
005012r 1  85 16        	sta playerHSpeed
005014r 1               @DontAdd:
005014r 1  C2 20        	a16
005016r 1  A5 10        	lda scrollX
005018r 1  18           	clc
005019r 1  65 16        	adc playerHSpeed
00501Br 1  29 FF 03     	and #$3ff ;limit to 10 bits
00501Er 1  85 10        	sta scrollX
005020r 1  E2 20        	a8
005022r 1               RightNotPressed:
005022r 1               
005022r 1               ;decelerate player right until they stop
005022r 1  A5 29        	lda movementState
005024r 1  C9 02        	cmp #STATE_RIGHT_RELEASED
005026r 1  D0 20        	bne RightNotReleased
005028r 1               
005028r 1  A5 16        	lda playerHSpeed
00502Ar 1  C9 00        	cmp #$0
00502Cr 1  D0 07        	bne @Subtract
00502Er 1  A9 00        	lda #STATE_NONE
005030r 1  85 29        	sta movementState
005032r 1  4C rr rr     	jmp RightNotReleased
005035r 1               @Subtract:
005035r 1  38           	sec
005036r 1  E9 01        	sbc #LARRY_ACCEL
005038r 1  85 16        	sta playerHSpeed
00503Ar 1  C2 20        	a16
00503Cr 1  A5 10        	lda scrollX
00503Er 1  18           	clc
00503Fr 1  65 16        	adc playerHSpeed
005041r 1  29 FF 03     	and #$3ff ;limit to 10 bits
005044r 1  85 10        	sta scrollX
005046r 1  E2 20        	a8
005048r 1               RightNotReleased:
005048r 1               
005048r 1               ;accelerate player until they hit max speed
005048r 1  A5 29        	lda movementState
00504Ar 1  C9 03        	cmp #STATE_LEFT_PRESSED
00504Cr 1  D0 19        	bne LeftNotPressed
00504Er 1               
00504Er 1  A5 16        	lda playerHSpeed
005050r 1  C9 06        	cmp #MAX_LARRY_SPEED
005052r 1  F0 05        	beq @DontAdd
005054r 1  18           	clc
005055r 1  69 01        	adc #LARRY_ACCEL
005057r 1  85 16        	sta playerHSpeed
005059r 1               @DontAdd:
005059r 1  C2 20        	a16
00505Br 1  A5 10        	lda scrollX
00505Dr 1  38           	sec
00505Er 1  E5 16        	sbc playerHSpeed
005060r 1  29 FF 03     	and #$3ff
005063r 1  85 10        	sta scrollX
005065r 1  E2 20        	a8
005067r 1               LeftNotPressed:
005067r 1               
005067r 1               ;decelerate player until they stop
005067r 1  A5 29        	lda movementState
005069r 1  C9 04        	cmp #STATE_LEFT_RELEASED
00506Br 1  D0 20        	bne LeftNotReleased
00506Dr 1               
00506Dr 1  A5 16        	lda playerHSpeed
00506Fr 1  C9 00        	cmp #$0
005071r 1  D0 07        	bne @Subtract
005073r 1  A9 00        	lda #STATE_NONE
005075r 1  85 29        	sta movementState
005077r 1  4C rr rr     	jmp LeftNotReleased
00507Ar 1               @Subtract:
00507Ar 1  38           	sec
00507Br 1  E9 01        	sbc #LARRY_ACCEL
00507Dr 1  85 16        	sta playerHSpeed
00507Fr 1  C2 20        	a16
005081r 1  A5 10        	lda scrollX
005083r 1  38           	sec
005084r 1  E5 16        	sbc playerHSpeed
005086r 1  29 FF 03     	and #$3ff
005089r 1  85 10        	sta scrollX
00508Br 1  E2 20        	a8
00508Dr 1               LeftNotReleased:
00508Dr 1               
00508Dr 1               ;animate player based on speed
00508Dr 1  A5 29        	lda movementState
00508Fr 1  C9 00        	cmp #STATE_NONE
005091r 1  D0 07        	bne DontStandStill
005093r 1  A9 00        	lda #$0
005095r 1  85 22        	sta playerTileNum
005097r 1  4C rr rr     	jmp DontAnimate
00509Ar 1               DontStandStill:
00509Ar 1               
00509Ar 1  A5 22        	lda playerTileNum
00509Cr 1  1A           	ina
00509Dr 1  1A           	ina
00509Er 1  85 22        	sta playerTileNum
0050A0r 1  C9 0E        	cmp #NUM_LARRY_TILES
0050A2r 1  D0 06        	bne DontAnimate
0050A4r 1  A9 02        	lda #$2
0050A6r 1  85 22        	sta playerTileNum
0050A8r 1  64 25        	stz playerAnimDelay
0050AAr 1               DontAnimate:
0050AAr 1               
0050AAr 1               	;if player isn't above solid surface, fall
0050AAr 1  A5 28        	lda playerState
0050ACr 1  C9 00        	cmp #STATE_GROUND
0050AEr 1  D0 0C        	bne DontApplyGravity
0050B0r 1  20 rr rr     	jsr SetPlayerVals
0050B3r 1  20 rr rr     	jsr CheckCollisionB
0050B6r 1  D0 04        	bne DontApplyGravity
0050B8r 1  A9 02        	lda #STATE_JUMP_FALL
0050BAr 1  85 28        	sta playerState
0050BCr 1               DontApplyGravity:
0050BCr 1               
0050BCr 1               ;1. subtract gravity accel value until initial speed is 0
0050BCr 1               ;2. set state to fall
0050BCr 1               
0050BCr 1  A5 28        	lda playerState
0050BEr 1  C9 01        	cmp #STATE_JUMP_RISE
0050C0r 1  D0 17        	bne DontRise
0050C2r 1  A5 27        	lda playerVSpeed
0050C4r 1  D0 07        	bne @SubSpeed ;branch if player v speed isn't 0
0050C6r 1  A9 02        	lda #STATE_JUMP_FALL
0050C8r 1  85 28        	sta playerState
0050CAr 1  4C rr rr     	jmp DontRise
0050CDr 1               @SubSpeed:
0050CDr 1  38           	sec
0050CEr 1  E9 01        	sbc #LARRY_ACCEL
0050D0r 1  85 27        	sta playerVSpeed
0050D2r 1  A5 1A        	lda spriteY
0050D4r 1  38           	sec
0050D5r 1  E5 27        	sbc playerVSpeed
0050D7r 1  85 1A        	sta spriteY
0050D9r 1               DontRise:
0050D9r 1               
0050D9r 1               ;3. add gravity accel value until player touches ground
0050D9r 1               ;4. set state to ground
0050D9r 1               
0050D9r 1  A5 28        	lda playerState
0050DBr 1  C9 02        	cmp #STATE_JUMP_FALL
0050DDr 1  D0 2F        	bne DontFall
0050DFr 1  20 rr rr     	jsr SetPlayerVals ;have player fall until they're inside the ground
0050E2r 1  20 rr rr     	jsr CheckCollisionB
0050E5r 1  F0 15        	beq @AddSpeed
0050E7r 1               @EjectLoop: ;eject player from the ground
0050E7r 1  C6 1A        	dec spriteY
0050E9r 1  20 rr rr     	jsr SetPlayerVals
0050ECr 1  20 rr rr     	jsr CheckCollisionB
0050EFr 1  D0 F6        	bne @EjectLoop
0050F1r 1  E6 1A        	inc spriteY ;insert player one pixel into the ground so they won't be constantly falling
0050F3r 1  A9 00        	lda #STATE_GROUND
0050F5r 1  85 28        	sta playerState
0050F7r 1  64 27        	stz playerVSpeed
0050F9r 1  4C rr rr     	jmp DontFall
0050FCr 1               @AddSpeed:
0050FCr 1  A5 27        	lda playerVSpeed
0050FEr 1  C9 08        	cmp #MAX_LARRY_FALL_SPEED
005100r 1  B0 05        	bcs @DontAdd
005102r 1  18           	clc
005103r 1  69 01        	adc #LARRY_ACCEL
005105r 1  85 27        	sta playerVSpeed
005107r 1               @DontAdd:
005107r 1  A5 1A        	lda spriteY
005109r 1  18           	clc
00510Ar 1  65 27        	adc playerVSpeed
00510Cr 1  85 1A        	sta spriteY
00510Er 1               DontFall:
00510Er 1               
00510Er 1  20 rr rr     	jsr SetPlayerVals
005111r 1  A5 29        	lda movementState
005113r 1  F0 2C        	beq EndCollisionDetect ;if player's not moving, don't bather w/ wall collision detection
005115r 1  C9 03        	cmp #STATE_LEFT_PRESSED
005117r 1  B0 14        	bcs LCollision ;if state is left pressed or left released, branch
005119r 1  20 rr rr     	jsr CheckCollisionR
00511Cr 1  F0 23        	beq EndCollisionDetect
00511Er 1               @EjectLoop:
00511Er 1  C6 10        	dec scrollX
005120r 1  20 rr rr     	jsr SetPlayerVals
005123r 1  20 rr rr     	jsr CheckCollisionR
005126r 1  D0 F6        	bne @EjectLoop ;eject player from the wall until they're out
005128r 1  64 16        	stz playerHSpeed ;if player needs to be ejected, set speed to 0
00512Ar 1  4C rr rr     	jmp EndCollisionDetect
00512Dr 1               LCollision:
00512Dr 1  20 rr rr     	jsr CheckCollisionL
005130r 1  F0 22        	beq SubtractSpeed
005132r 1               @EjectLoop:
005132r 1  E6 10        	inc scrollX
005134r 1  20 rr rr     	jsr SetPlayerVals
005137r 1  20 rr rr     	jsr CheckCollisionL
00513Ar 1  D0 F6        	bne @EjectLoop
00513Cr 1  64 16        	stz playerHSpeed
00513Er 1  4C rr rr     	jmp SubtractSpeed
005141r 1               EndCollisionDetect:
005141r 1               	;calculate bg2's scroll
005141r 1  C2 20        	a16
005143r 1  A5 16        	lda playerHSpeed
005145r 1  6A           	ror
005146r 1  85 00        	sta $0
005148r 1  A5 14        	lda scroll2X
00514Ar 1  18           	clc
00514Br 1  65 00        	adc $0
00514Dr 1  85 14        	sta scroll2X
00514Fr 1  64 00        	stz $0
005151r 1  4C rr rr     	jmp SetupScrollTable
005154r 1               SubtractSpeed:
005154r 1  C2 20        	a16
005156r 1  A5 16        	lda playerHSpeed
005158r 1  6A           	ror
005159r 1  85 00        	sta $0
00515Br 1  A5 14        	lda scroll2X
00515Dr 1  38           	sec
00515Er 1  E5 00        	sbc $0
005160r 1  85 14        	sta scroll2X
005162r 1  64 00        	stz $0
005164r 1               SetupScrollTable:
005164r 1  18           	clc
005165r 1  A5 14        	lda scroll2X
005167r 1  18           	clc
005168r 1  69 05 00     	adc #$5
00516Br 1  85 14        	sta scroll2X
00516Dr 1  6A           	ror
00516Er 1  8D 20 06     	sta BG2ScrollTable
005171r 1  6A           	ror
005172r 1  8D 22 06     	sta BG2ScrollTable+2
005175r 1  6A           	ror
005176r 1  8D 24 06     	sta BG2ScrollTable+4
005179r 1  6A           	ror
00517Ar 1  8D 26 06     	sta BG2ScrollTable+6
00517Dr 1  6A           	ror
00517Er 1  8D 28 06     	sta BG2ScrollTable+8
005181r 1  E2 20        	a8
005183r 1  A5 18 85 04  	HandleLarry spriteX,spriteY,playerTileNum
005187r 1  A5 1A 85 05  
00518Br 1  A5 22 85 06  
00522Cr 1               	; DrawLine #$2, #$11, #$15, #$15
00522Cr 1               
00522Cr 1  CB           	wai
00522Dr 1  4C rr rr     	jmp MainLoop
005230r 1               
005230r 1               VBlank:
005230r 1  08           	php
005231r 1  8B           	phb
005232r 1  0B           	phd
005233r 1  48           	pha ;push regs to stack so if my main loop is ever too long it'll continue without
005234r 1  DA           	phx ;fucking up
005235r 1  5A           	phy
005236r 1  E2 20        	a8
005238r 1  C2 20 A5 10  	SetHScroll scrollX
00523Cr 1  E2 20 8D 0D  
005240r 1  21 EB 8D 0D  
005245r 1  C2 20 A5 12  	SetVScroll scrollY
005249r 1  E2 20 8D 0E  
00524Dr 1  21 EB 8D 0E  
005252r 1               	;DMATilemapMirror #$2
005252r 1  E2 20        	a8
005254r 1  20 rr rr     	jsr DMASpriteMirror
005257r 1  A9 01        	lda #$1 ;start dma transfer on channel 1 (change to 3 if i reenable dmatilemapmirror)
005259r 1  8D 0B 42     	sta $420b
00525Cr 1  20 rr rr     	jsr SetupHDMA
00525Fr 1  AD 10 42     	lda $4210 ;clear vblank flag
005262r 1  7A           	ply
005263r 1  FA           	plx
005264r 1  68           	pla
005265r 1  2B           	pld
005266r 1  AB           	plb
005267r 1  28           	plp
005268r 1               
005268r 1  40           	rti
005269r 1               
005269r 1               SetupVideo:
005269r 1  08               php
00526Ar 1               
00526Ar 1  A9 73        	lda #$73
00526Cr 1  8D 01 21     	sta $2101 ;16x16 or 32x32 sprites, sprite data @ $6000
00526Fr 1  9C 02 21     	stz $2102 ;oam starts at $0 vram
005272r 1  9C 03 21     	stz $2103
005275r 1  A9 01        	lda #$1
005277r 1  8D 05 21         sta $2105           ; Set Video mode 1, 8x8 tiles
00527Ar 1               
00527Ar 1  A9 03            lda #$03           ; Set BG1's Tile Map offset to $0000 (Word address)
00527Cr 1  8D 07 21         sta $2107           ; And the Tile Map size to 64x64
00527Fr 1               
00527Fr 1  A9 40        	lda #$40  ; bg2 tilemap offset: $4000, size: 32x32
005281r 1  8D 08 21     	sta $2108
005284r 1               
005284r 1  A9 52        	lda #$52
005286r 1  8D 0B 21         sta $210B           ; Set BG1's Character VRAM offset to $2000 (word address), BG2's to $5000
005289r 1               
005289r 1  A9 13            lda #$13            ; Enable BG1, BG2, and sprites
00528Br 1  8D 2C 21         sta $212C
00528Er 1               
00528Er 1  A9 FF            lda #$FF ;bg1 horizontal scroll to -1 to fix weird stuff
005290r 1  8D 0E 21         sta $210E
005293r 1  8D 0E 21         sta $210E
005296r 1               
005296r 1  A9 0F            lda #$0F
005298r 1  8D 00 21         sta $2100           ; Turn on screen, full Brightness
00529Br 1               
00529Br 1  28               plp
00529Cr 1  60               rts
00529Dr 1               
00529Dr 1               SetupHDMA:
00529Dr 1  A9 42        	lda #%01000010 ;write twice, indirect mode
00529Fr 1  8D 00 43     	sta $4300
0052A2r 1  A9 0F        	lda #$0f ;write to $210f, bg 2 scroll reg
0052A4r 1  8D 01 43     	sta $4301
0052A7r 1  C2 20        	a16
0052A9r 1  A9 rr rr     	lda #ScrollTable
0052ACr 1  8D 02 43     	sta $4302
0052AFr 1  A9 00 00     	lda #$0
0052B2r 1  8D 04 43     	sta $4304
0052B5r 1  E2 20        	a8
0052B7r 1  A9 7E        	lda #$7e
0052B9r 1  8D 07 43     	sta $4307 ;ram bank to read from for indirect hdma
0052BCr 1               
0052BCr 1  A9 02        	lda #$2 ;write twice, direct mode
0052BEr 1  8D 10 43     	sta $4310
0052C1r 1  A9 21        	lda #$21 ;write to $2121, cgram palette address reg
0052C3r 1  8D 11 43     	sta $4311
0052C6r 1  C2 20        	a16
0052C8r 1  A9 rr rr     	lda #PaletteIndexTable
0052CBr 1  8D 12 43     	sta $4312
0052CEr 1  9C 14 43     	stz $4314
0052D1r 1  E2 20        	a8
0052D3r 1               
0052D3r 1  A9 02        	lda #$2 ;write twice, direct mode
0052D5r 1  8D 20 43     	sta $4320
0052D8r 1  A9 22        	lda #$22 ;write to $2122, cgram palette data reg
0052DAr 1  8D 21 43     	sta $4321
0052DDr 1  C2 20        	a16
0052DFr 1  A9 rr rr     	lda #GradientTable
0052E2r 1  8D 22 43     	sta $4322
0052E5r 1  9C 24 43     	stz $4324
0052E8r 1  E2 20        	a8
0052EAr 1  A9 07        	lda #$7
0052ECr 1  8D 0C 42     	sta $420c ;enable hdma channels 0-2
0052EFr 1  60           	rts
0052F0r 1               
0052F0r 1               
0052F0r 1               ScrollTable:
0052F0r 1  80           	.byte $80
0052F1r 1  00 00        	.word $0000
0052F3r 1  10           	.byte $10
0052F4r 1  28 06        	.word BG2ScrollTable+8
0052F6r 1  10           	.byte $10
0052F7r 1  26 06        	.word BG2ScrollTable+6
0052F9r 1  10           	.byte $10
0052FAr 1  24 06        	.word BG2ScrollTable+4
0052FCr 1  10           	.byte $10
0052FDr 1  22 06        	.word BG2ScrollTable+2
0052FFr 1  10           	.byte $10
005300r 1  20 06        	.word BG2ScrollTable
005302r 1  00           	.byte $00
005303r 1               
005303r 1               PaletteIndexTable: ;needed because palette index auto-increments after every write
005303r 1               ;400 instead of $4 because the endianness of the CGRAM write port is reversed for some reason
005303r 1  0C           	.byte $C
005304r 1  00 04        	.word $400
005306r 1  0C           	.byte $C
005307r 1  00 04        	.word $400
005309r 1  0C           	.byte $C
00530Ar 1  00 04        	.word $400
00530Cr 1  0C           	.byte $C
00530Dr 1  00 04        	.word $400
00530Fr 1  0C           	.byte $C
005310r 1  00 04        	.word $400
005312r 1  0C           	.byte $C
005313r 1  00 04        	.word $400
005315r 1  0C           	.byte $C
005316r 1  00 04        	.word $400
005318r 1  0C           	.byte $C
005319r 1  00 04        	.word $400
00531Br 1  0C           	.byte $C
00531Cr 1  00 04        	.word $400
00531Er 1  0C           	.byte $C
00531Fr 1  00 04        	.word $400
005321r 1  0C           	.byte $C
005322r 1  00 04        	.word $400
005324r 1  00           	.byte $00
005325r 1               
005325r 1               
005325r 1               GradientTable:
005325r 1  0C           	.byte $C
005326r 1  C4 71        	.word $71C4; R:4 G:14 B:28
005328r 1  0C           	.byte $C
005329r 1  C7 5D        	.word $5DC7; R:7 G:14 B:23
00532Br 1  0C           	.byte $C
00532Cr 1  CB 51        	.word $51CB; R:11 G:14 B:20
00532Er 1  0C           	.byte $C
00532Fr 1  CD 49        	.word $49CD; R:13 G:14 B:18
005331r 1  0C           	.byte $C
005332r 1  F1 41        	.word $41F1; R:17 G:15 B:16
005334r 1  0C           	.byte $C
005335r 1  F4 35        	.word $35F4; R:20 G:15 B:13
005337r 1  0C           	.byte $C
005338r 1  F7 2D        	.word $2DF7; R:23 G:15 B:11
00533Ar 1  0C           	.byte $C
00533Br 1  1A 22        	.word $221A; R:26 G:16 B:8
00533Dr 1  0C           	.byte $C
00533Er 1  1C 1A        	.word $1A1C; R:28 G:16 B:6
005340r 1  0C           	.byte $C
005341r 1  1F 12        	.word $121F; R:31 G:16 B:4
005343r 1  0C           	.byte $C
005344r 1  A1 71        	.word $71A1
005346r 1  00           	.byte $00
005347r 1               
005347r 1               DMASpriteMirror:
005347r 1  9C 02 21     	stz $2102		; set OAM address to 0
00534Ar 1  9C 03 21     	stz $2103
00534Dr 1               
00534Dr 1  A0 00 04     	LDY #$0400
005350r 1  8C 00 43     	STY $4300		; CPU -> PPU, auto increment, write 1 reg, $2104 (OAM data write)
005353r 1  A0 00 04     	LDY #$0400
005356r 1  8C 02 43     	STY $4302		; source offset
005359r 1  A0 20 02     	LDY #$0220
00535Cr 1  8C 05 43     	STY $4305		; number of bytes to transfer
00535Fr 1  A9 7E        	LDA #$7E
005361r 1  8D 04 43     	STA $4304		; bank address = $7E  (work RAM)
005364r 1  60           	rts
005365r 1               
005365r 1               
