ca65 V2.16 - Git f19651c
Main file   : main.asm
Current file: main.asm

000000r 1               .include "header.inc"
000000r 2               ; Sets up ROM headers/vectors
000000r 2               
000000r 2               .p816   ; 65816 processor
000000r 2               .i16    ; X/Y are 16 bits
000000r 2               .a8     ; A is 8 bits
000000r 2               
000000r 2               .define ROM_NAME "zoz"
000000r 2               
000000r 2               .segment "HEADER"     ; +$7FE0 in file
000000r 2  7A 6F 7A         .byte ROM_NAME
000003r 2               
000003r 2               .segment "ROMINFO"    ; +$7FD5 in file
000000r 2  30               .byte $30         ; LoROM, fast-capable
000001r 2  00               .byte 0           ; no battery RAM
000002r 2  07               .byte $07         ; 128K ROM
000003r 2  00 00 00 00      .byte 0,0,0,0
000007r 2  AA AA 55 55      .word $AAAA,$5555 ; dummy checksum and complement
00000Br 2               
00000Br 2               ;cop,brk,abort,nmi,reset,irq
00000Br 2               ;cop,abort,nmi,res,brk,irqbrk
00000Br 2               .segment "VECTORS"
000000r 2  00 00 00 00      .word 0, 0, EmptyHandler0, EmptyHandler1, EmptyHandler2, VBlank, Reset, EmptyHandler3
000004r 2  rr rr rr rr  
000008r 2  rr rr rr rr  
000010r 2  00 00 00 00      .word 0, 0, EmptyHandler4, EmptyHandler5, VBlank, EmptyHandler6, Reset, EmptyHandler7
000014r 2  rr rr rr rr  
000018r 2  rr rr rr rr  
000020r 2               
000020r 2               .segment "CODE"
000000r 2               EmptyHandler0:
000000r 2  40           	rti
000001r 2               EmptyHandler1:
000001r 2  40           	rti
000002r 2               EmptyHandler2:
000002r 2  40           	rti
000003r 2               EmptyHandler3:
000003r 2  40           	rti
000004r 2               EmptyHandler4:
000004r 2  40           	rti
000005r 2               EmptyHandler5:
000005r 2  40           	rti
000006r 2               EmptyHandler6:
000006r 2  40           	rti
000007r 2               EmptyHandler7:
000007r 2  40           	rti
000008r 2               
000008r 1               .include "initSNES.inc"
000008r 2               ;------------------------------------------------------------------------
000008r 2               ;-  Written by: Neviksti
000008r 2               ;-     If you use my code, please share your creations with me
000008r 2               ;-     as I am always curious :)
000008r 2               ;------------------------------------------------------------------------
000008r 2               
000008r 2               
000008r 2               ;----------------------------------------------------------------------------
000008r 2               ; InitSNES -- my "standard" initialization of SNES memory and registers
000008r 2               ;----------------------------------------------------------------------------
000008r 2               .macro InitSNES
000008r 2                 sei                     ;disable interrupts
000008r 2                 clc                     ;switch to native mode
000008r 2                 xce
000008r 2               
000008r 2                 REP #$38		; mem/A = 16 bit, X/Y = 16 bit
000008r 2               			;decimal mode off
000008r 2                 .i16
000008r 2                 LDX #$1FFF	;Setup the stack
000008r 2                 TXS			;Transfer Index X to Stack Pointer Register
000008r 2               
000008r 2                 ;do the rest of the initialization in a routine
000008r 2                 JSL InitializeSNES
000008r 2               
000008r 2                 SEP #$20		; mem/A = 8 bit
000008r 2               .endmacro
000008r 2               
000008r 2               ;----------------------------------------------------------------------------
000008r 2               
000008r 2               .segment "CODE"
000008r 2               
000008r 2               InitializeSNES:
000008r 2  4B             PHK			;set Data Bank = Program Bank
000009r 2  AB             PLB
00000Ar 2               
00000Ar 2  A9 00          LDA #$0000	;set Direct Page = $0000
00000Cr 2  5B             TCD			;Transfer Accumulator to Direct Register
00000Dr 2               
00000Dr 2  AE FD 1F       LDX $1FFD		;we clear all the mem at one point ...
000010r 2  8E 72 43       STX $4372  	;so save the return address in a place that won't get overwritten
000013r 2  AE FF 1F       LDX $1FFF
000016r 2  8E 74 43       STX $4374
000019r 2               
000019r 2  E2 20          SEP #$20		; mem/A = 8 bit
00001Br 2  C2 10          REP #$10
00001Dr 2               
00001Dr 2  A9 8F          LDA #$8F
00001Fr 2  8D 00 21       STA $2100		;turn screen off for now, set brightness to normal
000022r 2               
000022r 2  A2 01 21       LDX #$2101
000025r 2               _Loop00:		;regs $2101-$210C
000025r 2  74 00          STZ $00,X		;set Sprite,Character,Tile sizes to lowest, and set addresses to $0000
000027r 2  E8             INX
000028r 2  E0 0D 21       CPX #$210D
00002Br 2  D0 F8          BNE _Loop00
00002Dr 2               
00002Dr 2               _Loop01:		;regs $210D-$2114
00002Dr 2  74 00          STZ $00,X		;Set all BG scroll values to $0000
00002Fr 2  74 00          STZ $00,X
000031r 2  E8             INX
000032r 2  E0 15 21       CPX #$2115
000035r 2  D0 F6          BNE _Loop01
000037r 2               
000037r 2  A9 80          LDA #$80		;reg $2115
000039r 2  8D 15 21       STA $2115		; Initialize VRAM transfer mode to word-access, increment by 1
00003Cr 2               
00003Cr 2  9C 16 21       STZ $2116		;regs $2117-$2117
00003Fr 2  9C 17 21       STZ $2117		;VRAM address = $0000
000042r 2               
000042r 2               			;reg $2118-$2119
000042r 2               			;VRAM write register... don't need to initialize
000042r 2               
000042r 2  9C 1A 21       STZ $211A		;clear Mode7 setting
000045r 2               
000045r 2  A2 1B 21       LDX #$211B
000048r 2               _Loop02:		;regs $211B-$2120
000048r 2  74 00          STZ $00,X		;clear out the Mode7 matrix values
00004Ar 2  74 00          STZ $00,X
00004Cr 2  E8             INX
00004Dr 2  E0 21 21       CPX #$2121
000050r 2  D0 F6          BNE _Loop02
000052r 2               
000052r 2               			;reg $2121 - Color address, doesn't need initilaizing
000052r 2               			;reg $2122 - Color data, is initialized later
000052r 2               
000052r 2  A2 23 21       LDX #$2123
000055r 2               _Loop03:		;regs $2123-$2133
000055r 2  74 00          STZ $00,X		;turn off windows, main screens, sub screens, color addition,
000057r 2  E8             INX			;fixed color = $00, no super-impose (external synchronization),
000058r 2  E0 34 21       CPX #$2134	;no interlaced mode, normal resolution
00005Br 2  D0 F8          BNE _Loop03
00005Dr 2               
00005Dr 2               			;regs $2134-$2136  - multiplication result, no initialization needed
00005Dr 2               			;reg $2137 - software H/V latch, no initialization needed
00005Dr 2               			;reg $2138 - Sprite data read, no initialization needed
00005Dr 2               			;regs $2139-$213A  - VRAM data read, no initialization needed
00005Dr 2               			;reg $213B - Color RAM data read, no initialization needed
00005Dr 2               			;regs $213C-$213D  - H/V latched data read, no initialization needed
00005Dr 2               
00005Dr 2  9C 3E 21       STZ $213E		;reg $213E - might not be necesary, but selects PPU master/slave mode
000060r 2               			;reg $213F - PPU status flag, no initialization needed
000060r 2               
000060r 2               			;reg $2140-$2143 - APU communication regs, no initialization required
000060r 2               
000060r 2               			;reg $2180  -  read/write WRAM register, no initialization required
000060r 2               			;reg $2181-$2183  -  WRAM address, no initialization required
000060r 2               
000060r 2               			;reg $4016-$4017  - serial JoyPad read registers, no need to initialize
000060r 2               
000060r 2               
000060r 2  9C 00 42       STZ $4200		;reg $4200  - disable timers, NMI,and auto-joyread
000063r 2               
000063r 2  A9 FF          LDA #$FF
000065r 2  8D 01 42       STA $4201		;reg $4201  - programmable I/O write port, initalize to allow reading at in-port
000068r 2               
000068r 2               			;regs $4202-$4203  - multiplication registers, no initialization required
000068r 2               			;regs $4204-$4206  - division registers, no initialization required
000068r 2               
000068r 2               			;regs $4207-$4208  - Horizontal-IRQ timer setting, since we disabled this, it is OK to not init
000068r 2               			;regs $4209-$420A  - Vertical-IRQ timer setting, since we disabled this, it is OK to not init
000068r 2               
000068r 2  9C 0B 42       STZ $420B		;reg $420B  - turn off all general DMA channels
00006Br 2  9C 0C 42       STZ $420C		;reg $420C  - turn off all H-MA channels
00006Er 2               
00006Er 2  9C 0D 42       STZ $420D		;reg $420D  - ROM access time to slow (2.68Mhz)
000071r 2               
000071r 2  AD 10 42       LDA $4210		;reg $4210  - NMI status, reading resets
000074r 2               
000074r 2               			;reg $4211  - IRQ status, no need to initialize
000074r 2               			;reg $4212  - H/V blank and JoyRead status, no need to initialize
000074r 2               			;reg $4213  - programmable I/O inport, no need to initialize
000074r 2               
000074r 2               			;reg $4214-$4215  - divide results, no need to initialize
000074r 2               			;reg $4216-$4217  - multiplication or remainder results, no need to initialize
000074r 2               
000074r 2               			;regs $4218-$421f  - JoyPad read registers, no need to initialize
000074r 2               
000074r 2               			;regs $4300-$437F
000074r 2               			;no need to intialize because DMA was disabled above
000074r 2               			;also, we're not sure what all of the registers do, so it is better to leave them at
000074r 2               			;their reset state value
000074r 2               
000074r 2               ;  JSR ClearVRAM      ;Reset VRAM
000074r 2                ; JSR ClearPalette   ;Reset colors
000074r 2               
000074r 2                 ;**** clear Sprite tables ********
000074r 2               
000074r 2  9C 02 21       STZ $2102	;sprites initialized to be off the screen, palette 0, character 0
000077r 2  9C 03 21       STZ $2103
00007Ar 2  A2 80 00       LDX #$0080
00007Dr 2  A9 F0          LDA #$F0
00007Fr 2               _Loop08:
00007Fr 2  8D 04 21       STA $2104	;set X = 240
000082r 2  8D 04 21       STA $2104	;set Y = 240
000085r 2  9C 04 21       STZ $2104	;set character = $00
000088r 2  9C 04 21       STZ $2104	;set priority=0, no flips
00008Br 2  CA             DEX
00008Cr 2  D0 F1          BNE _Loop08
00008Er 2               
00008Er 2  A2 20 00       LDX #$0020
000091r 2               _Loop09:
000091r 2  9C 04 21       STZ $2104		;set size bit=0, x MSB = 0
000094r 2  CA             DEX
000095r 2  D0 FA          BNE _Loop09
000097r 2               
000097r 2                 ;**** clear WRAM ********
000097r 2  9C 81 21       STZ $2181		;set WRAM address to $000000
00009Ar 2  9C 82 21       STZ $2182
00009Dr 2  9C 83 21       STZ $2183
0000A0r 2               
0000A0r 2  A2 08 80       LDX #$8008
0000A3r 2  8E 00 43       STX $4300         ;Set DMA mode to fixed source, BYTE to $2180
0000A6r 2  A2 rr rr       LDX #wram_fill_byte
0000A9r 2  8E 02 43       STX $4302         ;Set source offset
0000ACr 2  A9 rr          LDA #<.bank(wram_fill_byte)
0000AEr 2  8D 04 43       STA $4304         ;Set source bank
0000B1r 2  A2 00 00       LDX #$0000
0000B4r 2  8E 05 43       STX $4305         ;Set transfer size to 64k bytes
0000B7r 2  A9 01          LDA #$01
0000B9r 2  8D 0B 42       STA $420B         ;Initiate transfer
0000BCr 2               
0000BCr 2  A9 01          LDA #$01          ;now set the next 64k bytes
0000BEr 2  8D 0B 42       STA $420B         ;Initiate transfer
0000C1r 2               
0000C1r 2  4B             PHK			;make sure Data Bank = Program Bank
0000C2r 2  AB             PLB
0000C3r 2               
0000C3r 2  58             CLI			;enable interrupts again
0000C4r 2               
0000C4r 2  AE 72 43       LDX $4372  	;get our return address...
0000C7r 2  8E FD 1F       STX $1FFD
0000CAr 2  AD 74 43       LDA $4374
0000CDr 2  8D FF 1F       STA $1FFF
0000D0r 2  6B             RTL
0000D1r 2               
0000D1r 2               wram_fill_byte:
0000D1r 2  00           .byte $00
0000D2r 2               
0000D2r 2               ;----------------------------------------------------------------------------
0000D2r 2               ; ClearVRAM -- Sets every byte of VRAM to zero
0000D2r 2               ; In: None
0000D2r 2               ; Out: None
0000D2r 2               ; Modifies: flags
0000D2r 2               ;----------------------------------------------------------------------------
0000D2r 2               ClearVRAM:
0000D2r 2  48              pha
0000D3r 2  DA              phx
0000D4r 2  08              php
0000D5r 2               
0000D5r 2  C2 30           REP #$30		; mem/A = 8 bit, X/Y = 16 bit
0000D7r 2  E2 20           SEP #$20
0000D9r 2               
0000D9r 2  A9 80           LDA #$80
0000DBr 2  8D 15 21        STA $2115         ;Set VRAM port to word access
0000DEr 2  A2 09 18        LDX #$1809
0000E1r 2  8E 00 43        STX $4300         ;Set DMA mode to fixed source, WORD to $2118/9
0000E4r 2  A2 00 00        LDX #$0000
0000E7r 2  8E 16 21        STX $2116         ;Set VRAM port address to $0000
0000EAr 2  86 00           STX $0000         ;Set $00:0000 to $0000 (assumes scratchpad ram)
0000ECr 2  8E 02 43        STX $4302         ;Set source address to $xx:0000
0000EFr 2  A9 00           LDA #$00
0000F1r 2  8D 04 43        STA $4304         ;Set source bank to $00
0000F4r 2  A2 FF FF        LDX #$FFFF
0000F7r 2  8E 05 43        STX $4305         ;Set transfer size to 64k-1 bytes
0000FAr 2  A9 01           LDA #$01
0000FCr 2  8D 0B 42        STA $420B         ;Initiate transfer
0000FFr 2               
0000FFr 2  9C 19 21        STZ $2119         ;clear the last byte of the VRAM
000102r 2               
000102r 2  28              plp
000103r 2  FA              plx
000104r 2  68              pla
000105r 2  60              RTS
000106r 2               
000106r 2               ;----------------------------------------------------------------------------
000106r 2               ; ClearPalette -- Reset all palette colors to zero
000106r 2               ; In: None
000106r 2               ; Out: None
000106r 2               ; Modifies: flags
000106r 2               ;----------------------------------------------------------------------------
000106r 2               ClearPalette:
000106r 2  DA              PHX
000107r 2  08              PHP
000108r 2  C2 30           REP #$30		; mem/A = 8 bit, X/Y = 16 bit
00010Ar 2  E2 20           SEP #$20
00010Cr 2               
00010Cr 2  9C 21 21        STZ $2121
00010Fr 2  A2 00 01        LDX #$0100
000112r 2               ClearPaletteLoop:
000112r 2  9C 22 21        STZ $2122
000115r 2  9C 22 21        STZ $2122
000118r 2  CA              DEX
000119r 2  D0 F7           BNE ClearPaletteLoop
00011Br 2               
00011Br 2  28              PLP
00011Cr 2  FA              PLX
00011Dr 2  60              RTS
00011Er 2               
00011Er 2               
00011Er 1               .include "defines.asm"
00011Er 2               ;---joypad---
00011Er 2               
00011Er 2               .define JOY_B $80
00011Er 2               .define JOY_Y $40
00011Er 2               .define JOY_SELECT $20
00011Er 2               .define JOY_START $10
00011Er 2               .define JOY_UP $8
00011Er 2               .define JOY_DOWN $4
00011Er 2               .define JOY_LEFT $2
00011Er 2               .define JOY_RIGHT $1
00011Er 2               
00011Er 2               ;---oam pt 2 write masks---
00011Er 2               
00011Er 2               .define SPRITE3_MASK %00111111
00011Er 2               .define SPRITE2_MASK %11001111
00011Er 2               .define SPRITE1_MASK %11110011
00011Er 2               .define SPRITE0_MASK %11111100
00011Er 2               
00011Er 2               ;oam mirror defines
00011Er 2               .define OamMirror $400
00011Er 2               .define Oam2Mirror $600
00011Er 2               
00011Er 1               .include "variables.asm"
00011Er 2               .enum ;start at $10 because first 15 bytes are "scratchpad"
00011Er 2               scrollX = $10
00011Er 2               scrollY = scrollX+2
00011Er 2               playerHSpeed = scrollY+2
00011Er 2               spriteX = playerHSpeed+2
00011Er 2               spriteY
00011Er 2               playerTileNum
00011Er 2               playerAttrs
00011Er 2               playerVSpeed
00011Er 2               playerState
00011Er 2               movementState
00011Er 2               lastAnimPoint
00011Er 2               .endenum
00011Er 2               
00011Er 1               .include "macros.asm"
00011Er 2               .macro LoadPalette source, colorIndex, numColors
00011Er 2               ;parameters:
00011Er 2               ;source, color to start on, number of colors to copy
00011Er 2                   lda #colorIndex
00011Er 2                   sta $2121       ; Start at START color
00011Er 2                   lda #<.bank(source)        ; Using : before the parameter gets its bank.
00011Er 2                   ldx #source         ; Not using : gets the offset address.
00011Er 2                   ldy #(numColors * 2)   ; 2 bytes for every color
00011Er 2                   jsr DMAPalette
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro LoadBlockToVRAM source, destination, size
00011Er 2               ;parameters:
00011Er 2               ;source, destination, size
00011Er 2                   lda #$80
00011Er 2                   sta $2115       ; Set VRAM transfer mode to word-access, increment by 1
00011Er 2                   ldx #destination         ; DEST
00011Er 2                   stx $2116       ; $2116: Word address for accessing VRAM.
00011Er 2                   lda #<.bank(source)        ; SRCBANK
00011Er 2                   ldx #source         ; SRCOFFSET
00011Er 2                   ldy #size         ; SIZE
00011Er 2                  jsr LoadVRAM
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro LoadBlockToWRAM source, destination, size
00011Er 2               	ldx #source
00011Er 2               	stx $4302 ;source address
00011Er 2               	lda #<.bank(source)
00011Er 2               	sta $4304 ;bank
00011Er 2               	ldx #size
00011Er 2               	stx $4305
00011Er 2               	ldx #destination ; set wram transfer address
00011Er 2               	stx $2181
00011Er 2               	stz $2183 ;only accesses the first 64k, yolo
00011Er 2               	lda #$80 ;dest = vram port
00011Er 2               	sta $4301
00011Er 2               	stz $4300 ; 1 byte transfer, auto-increment
00011Er 2               	lda #$1
00011Er 2               	sta $420b ;start transfer
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro WRAMToVRAM source, destination, size
00011Er 2               	lda #$80
00011Er 2               	sta $2115 ;word-access,increment by one
00011Er 2               	ldx #destination
00011Er 2               	stx $2116
00011Er 2               	ldx #source
00011Er 2               	stx $4312 ;dma source address
00011Er 2               	lda #$7e
00011Er 2               	sta $4314 ;bank
00011Er 2               	ldx #size
00011Er 2               	stx $4315
00011Er 2               	lda #$18 ;dest = $2118, vram write register
00011Er 2               	sta $4311
00011Er 2               	lda #$1 ;word increment on dest, src increment
00011Er 2               	sta $4310
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro WriteTilemap screen, xOff, yOff, data
00011Er 2               ;point to write to = ($800*screen + $20*yOff+xOff)*2
00011Er 2               ;writes to $0 and $1
00011Er 2               	a16
00011Er 2               	lda screen
00011Er 2               	xba
00011Er 2               	clc
00011Er 2               	rol a
00011Er 2               	rol a
00011Er 2               	rol a ;screens are $800 apart, so multiply it by that
00011Er 2               	sta $0
00011Er 2               	lda yOff ;each "screen" is 32x32 words or $40x$40 bytes
00011Er 2               	rol a
00011Er 2               	rol a
00011Er 2               	rol a
00011Er 2               	rol a
00011Er 2               	rol a
00011Er 2               	rol a
00011Er 2               	ora $0
00011Er 2               	clc
00011Er 2               	adc xOff ;words, so add twice to multiply by
00011Er 2               	clc
00011Er 2               	adc xOff
00011Er 2               	sta $0
00011Er 2               	a8
00011Er 2               	lda #$7e
00011Er 2               	pha
00011Er 2               	plb
00011Er 2               	a16
00011Er 2               	lda data
00011Er 2               	ldx $0
00011Er 2               	sta $2000,x
00011Er 2               	a8
00011Er 2               	lda #$0
00011Er 2               	pha
00011Er 2               	plb
00011Er 2               	stz $0 ;cleanup
00011Er 2               	stz $1 ;cleanup
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro DrawBox screen, x1, y1, x2
00011Er 2               ;note that "coordinates" are tiles, not pixels
00011Er 2               	lda x1
00011Er 2               	sta $2
00011Er 2               	lda x2
00011Er 2               	sta $4
00011Er 2               @DrawLoop:
00011Er 2               	WriteTilemap screen, $2, y1, #$1
00011Er 2               	lda $2
00011Er 2               	inc a
00011Er 2               	sta $2
00011Er 2               	cmp $4
00011Er 2               	bne @DrawLoop
00011Er 2               	stz $2 ;cleanup
00011Er 2               	stz $3
00011Er 2               	stz $4
00011Er 2               	stz $5
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro StartDMA
00011Er 2               ;make sure to modify when i add more shit to dma
00011Er 2               	lda #$3 ;channels 1 and 2
00011Er 2               	sta $420b
00011Er 2               .endmacro
00011Er 2               
00011Er 2               
00011Er 2               .macro SetHScroll hVal
00011Er 2               ;parameter: mem address of horizontal scroll val
00011Er 2               	rep #$20
00011Er 2               	lda hVal
00011Er 2               	sep #$20
00011Er 2               	sta $210D	; BG1 horiz scroll
00011Er 2               	xba
00011Er 2               	sta $210D
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro SetVScroll vVal
00011Er 2               ;parameter: mem address of vertical scroll val
00011Er 2               	rep #$20
00011Er 2               	lda vVal
00011Er 2               	sep #$20
00011Er 2               	sta $210E	; BG1 vert scroll
00011Er 2               	xba
00011Er 2               	sta $210E
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro SetMosaic level
00011Er 2               ;parameter: mosaic level (0-15 dec, 0-f hex)
00011Er 2               	lda level
00011Er 2               	and #$F ;param %=15
00011Er 2               	clc
00011Er 2               	ror a
00011Er 2               	ror a
00011Er 2               	ror a
00011Er 2               	ora #$1
00011Er 2               	sta $2106
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro ClearMem start, range
00011Er 2               ;start-address to start clearing
00011Er 2               ;range-num of bytes to clear
00011Er 2               	ldx #$0
00011Er 2               	@loop:
00011Er 2               	stz start,x
00011Er 2               	inx
00011Er 2               	cpx range
00011Er 2               	bne @loop
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro PositiveDiff val1, val2
00011Er 2               ;puts the difference of val1 and val2 into a
00011Er 2               	lda val1
00011Er 2               	cmp val2
00011Er 2               	bcs @Val1Greater
00011Er 2               	sec
00011Er 2               	lda val2
00011Er 2               	sbc val1
00011Er 2               	jmp @end
00011Er 2               @Val1Greater:
00011Er 2               	sec
00011Er 2               	sbc val2
00011Er 2               @end:
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro a16
00011Er 2               	rep #$20
00011Er 2               	.a16
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro a8
00011Er 2               	sep #$20
00011Er 2               	.a8
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .segment "CODE"
00011Er 2               DMAPalette:
00011Er 2               ;a- data bank
00011Er 2               ;x- data offset
00011Er 2               ;y- size of data
00011Er 2               
00011Er 2               ;processor status onto stack
00011Er 2  8B           	phb
00011Fr 2  08           	php
000120r 2  8E 02 43     	stx $4302 ;address into dma 0 source register
000123r 2  8D 04 43     	sta $4304 ;bank into channel 0 bank register
000126r 2  8C 05 43     	sty $4305 ;number of bytes into channel 0 size
000129r 2  9C 00 43     	stz $4300 ;dma byte mode, increment by 1
00012Cr 2  A9 22        	lda #$22 ;$2122=color palette write
00012Er 2  8D 01 43     	sta $4301
000131r 2  A9 01        	lda #$1
000133r 2  8D 0B 42     	sta $420B ;start transfer
000136r 2               
000136r 2  28           	plp
000137r 2  AB           	plb
000138r 2  60           	rts
000139r 2               
000139r 2               LoadVRAM:
000139r 2               ;a- data bank
000139r 2               ;x- data offset
000139r 2               ;y- num of bytes to copy
000139r 2  8B           	phb
00013Ar 2  08               php         ; Preserve Registers
00013Br 2  8E 02 43         stx $4302   ; Store Data offset into DMA source offset
00013Er 2  8D 04 43         sta $4304   ; Store data Bank into DMA source bank
000141r 2  8C 05 43         sty $4305   ; Store size of data block
000144r 2               
000144r 2  A9 01            lda #$1
000146r 2  8D 00 43         sta $4300   ; Set DMA mode (word, normal increment)
000149r 2  A9 18            lda #$18    ; Set the destination register (VRAM write register)
00014Br 2  8D 01 43         sta $4301
00014Er 2  A9 01            lda #$1    ; Initiate DMA transfer (channel 1)
000150r 2  8D 0B 42     	sta $420B
000153r 2               
000153r 2  28               plp         ; restore registers
000154r 2  AB           	plb
000155r 2  60               rts         ; return
000156r 2               
000156r 2               
000156r 2               
000156r 1               .include "sprites.asm"
000156r 2               spriteNum = $0
000156r 2               oam2Data = $1
000156r 2               oam2WriteIndex = $2
000156r 2               
000156r 2               .macro LoadSprite sprite, xOffset, yOffset, tileNum, attributes, xBit, size
000156r 2               ;parameters: sprite num, pointer to x coord, pointer to y coord, pointer to tile num, attributes,first bit of x coordinate, big/small
000156r 2               ;shoutout to nintendo for making me go through all this bullshit, can't have
000156r 2               ; all the memory together or something sane
000156r 2               	lda sprite
000156r 2               	sta spriteNum
000156r 2               	rep #$20
000156r 2               	.a16
000156r 2               	lda sprite
000156r 2               	clc
000156r 2               	rol a
000156r 2               	rol a ;multiply sprite num by 4 because each index in oam table is 4 bytes
000156r 2               	tax
000156r 2               	sep #$20 ;8 bit a
000156r 2               	.a8
000156r 2               	lda xOffset
000156r 2               	sta OamMirror,x
000156r 2               	inx
000156r 2               	lda yOffset
000156r 2               	sta OamMirror,x
000156r 2               	inx
000156r 2               	lda tileNum
000156r 2               	sta OamMirror,x
000156r 2               	inx
000156r 2               	lda attributes
000156r 2               	sta OamMirror,x
000156r 2               
000156r 2               	lda xBit
000156r 2               	and #$1 ;make sure only 1 bit
000156r 2               	sta oam2Data ;mess around with first bit of x coordinate b/c nintendo stored it separately
000156r 2               	lda size
000156r 2               	and #$1 ;combine sprite size and msb of xpos
000156r 2               	ror a
000156r 2               	ora oam2Data
000156r 2               	sta oam2Data
000156r 2               	lda spriteNum
000156r 2               	clc
000156r 2               	ror a ;4 sprites per oam table byte
000156r 2               	ror a
000156r 2               	and #$7F
000156r 2               	sta oam2WriteIndex
000156r 2               	jsr SetOam2Mirror
000156r 2               .endmacro
000156r 2               
000156r 2               .segment "CODE"
000156r 2               InitSprites:
000156r 2  08           	php
000157r 2  A9 01        	lda #$1
000159r 2  A2 00 00     	ldx #$0
00015Cr 2               OamInitLoop: ;apparently just setting the sprites to $100 doesn't actually cause them to be removed from the scanline limit
00015Cr 2  9D 00 04     	sta OamMirror,x
00015Fr 2  E8           	inx
000160r 2  E8           	inx
000161r 2  E8           	inx
000162r 2  E8           	inx
000163r 2  E0 00 02     	cpx #$200
000166r 2  D0 F4        	bne OamInitLoop
000168r 2  A9 55        	lda #$55
00016Ar 2  A2 00 00     	ldx #$0
00016Dr 2               Oam2InitLoop:
00016Dr 2  9D 00 06     	sta Oam2Mirror,x
000170r 2  E8           	inx
000171r 2  E0 20 00     	cpx #$20 ;size of oam pt 2
000174r 2  D0 F7        	bne Oam2InitLoop
000176r 2  28           	plp
000177r 2  60           	rts
000178r 2               
000178r 2               SetOam2Mirror:
000178r 2  08           	php
000179r 2  A5 00        	lda $0
00017Br 2  29 03        	and #$3 ;check where in the byte to place 1st x bit/sprite size
00017Dr 2  C9 00        	cmp #0
00017Fr 2  F0 0C        	beq Sprite0
000181r 2  C9 01        	cmp #1
000183r 2  F0 17        	beq Sprite1
000185r 2  C9 02        	cmp #2
000187r 2  F0 27        	beq Sprite2
000189r 2  C9 03        	cmp #3
00018Br 2  F0 3B        	beq Sprite3
00018Dr 2               
00018Dr 2               Sprite0:
00018Dr 2  A6 02        	ldx oam2WriteIndex
00018Fr 2  BD 00 06     	lda Oam2Mirror,x
000192r 2  29 FC        	and #SPRITE0_MASK
000194r 2  05 01        	ora oam2Data
000196r 2  9D 00 06     	sta Oam2Mirror,x
000199r 2  4C rr rr     	jmp EndBitStuff
00019Cr 2               
00019Cr 2               Sprite1:
00019Cr 2  18           	clc
00019Dr 2  66 01        	ror oam2Data
00019Fr 2  66 01        	ror oam2Data
0001A1r 2               
0001A1r 2  A6 02        	ldx oam2WriteIndex
0001A3r 2  BD 00 06     	lda Oam2Mirror,x
0001A6r 2  29 F3        	and #SPRITE1_MASK
0001A8r 2  05 01        	ora oam2Data
0001AAr 2  9D 00 06     	sta Oam2Mirror,x
0001ADr 2  4C rr rr     	jmp EndBitStuff
0001B0r 2               Sprite2:
0001B0r 2  18           	clc
0001B1r 2  66 01        	ror oam2Data
0001B3r 2  66 01        	ror oam2Data
0001B5r 2  66 01        	ror oam2Data
0001B7r 2  66 01        	ror oam2Data
0001B9r 2               
0001B9r 2  A6 02        	ldx oam2WriteIndex
0001BBr 2  BD 00 06     	lda Oam2Mirror,x
0001BEr 2  29 CF        	and #SPRITE2_MASK
0001C0r 2  05 01        	ora oam2Data
0001C2r 2  9D 00 06     	sta Oam2Mirror,x
0001C5r 2  4C rr rr     	jmp EndBitStuff
0001C8r 2               Sprite3:
0001C8r 2  18           	clc
0001C9r 2  66 01        	ror oam2Data
0001CBr 2  66 01        	ror oam2Data
0001CDr 2  66 01        	ror oam2Data
0001CFr 2  66 01        	ror oam2Data
0001D1r 2  66 01        	ror oam2Data
0001D3r 2  66 01        	ror oam2Data
0001D5r 2               
0001D5r 2  A6 02        	ldx oam2WriteIndex
0001D7r 2  BD 00 06     	lda Oam2Mirror,x
0001DAr 2  29 3F        	and #SPRITE3_MASK
0001DCr 2  05 01        	ora oam2Data
0001DEr 2  9D 00 06     	sta Oam2Mirror,x
0001E1r 2  4C rr rr     	jmp EndBitStuff
0001E4r 2               
0001E4r 2               EndBitStuff:
0001E4r 2  28           	plp
0001E5r 2  60           	rts
0001E6r 2               
0001E6r 2               
0001E6r 1               .include "art.asm"
0001E6r 2               BGPalette:
0001E6r 2  00 00 10 00  	.INCBIN ".\art\bgtiles.clr"
0001EAr 2  00 02 10 02  
0001EEr 2  00 40 10 40  
0003E6r 2               
0003E6r 2               SpritePalette:
0003E6r 2  00 00 10 00  	.INCBIN ".\art\larry.clr"
0003EAr 2  9F 5F 66 72  
0003EEr 2  C5 0D 1D 6F  
0005E6r 2               
0005E6r 2               LarryTiles:
0005E6r 2               	.define NUM_LARRY_TILES $E
0005E6r 2               	.define LARRY_OFFSET $20
0005E6r 2               	.define LARRY_ANIMATION_DELAY $2 ;number of frames between incrementing movement
0005E6r 2  00 00 00 00  	.INCBIN ".\art\larry.pic"
0005EAr 2  00 00 00 00  
0005EEr 2  00 0F 00 1F  
000DE6r 2               BGTiles:
000DE6r 2  00 00 00 00  	.incbin ".\art\bgtiles.pic"
000DEAr 2  00 00 00 00  
000DEEr 2  00 00 00 00  
0011E6r 2               
0011E6r 2               BGTilemap:
0011E6r 2               	;top left screen
0011E6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0011EAr 2  00 00 00 00  
0011EEr 2  00 00 00 00  
001226r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00122Ar 2  00 00 00 00  
00122Er 2  00 00 00 00  
001266r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00126Ar 2  00 00 00 00  
00126Er 2  00 00 00 00  
0012A6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0012AAr 2  00 00 00 00  
0012AEr 2  00 00 00 00  
0012E6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0012EAr 2  00 00 00 00  
0012EEr 2  00 00 00 00  
001326r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00132Ar 2  00 00 00 00  
00132Er 2  00 00 00 00  
001366r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00136Ar 2  00 00 00 00  
00136Er 2  00 00 00 00  
0013A6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0013AAr 2  00 00 00 00  
0013AEr 2  00 00 00 00  
0013E6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0013EAr 2  00 00 00 00  
0013EEr 2  00 00 00 00  
001426r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00142Ar 2  00 00 00 00  
00142Er 2  00 00 00 00  
001466r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00146Ar 2  00 00 00 00  
00146Er 2  00 00 00 00  
0014A6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0014AAr 2  00 00 00 00  
0014AEr 2  00 00 00 00  
0014E6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0014EAr 2  00 00 00 00  
0014EEr 2  00 00 00 00  
001526r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00152Ar 2  00 00 00 00  
00152Er 2  00 00 00 00  
001566r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00156Ar 2  00 00 00 00  
00156Er 2  00 00 00 00  
0015A6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0015AAr 2  00 00 00 00  
0015AEr 2  00 00 00 00  
0015E6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0015EAr 2  00 00 00 00  
0015EEr 2  00 00 00 00  
001626r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00162Ar 2  00 00 00 00  
00162Er 2  00 00 00 00  
001666r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00166Ar 2  00 00 00 00  
00166Er 2  00 00 00 00  
0016A6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0016AAr 2  00 00 00 00  
0016AEr 2  00 00 00 00  
0016E6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0016EAr 2  00 00 00 00  
0016EEr 2  00 00 00 00  
001726r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00172Ar 2  00 00 00 00  
00172Er 2  00 00 00 00  
001766r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00176Ar 2  00 00 00 00  
00176Er 2  00 00 00 00  
0017A6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0017AAr 2  00 00 00 00  
0017AEr 2  00 00 00 00  
0017E6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0017EAr 2  00 00 00 00  
0017EEr 2  00 00 00 00  
001826r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00182Ar 2  00 00 00 00  
00182Er 2  00 00 00 00  
001866r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00186Ar 2  00 00 00 00  
00186Er 2  00 00 00 00  
0018A6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0018AAr 2  00 00 00 00  
0018AEr 2  00 00 00 00  
0018E6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0018EAr 2  00 00 00 00  
0018EEr 2  00 00 00 00  
001926r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00192Ar 2  00 00 00 00  
00192Er 2  00 00 00 00  
001966r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00196Ar 2  00 00 00 00  
00196Er 2  00 00 00 00  
0019A6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0019AAr 2  00 00 00 00  
0019AEr 2  00 00 00 00  
0019E6r 2               
0019E6r 2               	;top right screen
0019E6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0019EAr 2  00 00 00 00  
0019EEr 2  00 00 00 00  
001A26r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001A2Ar 2  00 00 00 00  
001A2Er 2  00 00 00 00  
001A66r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001A6Ar 2  00 00 00 00  
001A6Er 2  00 00 00 00  
001AA6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001AAAr 2  00 00 00 00  
001AAEr 2  00 00 00 00  
001AE6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001AEAr 2  00 00 00 00  
001AEEr 2  00 00 00 00  
001B26r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001B2Ar 2  00 00 00 00  
001B2Er 2  00 00 00 00  
001B66r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001B6Ar 2  00 00 00 00  
001B6Er 2  00 00 00 00  
001BA6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001BAAr 2  00 00 00 00  
001BAEr 2  00 00 00 00  
001BE6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001BEAr 2  00 00 00 00  
001BEEr 2  00 00 00 00  
001C26r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$1,$0,$0,$1,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001C2Ar 2  00 00 00 00  
001C2Er 2  00 00 00 00  
001C66r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001C6Ar 2  00 00 00 00  
001C6Er 2  00 00 00 00  
001CA6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001CAAr 2  00 00 00 00  
001CAEr 2  00 00 00 00  
001CE6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$1,$1,$1,$1,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001CEAr 2  00 00 00 00  
001CEEr 2  00 00 00 00  
001D26r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001D2Ar 2  00 00 00 00  
001D2Er 2  00 00 00 00  
001D66r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001D6Ar 2  00 00 00 00  
001D6Er 2  00 00 00 00  
001DA6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001DAAr 2  00 00 00 00  
001DAEr 2  00 00 00 00  
001DE6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001DEAr 2  00 00 00 00  
001DEEr 2  00 00 00 00  
001E26r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001E2Ar 2  00 00 00 00  
001E2Er 2  00 00 00 00  
001E66r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001E6Ar 2  00 00 00 00  
001E6Er 2  00 00 00 00  
001EA6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001EAAr 2  00 00 00 00  
001EAEr 2  00 00 00 00  
001EE6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001EEAr 2  00 00 00 00  
001EEEr 2  00 00 00 00  
001F26r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001F2Ar 2  00 00 00 00  
001F2Er 2  00 00 00 00  
001F66r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001F6Ar 2  00 00 00 00  
001F6Er 2  00 00 00 00  
001FA6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001FAAr 2  00 00 00 00  
001FAEr 2  00 00 00 00  
001FE6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001FEAr 2  00 00 00 00  
001FEEr 2  00 00 00 00  
002026r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00202Ar 2  00 00 00 00  
00202Er 2  00 00 00 00  
002066r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00206Ar 2  00 00 00 00  
00206Er 2  00 00 00 00  
0020A6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0020AAr 2  00 00 00 00  
0020AEr 2  00 00 00 00  
0020E6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0020EAr 2  00 00 00 00  
0020EEr 2  00 00 00 00  
002126r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00212Ar 2  00 00 00 00  
00212Er 2  00 00 00 00  
002166r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00216Ar 2  00 00 00 00  
00216Er 2  00 00 00 00  
0021A6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0021AAr 2  00 00 00 00  
0021AEr 2  00 00 00 00  
0021E6r 2               
0021E6r 2               	;bottom left screen
0021E6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0021EAr 2  00 00 00 00  
0021EEr 2  00 00 00 00  
002226r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00222Ar 2  00 00 00 00  
00222Er 2  00 00 00 00  
002266r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00226Ar 2  00 00 00 00  
00226Er 2  00 00 00 00  
0022A6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0022AAr 2  00 00 00 00  
0022AEr 2  00 00 00 00  
0022E6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0022EAr 2  00 00 00 00  
0022EEr 2  00 00 00 00  
002326r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00232Ar 2  00 00 00 00  
00232Er 2  00 00 00 00  
002366r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00236Ar 2  00 00 00 00  
00236Er 2  00 00 00 00  
0023A6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0023AAr 2  00 00 00 00  
0023AEr 2  00 00 00 00  
0023E6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0023EAr 2  00 00 00 00  
0023EEr 2  00 00 00 00  
002426r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00242Ar 2  00 00 00 00  
00242Er 2  00 00 00 00  
002466r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00246Ar 2  00 00 00 00  
00246Er 2  00 00 00 00  
0024A6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0024AAr 2  00 00 00 00  
0024AEr 2  00 00 00 00  
0024E6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0024EAr 2  00 00 00 00  
0024EEr 2  00 00 00 00  
002526r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00252Ar 2  00 00 00 00  
00252Er 2  00 00 00 00  
002566r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00256Ar 2  00 00 00 00  
00256Er 2  00 00 00 00  
0025A6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0025AAr 2  00 00 00 00  
0025AEr 2  00 00 00 00  
0025E6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0025EAr 2  00 00 00 00  
0025EEr 2  00 00 00 00  
002626r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00262Ar 2  00 00 00 00  
00262Er 2  00 00 00 00  
002666r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00266Ar 2  00 00 00 00  
00266Er 2  00 00 00 00  
0026A6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0026AAr 2  00 00 00 00  
0026AEr 2  00 00 00 00  
0026E6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0026EAr 2  00 00 00 00  
0026EEr 2  00 00 00 00  
002726r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00272Ar 2  00 00 00 00  
00272Er 2  00 00 00 00  
002766r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00276Ar 2  00 00 00 00  
00276Er 2  00 00 00 00  
0027A6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0027AAr 2  00 00 00 00  
0027AEr 2  00 00 00 00  
0027E6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0027EAr 2  00 00 00 00  
0027EEr 2  00 00 00 00  
002826r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00282Ar 2  00 00 00 00  
00282Er 2  00 00 00 00  
002866r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00286Ar 2  00 00 00 00  
00286Er 2  00 00 00 00  
0028A6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0028AAr 2  00 00 00 00  
0028AEr 2  00 00 00 00  
0028E6r 2  01 00 00 00  	.word $1,$0,$1,$0,$1,$0,$1,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0028EAr 2  01 00 00 00  
0028EEr 2  01 00 00 00  
002926r 2  01 00 01 00  	.word $1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1
00292Ar 2  01 00 01 00  
00292Er 2  01 00 01 00  
002966r 2  01 00 01 00  	.word $1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1
00296Ar 2  01 00 01 00  
00296Er 2  01 00 01 00  
0029A6r 2  01 00 01 00  	.word $1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1
0029AAr 2  01 00 01 00  
0029AEr 2  01 00 01 00  
0029E6r 2               	;bottom right screen
0029E6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0029EAr 2  00 00 00 00  
0029EEr 2  00 00 00 00  
002A26r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002A2Ar 2  00 00 00 00  
002A2Er 2  00 00 00 00  
002A66r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002A6Ar 2  00 00 00 00  
002A6Er 2  00 00 00 00  
002AA6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002AAAr 2  00 00 00 00  
002AAEr 2  00 00 00 00  
002AE6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002AEAr 2  00 00 00 00  
002AEEr 2  00 00 00 00  
002B26r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002B2Ar 2  00 00 00 00  
002B2Er 2  00 00 00 00  
002B66r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002B6Ar 2  00 00 00 00  
002B6Er 2  00 00 00 00  
002BA6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002BAAr 2  00 00 00 00  
002BAEr 2  00 00 00 00  
002BE6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002BEAr 2  00 00 00 00  
002BEEr 2  00 00 00 00  
002C26r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002C2Ar 2  00 00 00 00  
002C2Er 2  00 00 00 00  
002C66r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002C6Ar 2  00 00 00 00  
002C6Er 2  00 00 00 00  
002CA6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002CAAr 2  00 00 00 00  
002CAEr 2  00 00 00 00  
002CE6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002CEAr 2  00 00 00 00  
002CEEr 2  00 00 00 00  
002D26r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002D2Ar 2  00 00 00 00  
002D2Er 2  00 00 00 00  
002D66r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002D6Ar 2  00 00 00 00  
002D6Er 2  00 00 00 00  
002DA6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002DAAr 2  00 00 00 00  
002DAEr 2  00 00 00 00  
002DE6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002DEAr 2  00 00 00 00  
002DEEr 2  00 00 00 00  
002E26r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002E2Ar 2  00 00 00 00  
002E2Er 2  00 00 00 00  
002E66r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002E6Ar 2  00 00 00 00  
002E6Er 2  00 00 00 00  
002EA6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002EAAr 2  00 00 00 00  
002EAEr 2  00 00 00 00  
002EE6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002EEAr 2  00 00 00 00  
002EEEr 2  00 00 00 00  
002F26r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002F2Ar 2  00 00 00 00  
002F2Er 2  00 00 00 00  
002F66r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002F6Ar 2  00 00 00 00  
002F6Er 2  00 00 00 00  
002FA6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002FAAr 2  00 00 00 00  
002FAEr 2  00 00 00 00  
002FE6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002FEAr 2  00 00 00 00  
002FEEr 2  00 00 00 00  
003026r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00302Ar 2  00 00 00 00  
00302Er 2  00 00 00 00  
003066r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
00306Ar 2  00 00 00 00  
00306Er 2  00 00 00 00  
0030A6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0030AAr 2  00 00 00 00  
0030AEr 2  00 00 00 00  
0030E6r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0030EAr 2  00 00 00 00  
0030EEr 2  00 00 00 00  
003126r 2  01 00 01 00  	.word $1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1
00312Ar 2  01 00 01 00  
00312Er 2  01 00 01 00  
003166r 2  01 00 01 00  	.word $1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1
00316Ar 2  01 00 01 00  
00316Er 2  01 00 01 00  
0031A6r 2  01 00 01 00  	.word $1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1
0031AAr 2  01 00 01 00  
0031AEr 2  01 00 01 00  
0031E6r 2               
0031E6r 2               
0031E6r 2               
0031E6r 1               .include "larry.asm"
0031E6r 2               .macro HandleLarry xPos, yPos, tileNum
0031E6r 2               ;parameters: pointer to xpos, pointer to ypos, pointer to tile number
0031E6r 2               lda xPos
0031E6r 2               sta $4
0031E6r 2               lda yPos
0031E6r 2               sta $5
0031E6r 2               lda tileNum
0031E6r 2               sta $6
0031E6r 2               LoadSprite #0, $4, $5, $6, playerAttrs, #0, #0
0031E6r 2               lda $5 ;add $10 to sprite y pos because second 16x16 sprite is directly below first
0031E6r 2               clc
0031E6r 2               adc #$10
0031E6r 2               sta $5
0031E6r 2               
0031E6r 2               lda $6
0031E6r 2               clc
0031E6r 2               adc #LARRY_OFFSET
0031E6r 2               sta $6
0031E6r 2               LoadSprite #1, $4, $5, $6, playerAttrs, #0, #0
0031E6r 2               ClearMem $0, #$7
0031E6r 2               .endmacro
0031E6r 2               
0031E6r 2               ;sprite constants
0031E6r 2               .define LARRY_ACCEL $1
0031E6r 2               .define MAX_LARRY_SPEED $10
0031E6r 2               .define MAX_LARRY_JUMP_HEIGHT $e
0031E6r 2               ;various movement states
0031E6r 2               .define STATE_NONE $0
0031E6r 2               .define STATE_RIGHT_PRESSED $1
0031E6r 2               .define STATE_RIGHT_RELEASED $2
0031E6r 2               .define STATE_LEFT_PRESSED $3
0031E6r 2               .define STATE_LEFT_RELEASED $4
0031E6r 2               
0031E6r 2               ;player states
0031E6r 2               .define STATE_GROUND $0
0031E6r 2               .define STATE_JUMP_RISE $1
0031E6r 2               .define STATE_JUMP_FALL $2
0031E6r 2               
0031E6r 1               .include "sound.asm"
0031E6r 2               .segment "BANK1"
000000r 2               
000000r 2               SPCPrg:
000000r 2  20 CD EF BD  	.incbin ".\sound\sound.bin"
000004r 2  E8 2C C4 F2  
000008r 2  E8 00 C4 F3  
005330r 2               SPCPrgEnd:
005330r 2               
005330r 2               SPC_LENGTH = SPCPrgEnd-SPCPrg
005330r 2               NUM_SPC_BLOCKS = SPC_LENGTH/256
005330r 2               .define copyAddr $0 ;address to copy to (word)
005330r 2               .define copyIndex $2 ;index within one block (byte)
005330r 2               .define blockIndex $3 ;what block's being copied (byte)
005330r 2               .define kick $4 ;current "kick" val
005330r 2               
005330r 2               LoadSPC:
005330r 2  8B           	phb
005331r 2  08           	php
005332r 2               
005332r 2  C2 20        	rep #$20
005334r 2               	.a16
005334r 2  A9 53 00     	lda #NUM_SPC_BLOCKS
005337r 2  A9 00 02     	lda #$200
00533Ar 2  85 00        	sta copyAddr ;set up copy address
00533Cr 2  64 03        	stz blockIndex
00533Er 2  E2 20        	sep #$20
005340r 2               	.a8
005340r 2  A9 CC        	lda #$cc ;starting kick val
005342r 2  85 04        	sta kick
005344r 2               
005344r 2  9C 00 42     	stz $4200
005347r 2  78           	sei ;disable interrupts, this is kinda time sensitive
005348r 2               WaitForInit:
005348r 2  AD 40 21     	lda $2140
00534Br 2  C9 AA        	cmp #$aa ;spc sets reg 0 to aa after it inits
00534Dr 2  D0 F9        	bne WaitForInit
00534Fr 2               
00534Fr 2               CopyLoop:
00534Fr 2  C2 20        	rep #$20 ;16 bit a
005351r 2               	.a16
005351r 2  A5 00        	lda copyAddr
005353r 2  8D 42 21     	sta $2142 ;write destination address
005356r 2  18           	clc
005357r 2  69 00 01     	adc #$100
00535Ar 2  85 00        	sta copyAddr
00535Cr 2  E2 20        	sep #$20
00535Er 2               	.a8
00535Er 2               
00535Er 2  A9 01        	lda #$1
005360r 2  8D 41 21     	sta $2141 ;write command
005363r 2  A5 04        	lda kick
005365r 2  8D 40 21     	sta $2140 ;"enable"
005368r 2               WaitForAck: ;spc returns kick when it's ready to write
005368r 2  AD 40 21     	lda $2140
00536Br 2  C5 04        	cmp kick
00536Dr 2  D0 F9        	bne WaitForAck
00536Fr 2               
00536Fr 2               CopyBlock: ;copies blocks of 256 bytes
00536Fr 2  C2 20        	rep #$20 ;16 bit a
005371r 2               	.a16
005371r 2  A5 02        	lda copyIndex ;because blockIndex is next to copyIndex in memory hopefully
005373r 2  AA           	tax	;this will get the address (look at me, so smart for making blocks 256 bytes)
005374r 2  E2 20        	sep #$20
005376r 2               	.a8
005376r 2  BF rr rr rr  	lda f:SPCPrg,x ;specify bank
00537Ar 2  8D 41 21     	sta $2141
00537Dr 2  A5 02        	lda copyIndex
00537Fr 2  8D 40 21     	sta $2140
005382r 2               
005382r 2               WaitReceive:
005382r 2  CD 40 21     	cmp $2140 ;spc mirrors count after receiving data
005385r 2  D0 FB        	bne WaitReceive
005387r 2  1A           	inc a
005388r 2  85 02        	sta copyIndex
00538Ar 2  C9 00        	cmp #$00 ;256 bytes in a block
00538Cr 2  D0 E1        	bne CopyBlock
00538Er 2               
00538Er 2  E6 03        	inc blockIndex
005390r 2  A5 04        	lda kick
005392r 2  18           	clc
005393r 2  69 02        	adc #$2
005395r 2  29 7F        	and #$7f ;kick=previous kick "+2 to 127" -ninty
005397r 2  85 04        	sta kick
005399r 2  A5 03        	lda blockIndex
00539Br 2  C9 53        	cmp #NUM_SPC_BLOCKS
00539Dr 2  D0 B0        	bne CopyLoop
00539Fr 2               
00539Fr 2  C2 20        	rep #$20
0053A1r 2               	.a16
0053A1r 2  A9 00 02     	lda #$200 ;entry point
0053A4r 2  8D 42 21     	sta $2142
0053A7r 2  E2 20        	sep #$20
0053A9r 2               	.a8
0053A9r 2  9C 41 21     	stz $2141 ;start command
0053ACr 2  A5 04        	lda kick
0053AEr 2  8D 40 21     	sta $2140
0053B1r 2  58           	cli ;enable interrupts
0053B2r 2  A2 00 00 74  	ClearMem $0, #$06 ;clear memory used by this function
0053B6r 2  00 E8 E0 06  
0053BAr 2  00 D0 F8     
0053BDr 2  28           	plp
0053BEr 2  AB           	plb
0053BFr 2  6B           	rtl
0053C0r 2               
0053C0r 1               
0053C0r 1               .segment "CODE"
0031E6r 1               Reset:
0031E6r 1  78 18 FB C2  	InitSNES
0031EAr 1  38 A2 FF 1F  
0031EEr 1  9A 22 rr rr  
0031F5r 1  22 rr rr rr  	jsl LoadSPC
0031F9r 1  A9 00 8D 21  	LoadPalette BGPalette, 0, $100
0031FDr 1  21 A9 rr A2  
003201r 1  rr rr A0 00  
003209r 1  A9 80 8D 21      LoadPalette SpritePalette, $80, $F
00320Dr 1  21 A9 rr A2  
003211r 1  rr rr A0 1E  
003219r 1               	; Load Tile data to VRAM
003219r 1  A9 80 8D 15      LoadBlockToVRAM BGTiles, $2000, $0040	; 2 tiles, 2bpp, = 32 bytes
00321Dr 1  21 A2 00 20  
003221r 1  8E 16 21 A9  
00322Fr 1  A9 80 8D 15  	LoadBlockToVRAM LarryTiles, $6000, $2000 ;16x16, 4bpp=128 bytes
003233r 1  21 A2 00 60  
003237r 1  8E 16 21 A9  
003245r 1               ;	LoadBlockToVRAM BGTilemap, $0000, $2000
003245r 1  A2 rr rr 8E  	LoadBlockToWRAM BGTilemap, $2000, $2000
003249r 1  02 43 A9 rr  
00324Dr 1  8D 04 43 A2  
00326Cr 1  A9 80 8D 15  	WRAMToVRAM $2000, $0000, $2000
003270r 1  21 A2 00 00  
003274r 1  8E 16 21 A2  
003292r 1                   ; Setup Video modes and other stuff, then turn on the screen
003292r 1  20 rr rr         jsr SetupVideo
003295r 1  20 rr rr     	jsr InitSprites
003298r 1  A9 81        	lda #$81
00329Ar 1  8D 00 42     	sta $4200 ;enable vblank interrupt and joypad read
00329Dr 1  A9 00        	lda #$00 ;idk why but sometimes spc writes crash the cpu without this line, at least on no$sns
00329Fr 1               	;did a bit more debugging, looks like it's a conflict b/t loading larrytiles and bgtilemap to vram
00329Fr 1  C2 20        	rep #$20
0032A1r 1               	.a16
0032A1r 1  A9 1B 01     	lda #$11b
0032A4r 1  85 12        	sta scrollY
0032A6r 1  E2 20        	sep #$20
0032A8r 1               	.a8
0032A8r 1  A9 50        	lda #$50
0032AAr 1  85 16        	sta spriteX
0032ACr 1               .define GROUND_Y $B0
0032ACr 1  A9 B0        	lda #GROUND_Y
0032AEr 1  85 17        	sta spriteY
0032B0r 1               
0032B0r 1               MainLoop:
0032B0r 1  AD 19 42     	lda $4219 ;p1 joypad read address ;if yes but it is no longer pressed, state=RIGHT_RELEASED
0032B3r 1  89 01        	bit #JOY_RIGHT
0032B5r 1  F0 0F        	beq AssignRightReleased ;if it is still being pressed, state=RIGHT_PRESSED
0032B7r 1  A5 14        	lda playerHSpeed
0032B9r 1  D0 15        	bne EndRightAssign
0032BBr 1  A9 01        	lda #STATE_RIGHT_PRESSED
0032BDr 1  85 1C        	sta movementState
0032BFr 1  A9 30        	lda #$30 ;max sprite priority
0032C1r 1  85 19        	sta playerAttrs
0032C3r 1  4C rr rr     	jmp EndRightAssign
0032C6r 1               
0032C6r 1               AssignRightReleased:
0032C6r 1  A5 1C        	lda movementState
0032C8r 1  C9 01        	cmp #STATE_RIGHT_PRESSED ;was right pressed last frame?
0032CAr 1  D0 04        	bne EndRightAssign ;if no, skip
0032CCr 1  A9 02        	lda #STATE_RIGHT_RELEASED
0032CEr 1  85 1C        	sta movementState
0032D0r 1               
0032D0r 1               EndRightAssign:
0032D0r 1               
0032D0r 1  AD 19 42     	lda $4219 ;p1 joypad read address ;if yes but it is no longer pressed, state=RIGHT_RELEASED
0032D3r 1  89 02        	bit #JOY_LEFT
0032D5r 1  F0 0F        	beq AssignLeftReleased ;if it is still being pressed, state=RIGHT_PRESSED
0032D7r 1  A5 14        	lda playerHSpeed
0032D9r 1  D0 15        	bne EndLeftAssign
0032DBr 1  A9 03        	lda #STATE_LEFT_PRESSED
0032DDr 1  85 1C        	sta movementState
0032DFr 1  A9 70        	lda #$70 ;max sprite priority, mirrored
0032E1r 1  85 19        	sta playerAttrs
0032E3r 1  4C rr rr     	jmp EndLeftAssign
0032E6r 1               
0032E6r 1               AssignLeftReleased:
0032E6r 1  A5 1C        	lda movementState
0032E8r 1  C9 03        	cmp #STATE_LEFT_PRESSED ;was right pressed last frame?
0032EAr 1  D0 04        	bne EndLeftAssign ;if no, skip
0032ECr 1  A9 04        	lda #STATE_LEFT_RELEASED
0032EEr 1  85 1C        	sta movementState
0032F0r 1               
0032F0r 1               EndLeftAssign:
0032F0r 1               
0032F0r 1               ;if player is on ground, assign jump state
0032F0r 1  AD 19 42     	lda $4219
0032F3r 1  89 80        	bit #JOY_B
0032F5r 1  F0 0E        	beq JumpNotPressed
0032F7r 1  A5 1B        	lda playerState
0032F9r 1  C9 00        	cmp #STATE_GROUND
0032FBr 1  D0 08        	bne JumpNotPressed
0032FDr 1  A9 01        	lda #STATE_JUMP_RISE
0032FFr 1  85 1B        	sta playerState
003301r 1  A9 0E        	lda #MAX_LARRY_JUMP_HEIGHT
003303r 1  85 1A        	sta playerVSpeed
003305r 1               JumpNotPressed:
003305r 1               
003305r 1               EndStateAssigns:
003305r 1               
003305r 1               
003305r 1               ;accelerate player until reaches max speed
003305r 1  A5 1C        	lda movementState
003307r 1  C9 01        	cmp #STATE_RIGHT_PRESSED
003309r 1  D0 16        	bne RightNotPressed
00330Br 1               
00330Br 1  A5 14        	lda playerHSpeed
00330Dr 1  C9 10        	cmp #MAX_LARRY_SPEED
00330Fr 1  F0 05        	beq @DontAdd
003311r 1  18           	clc
003312r 1  69 01        	adc #LARRY_ACCEL
003314r 1  85 14        	sta playerHSpeed
003316r 1               @DontAdd:
003316r 1  C2 20        	a16
003318r 1  A5 10        	lda scrollX
00331Ar 1  18           	clc
00331Br 1  65 14        	adc playerHSpeed
00331Dr 1  85 10        	sta scrollX
00331Fr 1  E2 20        	a8
003321r 1               RightNotPressed:
003321r 1               
003321r 1               ;decelerate player right until they stop
003321r 1  A5 1C        	lda movementState
003323r 1  C9 02        	cmp #STATE_RIGHT_RELEASED
003325r 1  D0 1D        	bne RightNotReleased
003327r 1               
003327r 1  A5 14        	lda playerHSpeed
003329r 1  C9 00        	cmp #$0
00332Br 1  D0 07        	bne @Subtract
00332Dr 1  A9 00        	lda #STATE_NONE
00332Fr 1  85 1C        	sta movementState
003331r 1  4C rr rr     	jmp RightNotReleased
003334r 1               @Subtract:
003334r 1  38           	sec
003335r 1  E9 01        	sbc #LARRY_ACCEL
003337r 1  85 14        	sta playerHSpeed
003339r 1  C2 20        	a16
00333Br 1  A5 10        	lda scrollX
00333Dr 1  18           	clc
00333Er 1  65 14        	adc playerHSpeed
003340r 1  85 10        	sta scrollX
003342r 1  E2 20        	a8
003344r 1               RightNotReleased:
003344r 1               
003344r 1               ;accelerate player until they hit max speed
003344r 1  A5 1C        	lda movementState
003346r 1  C9 03        	cmp #STATE_LEFT_PRESSED
003348r 1  D0 16        	bne LeftNotPressed
00334Ar 1               
00334Ar 1  A5 14        	lda playerHSpeed
00334Cr 1  C9 10        	cmp #MAX_LARRY_SPEED
00334Er 1  F0 05        	beq @DontAdd
003350r 1  18           	clc
003351r 1  69 01        	adc #LARRY_ACCEL
003353r 1  85 14        	sta playerHSpeed
003355r 1               @DontAdd:
003355r 1  C2 20        	a16
003357r 1  A5 10        	lda scrollX
003359r 1  38           	sec
00335Ar 1  E5 14        	sbc playerHSpeed
00335Cr 1  85 10        	sta scrollX
00335Er 1  E2 20        	a8
003360r 1               LeftNotPressed:
003360r 1               
003360r 1               ;decelerate player until they stop
003360r 1  A5 1C        	lda movementState
003362r 1  C9 04        	cmp #STATE_LEFT_RELEASED
003364r 1  D0 1D        	bne LeftNotReleased
003366r 1               
003366r 1  A5 14        	lda playerHSpeed
003368r 1  C9 00        	cmp #$0
00336Ar 1  D0 07        	bne @Subtract
00336Cr 1  A9 00        	lda #STATE_NONE
00336Er 1  85 1C        	sta movementState
003370r 1  4C rr rr     	jmp LeftNotReleased
003373r 1               @Subtract:
003373r 1  38           	sec
003374r 1  E9 01        	sbc #LARRY_ACCEL
003376r 1  85 14        	sta playerHSpeed
003378r 1  C2 20        	a16
00337Ar 1  A5 10        	lda scrollX
00337Cr 1  38           	sec
00337Dr 1  E5 14        	sbc playerHSpeed
00337Fr 1  85 10        	sta scrollX
003381r 1  E2 20        	a8
003383r 1               LeftNotReleased:
003383r 1               
003383r 1               ;animate player based on speed
003383r 1  A5 16 C5 1D  	PositiveDiff spriteX, lastAnimPoint
003387r 1  B0 08 38 A5  
00338Br 1  1D E5 16 4C  
003394r 1  C9 10        	cmp #MAX_LARRY_SPEED ;if sprite pos is less than max speed, don't animate
003396r 1  90 12        	bcc DontAnimate
003398r 1  A5 18        	lda playerTileNum
00339Ar 1  1A           	ina
00339Br 1  1A           	ina
00339Cr 1  85 18        	sta playerTileNum
00339Er 1  C9 0E        	cmp #NUM_LARRY_TILES
0033A0r 1  D0 08        	bne DontAnimate
0033A2r 1  A9 02        	lda #$2
0033A4r 1  85 18        	sta playerTileNum
0033A6r 1  A5 11        	lda scrollX+1
0033A8r 1  85 1D        	sta lastAnimPoint
0033AAr 1               DontAnimate:
0033AAr 1               
0033AAr 1  A5 1C        	lda movementState
0033ACr 1  C9 00        	cmp #STATE_NONE
0033AEr 1  D0 04        	bne DontStandStill
0033B0r 1  A9 00        	lda #$0
0033B2r 1  85 18        	sta playerTileNum
0033B4r 1               DontStandStill:
0033B4r 1               
0033B4r 1               ;1. subtract gravity accel value until initial speed is 0
0033B4r 1               ;2. set state to fall
0033B4r 1               
0033B4r 1  A5 1B        	lda playerState
0033B6r 1  C9 01        	cmp #STATE_JUMP_RISE
0033B8r 1  D0 17        	bne DontRise
0033BAr 1  A5 1A        	lda playerVSpeed
0033BCr 1  D0 07        	bne @SubSpeed ;branch if player v speed isn't 0
0033BEr 1  A9 02        	lda #STATE_JUMP_FALL
0033C0r 1  85 1B        	sta playerState
0033C2r 1  4C rr rr     	jmp DontRise
0033C5r 1               @SubSpeed:
0033C5r 1  38           	sec
0033C6r 1  E9 01        	sbc #LARRY_ACCEL
0033C8r 1  85 1A        	sta playerVSpeed
0033CAr 1  A5 17        	lda spriteY
0033CCr 1  38           	sec
0033CDr 1  E5 1A        	sbc playerVSpeed
0033CFr 1  85 17        	sta spriteY
0033D1r 1               DontRise:
0033D1r 1               
0033D1r 1               ;3. add gravity accel value until player touches ground
0033D1r 1               ;4. set state to ground
0033D1r 1               
0033D1r 1  A5 1B        	lda playerState
0033D3r 1  C9 02        	cmp #STATE_JUMP_FALL
0033D5r 1  D0 1B        	bne DontFall
0033D7r 1  A5 17        	lda spriteY
0033D9r 1  C9 B0        	cmp #GROUND_Y
0033DBr 1  D0 07        	bne @AddSpeed
0033DDr 1  A9 00        	lda #STATE_GROUND
0033DFr 1  85 1B        	sta playerState
0033E1r 1  4C rr rr     	jmp DontFall
0033E4r 1               @AddSpeed:
0033E4r 1  A5 1A        	lda playerVSpeed
0033E6r 1  18           	clc
0033E7r 1  69 01        	adc #LARRY_ACCEL
0033E9r 1  85 1A        	sta playerVSpeed
0033EBr 1  A5 17        	lda spriteY
0033EDr 1  18           	clc
0033EEr 1  65 1A        	adc playerVSpeed
0033F0r 1  85 17        	sta spriteY
0033F2r 1               DontFall:
0033F2r 1               
0033F2r 1  C2 20 A5 10  	SetHScroll scrollX
0033F6r 1  E2 20 8D 0D  
0033FAr 1  21 EB 8D 0D  
0033FFr 1  C2 20 A5 12  	SetVScroll scrollY
003403r 1  E2 20 8D 0E  
003407r 1  21 EB 8D 0E  
00340Cr 1  A5 16 85 04  	HandleLarry spriteX,spriteY,playerTileNum
003410r 1  A5 17 85 05  
003414r 1  A5 18 85 06  
0034B3r 1               	; WriteTilemap #$03, #$0, #$10, #$01
0034B3r 1               	; WriteTilemap #$03, #$1, #$f, #$01
0034B3r 1               	; WriteTilemap #$03, #$2, #$11, #$01
0034B3r 1               ;	WriteTilemap #$02, #$2, #$11, #$01
0034B3r 1  A9 05 85 02  	DrawBox #$2, #$5, #$1a, #$8
0034B7r 1  A9 08 85 04  
0034BBr 1  C2 20 A9 02  
003505r 1  CB           	wai
003506r 1  4C rr rr     	jmp MainLoop
003509r 1               
003509r 1               VBlank:
003509r 1  48           	pha ;push regs to stack so if my main loop is ever too long it'll continue without
00350Ar 1  DA           	phx ;fucking up
00350Br 1  5A           	phy
00350Cr 1  A9 80 8D 15  	WRAMToVRAM $2000, $0000, $2000
003510r 1  21 A2 00 00  
003514r 1  8E 16 21 A2  
003532r 1  20 rr rr     	jsr DMASpriteMirror
003535r 1  A9 03 8D 0B  	StartDMA
003539r 1  42           
00353Ar 1  AD 10 42     	lda $4210 ;clear vblank flag
00353Dr 1  7A           	ply
00353Er 1  FA           	plx
00353Fr 1  68           	pla
003540r 1               
003540r 1  40           	rti
003541r 1               
003541r 1               SetupVideo:
003541r 1  08               php
003542r 1               
003542r 1  A9 73        	lda #$73
003544r 1  8D 01 21     	sta $2101 ;16x16 or 32x32 sprites, sprite data @ $6000
003547r 1  9C 02 21     	stz $2102 ;oam starts at $0 vram
00354Ar 1  9C 03 21     	stz $2103
00354Dr 1  A9 01        	lda #$1
00354Fr 1  8D 05 21         sta $2105           ; Set Video mode 1, 8x8 tiles
003552r 1               
003552r 1  A9 03            lda #$03           ; Set BG1's Tile Map offset to $0000 (Word address)
003554r 1  8D 07 21         sta $2107           ; And the Tile Map size to 64x64
003557r 1               
003557r 1  A9 52        	lda #$52
003559r 1  8D 0B 21         sta $210B           ; Set BG1's Character VRAM offset to $2000 (word address), BG2's to $5000
00355Cr 1               
00355Cr 1  A9 11            lda #$11            ; Enable BG1 and sprites
00355Er 1  8D 2C 21         sta $212C
003561r 1               
003561r 1  A9 FF            lda #$FF ;bg1 horizontal scroll to -1 to fix weird stuff
003563r 1  8D 0E 21         sta $210E
003566r 1  8D 0E 21         sta $210E
003569r 1               
003569r 1  A9 0F            lda #$0F
00356Br 1  8D 00 21         sta $2100           ; Turn on screen, full Brightness
00356Er 1               
00356Er 1  28               plp
00356Fr 1  60               rts
003570r 1               
003570r 1               DMASpriteMirror:
003570r 1  9C 02 21     	stz $2102		; set OAM address to 0
003573r 1  9C 03 21     	stz $2103
003576r 1               
003576r 1  A0 00 04     	LDY #$0400
003579r 1  8C 00 43     	STY $4300		; CPU -> PPU, auto increment, write 1 reg, $2104 (OAM data write)
00357Cr 1  A0 00 04     	LDY #$0400
00357Fr 1  8C 02 43     	STY $4302		; source offset
003582r 1  A0 20 02     	LDY #$0220
003585r 1  8C 05 43     	STY $4305		; number of bytes to transfer
003588r 1  A9 7E        	LDA #$7E
00358Ar 1  8D 04 43     	STA $4304		; bank address = $7E  (work RAM)
00358Dr 1  60           	rts
00358Dr 1               
