ca65 V2.16 - Git f19651c
Main file   : main.asm
Current file: main.asm

000000r 1               .include "header.inc"
000000r 2               ; Sets up ROM headers/vectors
000000r 2               
000000r 2               .p816   ; 65816 processor
000000r 2               .i16    ; X/Y are 16 bits
000000r 2               .a8     ; A is 8 bits
000000r 2               
000000r 2               .define ROM_NAME "zoz zle zozzle       "
000000r 2                               ;"123456789012345678901"
000000r 2               .segment "HEADER"     ; +$7FE0 in file
000000r 2  7A 6F 7A 20      .byte ROM_NAME
000004r 2  7A 6C 65 20  
000008r 2  7A 6F 7A 7A  
000015r 2               
000015r 2               .segment "ROMINFO"    ; +$7FD5 in file
000000r 2  30               .byte $30         ; LoROM, fast-capable
000001r 2  00               .byte 0           ; no battery RAM
000002r 2  07               .byte $07         ; 128K ROM
000003r 2  00 00 00 00      .byte 0,0,0,0
000007r 2  AA AA 55 55      .word $AAAA,$5555 ; dummy checksum and complement
00000Br 2               
00000Br 2               ;cop,brk,abort,nmi,reset,irq
00000Br 2               ;cop,abort,nmi,res,brk,irqbrk
00000Br 2               .segment "VECTORS"
000000r 2  00 00 00 00      .word 0, 0, EmptyHandler0, EmptyHandler1, EmptyHandler2, VBlank, Reset, EmptyHandler3
000004r 2  rr rr rr rr  
000008r 2  rr rr rr rr  
000010r 2  00 00 00 00      .word 0, 0, EmptyHandler4, EmptyHandler5, VBlank, EmptyHandler6, Reset, EmptyHandler7
000014r 2  rr rr rr rr  
000018r 2  rr rr rr rr  
000020r 2               
000020r 2               .segment "CODE"
000000r 2               EmptyHandler0:
000000r 2  40           	rti
000001r 2               EmptyHandler1:
000001r 2  40           	rti
000002r 2               EmptyHandler2:
000002r 2  40           	rti
000003r 2               EmptyHandler3:
000003r 2  40           	rti
000004r 2               EmptyHandler4:
000004r 2  40           	rti
000005r 2               EmptyHandler5:
000005r 2  40           	rti
000006r 2               EmptyHandler6:
000006r 2  40           	rti
000007r 2               EmptyHandler7:
000007r 2  40           	rti
000008r 2               
000008r 1               .include "initSNES.inc"
000008r 2               ;------------------------------------------------------------------------
000008r 2               ;-  Written by: Neviksti
000008r 2               ;-     If you use my code, please share your creations with me
000008r 2               ;-     as I am always curious :)
000008r 2               ;------------------------------------------------------------------------
000008r 2               
000008r 2               
000008r 2               ;----------------------------------------------------------------------------
000008r 2               ; InitSNES -- my "standard" initialization of SNES memory and registers
000008r 2               ;----------------------------------------------------------------------------
000008r 2               .macro InitSNES
000008r 2                 sei                     ;disable interrupts
000008r 2                 clc                     ;switch to native mode
000008r 2                 xce
000008r 2               
000008r 2                 REP #$38		; mem/A = 16 bit, X/Y = 16 bit
000008r 2               			;decimal mode off
000008r 2                 .i16
000008r 2                 LDX #$1FFF	;Setup the stack
000008r 2                 TXS			;Transfer Index X to Stack Pointer Register
000008r 2               
000008r 2                 ;do the rest of the initialization in a routine
000008r 2                 JSL InitializeSNES
000008r 2               
000008r 2                 SEP #$20		; mem/A = 8 bit
000008r 2               .endmacro
000008r 2               
000008r 2               ;----------------------------------------------------------------------------
000008r 2               
000008r 2               .segment "CODE"
000008r 2               
000008r 2               InitializeSNES:
000008r 2  4B             PHK			;set Data Bank = Program Bank
000009r 2  AB             PLB
00000Ar 2               
00000Ar 2  A9 00          LDA #$0000	;set Direct Page = $0000
00000Cr 2  5B             TCD			;Transfer Accumulator to Direct Register
00000Dr 2               
00000Dr 2  AE FD 1F       LDX $1FFD		;we clear all the mem at one point ...
000010r 2  8E 72 43       STX $4372  	;so save the return address in a place that won't get overwritten
000013r 2  AE FF 1F       LDX $1FFF
000016r 2  8E 74 43       STX $4374
000019r 2               
000019r 2  E2 20          SEP #$20		; mem/A = 8 bit
00001Br 2  C2 10          REP #$10
00001Dr 2               
00001Dr 2  A9 8F          LDA #$8F
00001Fr 2  8D 00 21       STA $2100		;turn screen off for now, set brightness to normal
000022r 2               
000022r 2  A2 01 21       LDX #$2101
000025r 2               _Loop00:		;regs $2101-$210C
000025r 2  74 00          STZ $00,X		;set Sprite,Character,Tile sizes to lowest, and set addresses to $0000
000027r 2  E8             INX
000028r 2  E0 0D 21       CPX #$210D
00002Br 2  D0 F8          BNE _Loop00
00002Dr 2               
00002Dr 2               _Loop01:		;regs $210D-$2114
00002Dr 2  74 00          STZ $00,X		;Set all BG scroll values to $0000
00002Fr 2  74 00          STZ $00,X
000031r 2  E8             INX
000032r 2  E0 15 21       CPX #$2115
000035r 2  D0 F6          BNE _Loop01
000037r 2               
000037r 2  A9 80          LDA #$80		;reg $2115
000039r 2  8D 15 21       STA $2115		; Initialize VRAM transfer mode to word-access, increment by 1
00003Cr 2               
00003Cr 2  9C 16 21       STZ $2116		;regs $2117-$2117
00003Fr 2  9C 17 21       STZ $2117		;VRAM address = $0000
000042r 2               
000042r 2               			;reg $2118-$2119
000042r 2               			;VRAM write register... don't need to initialize
000042r 2               
000042r 2  9C 1A 21       STZ $211A		;clear Mode7 setting
000045r 2               
000045r 2  A2 1B 21       LDX #$211B
000048r 2               _Loop02:		;regs $211B-$2120
000048r 2  74 00          STZ $00,X		;clear out the Mode7 matrix values
00004Ar 2  74 00          STZ $00,X
00004Cr 2  E8             INX
00004Dr 2  E0 21 21       CPX #$2121
000050r 2  D0 F6          BNE _Loop02
000052r 2               
000052r 2               			;reg $2121 - Color address, doesn't need initilaizing
000052r 2               			;reg $2122 - Color data, is initialized later
000052r 2               
000052r 2  A2 23 21       LDX #$2123
000055r 2               _Loop03:		;regs $2123-$2133
000055r 2  74 00          STZ $00,X		;turn off windows, main screens, sub screens, color addition,
000057r 2  E8             INX			;fixed color = $00, no super-impose (external synchronization),
000058r 2  E0 34 21       CPX #$2134	;no interlaced mode, normal resolution
00005Br 2  D0 F8          BNE _Loop03
00005Dr 2               
00005Dr 2               			;regs $2134-$2136  - multiplication result, no initialization needed
00005Dr 2               			;reg $2137 - software H/V latch, no initialization needed
00005Dr 2               			;reg $2138 - Sprite data read, no initialization needed
00005Dr 2               			;regs $2139-$213A  - VRAM data read, no initialization needed
00005Dr 2               			;reg $213B - Color RAM data read, no initialization needed
00005Dr 2               			;regs $213C-$213D  - H/V latched data read, no initialization needed
00005Dr 2               
00005Dr 2  9C 3E 21       STZ $213E		;reg $213E - might not be necesary, but selects PPU master/slave mode
000060r 2               			;reg $213F - PPU status flag, no initialization needed
000060r 2               
000060r 2               			;reg $2140-$2143 - APU communication regs, no initialization required
000060r 2               
000060r 2               			;reg $2180  -  read/write WRAM register, no initialization required
000060r 2               			;reg $2181-$2183  -  WRAM address, no initialization required
000060r 2               
000060r 2               			;reg $4016-$4017  - serial JoyPad read registers, no need to initialize
000060r 2               
000060r 2               
000060r 2  9C 00 42       STZ $4200		;reg $4200  - disable timers, NMI,and auto-joyread
000063r 2               
000063r 2  A9 FF          LDA #$FF
000065r 2  8D 01 42       STA $4201		;reg $4201  - programmable I/O write port, initalize to allow reading at in-port
000068r 2               
000068r 2               			;regs $4202-$4203  - multiplication registers, no initialization required
000068r 2               			;regs $4204-$4206  - division registers, no initialization required
000068r 2               
000068r 2               			;regs $4207-$4208  - Horizontal-IRQ timer setting, since we disabled this, it is OK to not init
000068r 2               			;regs $4209-$420A  - Vertical-IRQ timer setting, since we disabled this, it is OK to not init
000068r 2               
000068r 2  9C 0B 42       STZ $420B		;reg $420B  - turn off all general DMA channels
00006Br 2  9C 0C 42       STZ $420C		;reg $420C  - turn off all H-MA channels
00006Er 2               
00006Er 2  9C 0D 42       STZ $420D		;reg $420D  - ROM access time to slow (2.68Mhz)
000071r 2               
000071r 2  AD 10 42       LDA $4210		;reg $4210  - NMI status, reading resets
000074r 2               
000074r 2               			;reg $4211  - IRQ status, no need to initialize
000074r 2               			;reg $4212  - H/V blank and JoyRead status, no need to initialize
000074r 2               			;reg $4213  - programmable I/O inport, no need to initialize
000074r 2               
000074r 2               			;reg $4214-$4215  - divide results, no need to initialize
000074r 2               			;reg $4216-$4217  - multiplication or remainder results, no need to initialize
000074r 2               
000074r 2               			;regs $4218-$421f  - JoyPad read registers, no need to initialize
000074r 2               
000074r 2               			;regs $4300-$437F
000074r 2               			;no need to intialize because DMA was disabled above
000074r 2               			;also, we're not sure what all of the registers do, so it is better to leave them at
000074r 2               			;their reset state value
000074r 2               
000074r 2               ;  JSR ClearVRAM      ;Reset VRAM
000074r 2                ; JSR ClearPalette   ;Reset colors
000074r 2               
000074r 2                 ;**** clear Sprite tables ********
000074r 2               
000074r 2  9C 02 21       STZ $2102	;sprites initialized to be off the screen, palette 0, character 0
000077r 2  9C 03 21       STZ $2103
00007Ar 2  A2 80 00       LDX #$0080
00007Dr 2  A9 F0          LDA #$F0
00007Fr 2               _Loop08:
00007Fr 2  8D 04 21       STA $2104	;set X = 240
000082r 2  8D 04 21       STA $2104	;set Y = 240
000085r 2  9C 04 21       STZ $2104	;set character = $00
000088r 2  9C 04 21       STZ $2104	;set priority=0, no flips
00008Br 2  CA             DEX
00008Cr 2  D0 F1          BNE _Loop08
00008Er 2               
00008Er 2  A2 20 00       LDX #$0020
000091r 2               _Loop09:
000091r 2  9C 04 21       STZ $2104		;set size bit=0, x MSB = 0
000094r 2  CA             DEX
000095r 2  D0 FA          BNE _Loop09
000097r 2               
000097r 2                 ;**** clear WRAM ********
000097r 2  9C 81 21       STZ $2181		;set WRAM address to $000000
00009Ar 2  9C 82 21       STZ $2182
00009Dr 2  9C 83 21       STZ $2183
0000A0r 2               
0000A0r 2  A2 08 80       LDX #$8008
0000A3r 2  8E 00 43       STX $4300         ;Set DMA mode to fixed source, BYTE to $2180
0000A6r 2  A2 rr rr       LDX #wram_fill_byte
0000A9r 2  8E 02 43       STX $4302         ;Set source offset
0000ACr 2  A9 rr          LDA #<.bank(wram_fill_byte)
0000AEr 2  8D 04 43       STA $4304         ;Set source bank
0000B1r 2  A2 00 00       LDX #$0000
0000B4r 2  8E 05 43       STX $4305         ;Set transfer size to 64k bytes
0000B7r 2  A9 01          LDA #$01
0000B9r 2  8D 0B 42       STA $420B         ;Initiate transfer
0000BCr 2               
0000BCr 2  A9 01          LDA #$01          ;now set the next 64k bytes
0000BEr 2  8D 0B 42       STA $420B         ;Initiate transfer
0000C1r 2               
0000C1r 2  4B             PHK			;make sure Data Bank = Program Bank
0000C2r 2  AB             PLB
0000C3r 2               
0000C3r 2  58             CLI			;enable interrupts again
0000C4r 2               
0000C4r 2  AE 72 43       LDX $4372  	;get our return address...
0000C7r 2  8E FD 1F       STX $1FFD
0000CAr 2  AD 74 43       LDA $4374
0000CDr 2  8D FF 1F       STA $1FFF
0000D0r 2  6B             RTL
0000D1r 2               
0000D1r 2               wram_fill_byte:
0000D1r 2  00           .byte $00
0000D2r 2               
0000D2r 2               ;----------------------------------------------------------------------------
0000D2r 2               ; ClearVRAM -- Sets every byte of VRAM to zero
0000D2r 2               ; In: None
0000D2r 2               ; Out: None
0000D2r 2               ; Modifies: flags
0000D2r 2               ;----------------------------------------------------------------------------
0000D2r 2               ClearVRAM:
0000D2r 2  48              pha
0000D3r 2  DA              phx
0000D4r 2  08              php
0000D5r 2               
0000D5r 2  C2 30           REP #$30		; mem/A = 8 bit, X/Y = 16 bit
0000D7r 2  E2 20           SEP #$20
0000D9r 2               
0000D9r 2  A9 80           LDA #$80
0000DBr 2  8D 15 21        STA $2115         ;Set VRAM port to word access
0000DEr 2  A2 09 18        LDX #$1809
0000E1r 2  8E 00 43        STX $4300         ;Set DMA mode to fixed source, WORD to $2118/9
0000E4r 2  A2 00 00        LDX #$0000
0000E7r 2  8E 16 21        STX $2116         ;Set VRAM port address to $0000
0000EAr 2  86 00           STX $0000         ;Set $00:0000 to $0000 (assumes scratchpad ram)
0000ECr 2  8E 02 43        STX $4302         ;Set source address to $xx:0000
0000EFr 2  A9 00           LDA #$00
0000F1r 2  8D 04 43        STA $4304         ;Set source bank to $00
0000F4r 2  A2 FF FF        LDX #$FFFF
0000F7r 2  8E 05 43        STX $4305         ;Set transfer size to 64k-1 bytes
0000FAr 2  A9 01           LDA #$01
0000FCr 2  8D 0B 42        STA $420B         ;Initiate transfer
0000FFr 2               
0000FFr 2  9C 19 21        STZ $2119         ;clear the last byte of the VRAM
000102r 2               
000102r 2  28              plp
000103r 2  FA              plx
000104r 2  68              pla
000105r 2  60              RTS
000106r 2               
000106r 2               ;----------------------------------------------------------------------------
000106r 2               ; ClearPalette -- Reset all palette colors to zero
000106r 2               ; In: None
000106r 2               ; Out: None
000106r 2               ; Modifies: flags
000106r 2               ;----------------------------------------------------------------------------
000106r 2               ClearPalette:
000106r 2  DA              PHX
000107r 2  08              PHP
000108r 2  C2 30           REP #$30		; mem/A = 8 bit, X/Y = 16 bit
00010Ar 2  E2 20           SEP #$20
00010Cr 2               
00010Cr 2  9C 21 21        STZ $2121
00010Fr 2  A2 00 01        LDX #$0100
000112r 2               ClearPaletteLoop:
000112r 2  9C 22 21        STZ $2122
000115r 2  9C 22 21        STZ $2122
000118r 2  CA              DEX
000119r 2  D0 F7           BNE ClearPaletteLoop
00011Br 2               
00011Br 2  28              PLP
00011Cr 2  FA              PLX
00011Dr 2  60              RTS
00011Er 2               
00011Er 2               
00011Er 1               .include "constants.asm"
00011Er 2               .enum ;start at $10 because first 15 bytes are "scratchpad"
00011Er 2               scrollX = $10
00011Er 2               scrollY = scrollX+2 ;12
00011Er 2               scroll2X = scrollY+2 ;14
00011Er 2               playerHSpeed = scroll2X+2 ;16
00011Er 2               spriteX = playerHSpeed+2 ;18
00011Er 2               spriteY = spriteX+2 ;1a
00011Er 2               playerX = spriteY+2;like sprite x but "relative to tilemap" ;1c
00011Er 2               playerY = playerX+2 ;1e
00011Er 2               playerTileOffset = playerY+2 ;20
00011Er 2               playerTileNum = playerTileOffset+2 ;22
00011Er 2               collision
00011Er 2               playerAttrs = collision+2
00011Er 2               playerVSpeed
00011Er 2               playerState
00011Er 2               movementState
00011Er 2               frameStatus
00011Er 2               .endenum
00011Er 2               
00011Er 2               ;---joypad---
00011Er 2               
00011Er 2               .define JOY_B $80
00011Er 2               .define JOY_Y $40
00011Er 2               .define JOY_SELECT $20
00011Er 2               .define JOY_START $10
00011Er 2               .define JOY_UP $8
00011Er 2               .define JOY_DOWN $4
00011Er 2               .define JOY_LEFT $2
00011Er 2               .define JOY_RIGHT $1
00011Er 2               
00011Er 2               ;---oam pt 2 write masks---
00011Er 2               
00011Er 2               .define SPRITE3_MASK %00111111
00011Er 2               .define SPRITE2_MASK %11001111
00011Er 2               .define SPRITE1_MASK %11110011
00011Er 2               .define SPRITE0_MASK %11111100
00011Er 2               
00011Er 2               ;oam mirror defines
00011Er 2               .define OamMirror $400
00011Er 2               .define Oam2Mirror $600
00011Er 2               .define TilemapMirror $2000
00011Er 2               
00011Er 2               .define BG2ScrollTable $620
00011Er 2               ;object list format:
00011Er 2               ; x pos (byte)
00011Er 2               ; y pos (byte)
00011Er 2               ; attributes (byte)
00011Er 2               ; status (0=still, 1 = moving, 2 = ready to despawn, etc) (byte)
00011Er 2               ; pointer to "handler" function
00011Er 2               .define EntityList $630
00011Er 2               
00011Er 1               .include "macros.asm"
00011Er 2               .macro LoadPalette source, colorIndex, numColors
00011Er 2               ;parameters:
00011Er 2               ;source, color to start on, number of colors to copy
00011Er 2                   lda #colorIndex
00011Er 2                   sta $2121       ; Start at START color
00011Er 2                   lda #<.bank(source)        ; Using : before the parameter gets its bank.
00011Er 2                   ldx #source         ; Not using : gets the offset address.
00011Er 2                   ldy #(numColors * 2)   ; 2 bytes for every color
00011Er 2                   jsr DMAPalette
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro LoadBlockToVRAM source, destination, size
00011Er 2               ;parameters:
00011Er 2               ;source, destination, size
00011Er 2                   lda #$80
00011Er 2                   sta $2115       ; Set VRAM transfer mode to word-access, increment by 1
00011Er 2                   ldx #destination         ; DEST
00011Er 2                   stx $2116       ; $2116: Word address for accessing VRAM.
00011Er 2                   lda #.lobyte(.bank(source))        ; SRCBANK
00011Er 2                   ldx #.loword(source)         ; SRCOFFSET
00011Er 2                   ldy #size         ; SIZE
00011Er 2                   jsr LoadVRAM
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro LoadBlockToWRAM source, destination, size
00011Er 2               	ldx #.loword(source)
00011Er 2               	stx $4302 ;source address
00011Er 2               	lda #.lobyte(.bank(source))
00011Er 2               	sta $4304 ;bank
00011Er 2               	ldx #size
00011Er 2               	stx $4305
00011Er 2               	ldx #destination ; set wram transfer address
00011Er 2               	stx $2181
00011Er 2               	stz $2183 ;only accesses the first 64k, yolo
00011Er 2               	lda #$80 ;dest = vram port
00011Er 2               	sta $4301
00011Er 2               	stz $4300 ; 1 byte transfer, auto-increment
00011Er 2               	lda #$1
00011Er 2               	sta $420b ;start transfer
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro DMATilemapMirror screen
00011Er 2               	lda #$80
00011Er 2               	sta $2115 ;word-access,increment by one
00011Er 2               	a16
00011Er 2               	lda screen ;calculate offset based on screen parameter
00011Er 2               	xba
00011Er 2               	clc
00011Er 2               	rol a
00011Er 2               	rol a
00011Er 2               	sta $2116 ;vram address to write to
00011Er 2               	rol a
00011Er 2               	ora #$2000
00011Er 2               	sta $4312 ;dma source address
00011Er 2               	a8
00011Er 2               	lda #$7e
00011Er 2               	sta $4314 ;bank
00011Er 2               	ldx #$800
00011Er 2               	stx $4315
00011Er 2               	lda #$18 ;dest = $2118, vram write register
00011Er 2               	sta $4311
00011Er 2               	lda #$1 ;word increment on dest, src increment
00011Er 2               	sta $4310
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro WriteTilemap screen, xOff, yOff, data
00011Er 2               ;point to write to = ($800*screen + $20*yOff+xOff)*2
00011Er 2               ;writes to $0 and $1
00011Er 2               	a16
00011Er 2               	lda screen
00011Er 2               	xba
00011Er 2               	clc
00011Er 2               	rol a
00011Er 2               	rol a
00011Er 2               	rol a ;screens are $800 apart, so multiply it by that
00011Er 2               	sta $0
00011Er 2               	lda yOff ;each "screen" is 32x32 words or $40x$40 bytes
00011Er 2               	; rol a
00011Er 2               	; rol a
00011Er 2               	; rol a
00011Er 2               	; rol a
00011Er 2               	; rol a
00011Er 2               	; rol a
00011Er 2               	xba
00011Er 2               	clc
00011Er 2               	ror a
00011Er 2               	ror a
00011Er 2               	ora $0
00011Er 2               	clc
00011Er 2               	adc xOff ;words, so add twice to multiply by 2
00011Er 2               	clc
00011Er 2               	adc xOff
00011Er 2               	sta $0
00011Er 2               	a8
00011Er 2               	lda #$7e
00011Er 2               	pha
00011Er 2               	plb
00011Er 2               	a16
00011Er 2               	lda data
00011Er 2               	ldx $0
00011Er 2               	sta $2000,x
00011Er 2               	a8
00011Er 2               	lda #$0
00011Er 2               	pha
00011Er 2               	plb
00011Er 2               	stz $0 ;cleanup
00011Er 2               	stz $1 ;cleanup
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro DrawBox screen, x1, y1, x2, y2
00011Er 2               ;note that "coordinates" are tiles, not pixels
00011Er 2               .scope
00011Er 2               	lda x2
00011Er 2               	sta $4
00011Er 2               	lda y1 ;$2 apart because gets read in 16-bit mdode
00011Er 2               	sta $6 ;inside writeTilemap
00011Er 2               	lda y2
00011Er 2               	sta $8
00011Er 2               @DrawVLoop:
00011Er 2               	lda x1
00011Er 2               	sta $2
00011Er 2               @DrawHLoop:
00011Er 2               	WriteTilemap screen, $2, $6, #$1
00011Er 2               	lda $2
00011Er 2               	inc a
00011Er 2               	sta $2
00011Er 2               	cmp $4
00011Er 2               	bne @DrawHLoop
00011Er 2               	lda $6
00011Er 2               	inc a
00011Er 2               	sta $6
00011Er 2               	cmp $8
00011Er 2               	bne @DrawVLoop
00011Er 2               	ldx #$a
00011Er 2               	jsr ClearMem
00011Er 2               .endscope
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro DrawLine screen, x1, x2, yVal
00011Er 2               .scope
00011Er 2               	lda x1
00011Er 2               	sta $2
00011Er 2               	lda x2 ;$2 apart because gets read in 16-bit mdode
00011Er 2               	sta $4 ;inside writeTilemap
00011Er 2               @DrawLoop:
00011Er 2               	WriteTilemap screen, $2, yVal, #$1
00011Er 2               	lda $2
00011Er 2               	inc a
00011Er 2               	sta $2
00011Er 2               	cmp $4
00011Er 2               	bne @DrawLoop
00011Er 2               	ldx #$6
00011Er 2               	jsr ClearMem
00011Er 2               .endscope
00011Er 2               .endmacro
00011Er 2               
00011Er 2               
00011Er 2               .macro SetHScroll hVal
00011Er 2               ;parameter: mem address of horizontal scroll val
00011Er 2               	rep #$20
00011Er 2               	lda hVal
00011Er 2               	sep #$20
00011Er 2               	sta $210D	; BG1 horiz scroll
00011Er 2               	xba
00011Er 2               	sta $210D
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro SetVScroll vVal
00011Er 2               ;parameter: mem address of vertical scroll val
00011Er 2               	rep #$20
00011Er 2               	lda vVal
00011Er 2               	sep #$20
00011Er 2               	sta $210E	; BG1 vert scroll
00011Er 2               	xba
00011Er 2               	sta $210E
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro SetMosaic level
00011Er 2               ;parameter: mosaic level (0-15 dec, 0-f hex)
00011Er 2               	lda level
00011Er 2               	and #$F ;param %=15
00011Er 2               	clc
00011Er 2               	ror a
00011Er 2               	ror a
00011Er 2               	ror a
00011Er 2               	ora #$1
00011Er 2               	sta $2106
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro PositiveDiff val1, val2
00011Er 2               ;puts the difference of val1 and val2 into a
00011Er 2               	lda val1
00011Er 2               	cmp val2
00011Er 2               	bcs @Val1Greater
00011Er 2               	sec
00011Er 2               	lda val2
00011Er 2               	sbc val1
00011Er 2               	jmp @end
00011Er 2               @Val1Greater:
00011Er 2               	sec
00011Er 2               	sbc val2
00011Er 2               @end:
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro a16
00011Er 2               	rep #$20
00011Er 2               	.a16
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro a8
00011Er 2               	sep #$20
00011Er 2               	.a8
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .segment "CODE"
00011Er 2               DMAPalette:
00011Er 2               ;a- data bank
00011Er 2               ;x- data offset
00011Er 2               ;y- size of data
00011Er 2               
00011Er 2               ;processor status onto stack
00011Er 2  8B           	phb
00011Fr 2  08           	php
000120r 2  8E 02 43     	stx $4302 ;address into dma 0 source register
000123r 2  8D 04 43     	sta $4304 ;bank into channel 0 bank register
000126r 2  8C 05 43     	sty $4305 ;number of bytes into channel 0 size
000129r 2  9C 00 43     	stz $4300 ;dma byte mode, increment by 1
00012Cr 2  A9 22        	lda #$22 ;$2122=color palette write
00012Er 2  8D 01 43     	sta $4301
000131r 2  A9 01        	lda #$1
000133r 2  8D 0B 42     	sta $420B ;start transfer
000136r 2               
000136r 2  28           	plp
000137r 2  AB           	plb
000138r 2  60           	rts
000139r 2               
000139r 2               LoadVRAM:
000139r 2               ;a- data bank
000139r 2               ;x- data offset
000139r 2               ;y- num of bytes to copy
000139r 2  8B           	phb
00013Ar 2  08               php         ; Preserve Registers
00013Br 2  8E 02 43         stx $4302   ; Store Data offset into DMA source offset
00013Er 2  8D 04 43         sta $4304   ; Store data Bank into DMA source bank
000141r 2  8C 05 43         sty $4305   ; Store size of data block
000144r 2               
000144r 2  A9 01            lda #$1
000146r 2  8D 00 43         sta $4300   ; Set DMA mode (word, normal increment)
000149r 2  A9 18            lda #$18    ; Set the destination register (VRAM write register)
00014Br 2  8D 01 43         sta $4301
00014Er 2  A9 01            lda #$1    ; Initiate DMA transfer (channel 1)
000150r 2  8D 0B 42     	sta $420B
000153r 2               
000153r 2  28               plp         ; restore registers
000154r 2  AB           	plb
000155r 2  60               rts         ; return
000156r 2               
000156r 2               ClearMem:
000156r 2               ;x- amount of ram to clear
000156r 2               @ClearLoop:
000156r 2  74 00        	stz $0, x
000158r 2  CA           	dex
000159r 2  D0 FB        	bne @ClearLoop
00015Br 2  64 00        	stz $0
00015Dr 2  60           	rts
00015Er 2               
00015Er 2               
00015Er 1               .include "sprites.asm"
00015Er 2               spriteNum = $0
00015Er 2               oam2Data = $1
00015Er 2               oam2WriteIndex = $2
00015Er 2               
00015Er 2               .macro LoadSprite sprite, xOffset, yOffset, tileNum, attributes, xBit, size
00015Er 2               ;parameters: sprite num, pointer to x coord, pointer to y coord, pointer to tile num, attributes,first bit of x coordinate, big/small
00015Er 2               ;shoutout to nintendo for making me go through all this bullshit, can't have
00015Er 2               ; all the memory together or something sane
00015Er 2               	lda sprite
00015Er 2               	sta spriteNum
00015Er 2               	a16
00015Er 2               	lda sprite
00015Er 2               	clc
00015Er 2               	rol a
00015Er 2               	rol a ;multiply sprite num by 4 because each index in oam table is 4 bytes
00015Er 2               	tax
00015Er 2               	a8
00015Er 2               	lda xOffset
00015Er 2               	sta OamMirror,x
00015Er 2               	inx
00015Er 2               	lda yOffset
00015Er 2               	sta OamMirror,x
00015Er 2               	inx
00015Er 2               	lda tileNum
00015Er 2               	sta OamMirror,x
00015Er 2               	inx
00015Er 2               	lda attributes
00015Er 2               	sta OamMirror,x
00015Er 2               
00015Er 2               	lda xBit
00015Er 2               	and #$1 ;make sure only 1 bit
00015Er 2               	sta oam2Data ;mess around with first bit of x coordinate b/c nintendo stored it separately
00015Er 2               	lda size
00015Er 2               	and #$1 ;combine sprite size and msb of xpos
00015Er 2               	ror a
00015Er 2               	ora oam2Data
00015Er 2               	sta oam2Data
00015Er 2               	lda spriteNum
00015Er 2               	clc
00015Er 2               	ror a ;4 sprites per oam table byte
00015Er 2               	ror a
00015Er 2               	and #$7F
00015Er 2               	sta oam2WriteIndex
00015Er 2               	jsr SetOam2Mirror
00015Er 2               .endmacro
00015Er 2               
00015Er 2               .segment "CODE"
00015Er 2               InitSprites:
00015Er 2  08           	php
00015Fr 2  A9 01        	lda #$1
000161r 2  A2 00 00     	ldx #$0
000164r 2               OamInitLoop: ;apparently just setting the sprites to $100 doesn't actually cause them to be removed from the scanline limit
000164r 2  9D 00 04     	sta OamMirror,x
000167r 2  E8           	inx
000168r 2  E8           	inx
000169r 2  E8           	inx
00016Ar 2  E8           	inx
00016Br 2  E0 00 02     	cpx #$200
00016Er 2  D0 F4        	bne OamInitLoop
000170r 2  A9 55        	lda #$55
000172r 2  A2 00 00     	ldx #$0
000175r 2               Oam2InitLoop:
000175r 2  9D 00 06     	sta Oam2Mirror,x
000178r 2  E8           	inx
000179r 2  E0 20 00     	cpx #$20 ;size of oam pt 2
00017Cr 2  D0 F7        	bne Oam2InitLoop
00017Er 2  28           	plp
00017Fr 2  60           	rts
000180r 2               
000180r 2               SetOam2Mirror:
000180r 2  08           	php
000181r 2  A5 00        	lda $0
000183r 2  29 03        	and #$3 ;check where in the byte to place 1st x bit/sprite size
000185r 2  F0 0B        	beq Sprite0
000187r 2  C9 01        	cmp #1
000189r 2  F0 16        	beq Sprite1
00018Br 2  C9 02        	cmp #2
00018Dr 2  F0 26        	beq Sprite2
00018Fr 2  4C rr rr     	jmp Sprite3
000192r 2               
000192r 2               Sprite0:
000192r 2  A6 02        	ldx oam2WriteIndex
000194r 2  BD 00 06     	lda Oam2Mirror,x
000197r 2  29 FC        	and #SPRITE0_MASK
000199r 2  05 01        	ora oam2Data
00019Br 2  9D 00 06     	sta Oam2Mirror,x
00019Er 2  4C rr rr     	jmp EndBitStuff
0001A1r 2               
0001A1r 2               Sprite1:
0001A1r 2  18           	clc
0001A2r 2  66 01        	ror oam2Data
0001A4r 2  66 01        	ror oam2Data
0001A6r 2               
0001A6r 2  A6 02        	ldx oam2WriteIndex
0001A8r 2  BD 00 06     	lda Oam2Mirror,x
0001ABr 2  29 F3        	and #SPRITE1_MASK
0001ADr 2  05 01        	ora oam2Data
0001AFr 2  9D 00 06     	sta Oam2Mirror,x
0001B2r 2  4C rr rr     	jmp EndBitStuff
0001B5r 2               Sprite2:
0001B5r 2  18           	clc
0001B6r 2  66 01        	ror oam2Data
0001B8r 2  66 01        	ror oam2Data
0001BAr 2  66 01        	ror oam2Data
0001BCr 2  66 01        	ror oam2Data
0001BEr 2               
0001BEr 2  A6 02        	ldx oam2WriteIndex
0001C0r 2  BD 00 06     	lda Oam2Mirror,x
0001C3r 2  29 CF        	and #SPRITE2_MASK
0001C5r 2  05 01        	ora oam2Data
0001C7r 2  9D 00 06     	sta Oam2Mirror,x
0001CAr 2  4C rr rr     	jmp EndBitStuff
0001CDr 2               Sprite3:
0001CDr 2  18           	clc
0001CEr 2  66 01        	ror oam2Data
0001D0r 2  66 01        	ror oam2Data
0001D2r 2  66 01        	ror oam2Data
0001D4r 2  66 01        	ror oam2Data
0001D6r 2  66 01        	ror oam2Data
0001D8r 2  66 01        	ror oam2Data
0001DAr 2               
0001DAr 2  A6 02        	ldx oam2WriteIndex
0001DCr 2  BD 00 06     	lda Oam2Mirror,x
0001DFr 2  29 3F        	and #SPRITE3_MASK
0001E1r 2  05 01        	ora oam2Data
0001E3r 2  9D 00 06     	sta Oam2Mirror,x
0001E6r 2  4C rr rr     	jmp EndBitStuff
0001E9r 2               
0001E9r 2               EndBitStuff:
0001E9r 2  28           	plp
0001EAr 2  60           	rts
0001EBr 2               
0001EBr 2               
0001EBr 1               .include "art.asm"
0001EBr 2               .segment "CODE"
0001EBr 2               
0001EBr 2               BGPalette:
0001EBr 2  00 00 01 6D  	.INCBIN ".\art\bgtiles.clr"
0001EFr 2  87 6E A3 48  
0001F3r 2  A1 71 DE 46  
0003EBr 2               
0003EBr 2               BG2Palette:
0003EBr 2  00 00 01 6D  	.INCBIN ".\art\bg2tiles.clr"
0003EFr 2  87 6E A3 48  
0003F3r 2  A1 71 C5 0D  
0005EBr 2               
0005EBr 2               SpritePalette:
0005EBr 2  00 00 10 00  	.INCBIN ".\art\larry.clr"
0005EFr 2  9F 5F 66 72  
0005F3r 2  C5 0D 1D 6F  
0007EBr 2               .segment "BANK2"
000000r 2               LarryTiles:
000000r 2               	.define NUM_LARRY_TILES $E
000000r 2               	.define LARRY_ANIMATION_DELAY $2 ;number of frames between incrementing movement
000000r 2  00 00 00 00  	.INCBIN ".\art\larry.pic"
000004r 2  00 00 00 00  
000008r 2  00 0F 00 1F  
000800r 2               BGTiles:
000800r 2  00 00 00 00  	.incbin ".\art\bgtiles.pic"
000804r 2  00 00 00 00  
000808r 2  00 00 00 00  
000C00r 2               
000C00r 2               BG2Tiles:
000C00r 2  00 00 00 00  	.incbin ".\art\bg2tiles.pic"
000C04r 2  00 00 00 00  
000C08r 2  00 00 00 00  
000E00r 2               
000E00r 2               BGTilemap:
000E00r 2               	;top left screen
000E00r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
000E04r 2  00 00 00 00  
000E08r 2  00 00 00 00  
000E40r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
000E44r 2  00 00 00 00  
000E48r 2  00 00 00 00  
000E80r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
000E84r 2  00 00 00 00  
000E88r 2  00 00 00 00  
000EC0r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
000EC4r 2  00 00 00 00  
000EC8r 2  00 00 00 00  
000F00r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
000F04r 2  00 00 00 00  
000F08r 2  00 00 00 00  
000F40r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
000F44r 2  00 00 00 00  
000F48r 2  00 00 00 00  
000F80r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
000F84r 2  00 00 00 00  
000F88r 2  00 00 00 00  
000FC0r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
000FC4r 2  00 00 00 00  
000FC8r 2  00 00 00 00  
001000r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001004r 2  00 00 00 00  
001008r 2  00 00 00 00  
001040r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001044r 2  00 00 00 00  
001048r 2  00 00 00 00  
001080r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001084r 2  00 00 00 00  
001088r 2  00 00 00 00  
0010C0r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0010C4r 2  00 00 00 00  
0010C8r 2  00 00 00 00  
001100r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001104r 2  00 00 00 00  
001108r 2  00 00 00 00  
001140r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001144r 2  00 00 00 00  
001148r 2  00 00 00 00  
001180r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001184r 2  00 00 00 00  
001188r 2  00 00 00 00  
0011C0r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0011C4r 2  00 00 00 00  
0011C8r 2  00 00 00 00  
001200r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001204r 2  00 00 00 00  
001208r 2  00 00 00 00  
001240r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001244r 2  00 00 00 00  
001248r 2  00 00 00 00  
001280r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001284r 2  00 00 00 00  
001288r 2  00 00 00 00  
0012C0r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0012C4r 2  00 00 00 00  
0012C8r 2  00 00 00 00  
001300r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001304r 2  00 00 00 00  
001308r 2  00 00 00 00  
001340r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001344r 2  00 00 00 00  
001348r 2  00 00 00 00  
001380r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001384r 2  00 00 00 00  
001388r 2  00 00 00 00  
0013C0r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0013C4r 2  00 00 00 00  
0013C8r 2  00 00 00 00  
001400r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001404r 2  00 00 00 00  
001408r 2  00 00 00 00  
001440r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001444r 2  00 00 00 00  
001448r 2  00 00 00 00  
001480r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001484r 2  00 00 00 00  
001488r 2  00 00 00 00  
0014C0r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0014C4r 2  00 00 00 00  
0014C8r 2  00 00 00 00  
001500r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001504r 2  00 00 00 00  
001508r 2  00 00 00 00  
001540r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001544r 2  00 00 00 00  
001548r 2  00 00 00 00  
001580r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001584r 2  00 00 00 00  
001588r 2  00 00 00 00  
0015C0r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0015C4r 2  00 00 00 00  
0015C8r 2  00 00 00 00  
001600r 2               
001600r 2               	;top right screen
001600r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001604r 2  00 00 00 00  
001608r 2  00 00 00 00  
001640r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001644r 2  00 00 00 00  
001648r 2  00 00 00 00  
001680r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001684r 2  00 00 00 00  
001688r 2  00 00 00 00  
0016C0r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0016C4r 2  00 00 00 00  
0016C8r 2  00 00 00 00  
001700r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001704r 2  00 00 00 00  
001708r 2  00 00 00 00  
001740r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001744r 2  00 00 00 00  
001748r 2  00 00 00 00  
001780r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001784r 2  00 00 00 00  
001788r 2  00 00 00 00  
0017C0r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0017C4r 2  00 00 00 00  
0017C8r 2  00 00 00 00  
001800r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001804r 2  00 00 00 00  
001808r 2  00 00 00 00  
001840r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$1,$0,$0,$1,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001844r 2  00 00 00 00  
001848r 2  00 00 00 00  
001880r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001884r 2  00 00 00 00  
001888r 2  00 00 00 00  
0018C0r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0018C4r 2  00 00 00 00  
0018C8r 2  00 00 00 00  
001900r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$1,$1,$1,$1,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001904r 2  00 00 00 00  
001908r 2  00 00 00 00  
001940r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001944r 2  00 00 00 00  
001948r 2  00 00 00 00  
001980r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001984r 2  00 00 00 00  
001988r 2  00 00 00 00  
0019C0r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0019C4r 2  00 00 00 00  
0019C8r 2  00 00 00 00  
001A00r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001A04r 2  00 00 00 00  
001A08r 2  00 00 00 00  
001A40r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001A44r 2  00 00 00 00  
001A48r 2  00 00 00 00  
001A80r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001A84r 2  00 00 00 00  
001A88r 2  00 00 00 00  
001AC0r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001AC4r 2  00 00 00 00  
001AC8r 2  00 00 00 00  
001B00r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001B04r 2  00 00 00 00  
001B08r 2  00 00 00 00  
001B40r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001B44r 2  00 00 00 00  
001B48r 2  00 00 00 00  
001B80r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001B84r 2  00 00 00 00  
001B88r 2  00 00 00 00  
001BC0r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001BC4r 2  00 00 00 00  
001BC8r 2  00 00 00 00  
001C00r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001C04r 2  00 00 00 00  
001C08r 2  00 00 00 00  
001C40r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001C44r 2  00 00 00 00  
001C48r 2  00 00 00 00  
001C80r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001C84r 2  00 00 00 00  
001C88r 2  00 00 00 00  
001CC0r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001CC4r 2  00 00 00 00  
001CC8r 2  00 00 00 00  
001D00r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001D04r 2  00 00 00 00  
001D08r 2  00 00 00 00  
001D40r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001D44r 2  00 00 00 00  
001D48r 2  00 00 00 00  
001D80r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001D84r 2  00 00 00 00  
001D88r 2  00 00 00 00  
001DC0r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001DC4r 2  00 00 00 00  
001DC8r 2  00 00 00 00  
001E00r 2               
001E00r 2               	;bottom left screen
001E00r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001E04r 2  00 00 00 00  
001E08r 2  00 00 00 00  
001E40r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001E44r 2  00 00 00 00  
001E48r 2  00 00 00 00  
001E80r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001E84r 2  00 00 00 00  
001E88r 2  00 00 00 00  
001EC0r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001EC4r 2  00 00 00 00  
001EC8r 2  00 00 00 00  
001F00r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001F04r 2  00 00 00 00  
001F08r 2  00 00 00 00  
001F40r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001F44r 2  00 00 00 00  
001F48r 2  00 00 00 00  
001F80r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001F84r 2  00 00 00 00  
001F88r 2  00 00 00 00  
001FC0r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001FC4r 2  00 00 00 00  
001FC8r 2  00 00 00 00  
002000r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002004r 2  00 00 00 00  
002008r 2  00 00 00 00  
002040r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002044r 2  00 00 00 00  
002048r 2  00 00 00 00  
002080r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002084r 2  00 00 00 00  
002088r 2  00 00 00 00  
0020C0r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0020C4r 2  00 00 00 00  
0020C8r 2  00 00 00 00  
002100r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002104r 2  00 00 00 00  
002108r 2  00 00 00 00  
002140r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002144r 2  00 00 00 00  
002148r 2  00 00 00 00  
002180r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002184r 2  00 00 00 00  
002188r 2  00 00 00 00  
0021C0r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0021C4r 2  00 00 00 00  
0021C8r 2  00 00 00 00  
002200r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002204r 2  00 00 00 00  
002208r 2  00 00 00 00  
002240r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002244r 2  00 00 00 00  
002248r 2  00 00 00 00  
002280r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002284r 2  00 00 00 00  
002288r 2  00 00 00 00  
0022C0r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0022C4r 2  00 00 00 00  
0022C8r 2  00 00 00 00  
002300r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$1,$1,$1,$1,$1,$1,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002304r 2  00 00 00 00  
002308r 2  00 00 00 00  
002340r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002344r 2  00 00 00 00  
002348r 2  00 00 00 00  
002380r 2  00 00 00 00  	.word $0,$0,$0,$0,$1,$1,$1,$1,$1,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002384r 2  00 00 00 00  
002388r 2  01 00 01 00  
0023C0r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0023C4r 2  00 00 00 00  
0023C8r 2  00 00 00 00  
002400r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002404r 2  00 00 00 00  
002408r 2  00 00 00 00  
002440r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002444r 2  00 00 00 00  
002448r 2  00 00 00 00  
002480r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002484r 2  00 00 00 00  
002488r 2  00 00 00 00  
0024C0r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0024C4r 2  00 00 00 00  
0024C8r 2  00 00 00 00  
002500r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002504r 2  00 00 00 00  
002508r 2  00 00 00 00  
002540r 2  01 00 01 00  	.word $1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1
002544r 2  01 00 01 00  
002548r 2  01 00 01 00  
002580r 2  02 00 02 00  	.word $2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2
002584r 2  02 00 02 00  
002588r 2  02 00 02 00  
0025C0r 2  02 00 02 00  	.word $2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2
0025C4r 2  02 00 02 00  
0025C8r 2  02 00 02 00  
002600r 2               	;bottom right screen
002600r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002604r 2  00 00 00 00  
002608r 2  00 00 00 00  
002640r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002644r 2  00 00 00 00  
002648r 2  00 00 00 00  
002680r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002684r 2  00 00 00 00  
002688r 2  00 00 00 00  
0026C0r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0026C4r 2  00 00 00 00  
0026C8r 2  00 00 00 00  
002700r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002704r 2  00 00 00 00  
002708r 2  00 00 00 00  
002740r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002744r 2  00 00 00 00  
002748r 2  00 00 00 00  
002780r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002784r 2  00 00 00 00  
002788r 2  00 00 00 00  
0027C0r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0027C4r 2  00 00 00 00  
0027C8r 2  00 00 00 00  
002800r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002804r 2  00 00 00 00  
002808r 2  00 00 00 00  
002840r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002844r 2  00 00 00 00  
002848r 2  00 00 00 00  
002880r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002884r 2  00 00 00 00  
002888r 2  00 00 00 00  
0028C0r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0028C4r 2  00 00 00 00  
0028C8r 2  00 00 00 00  
002900r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002904r 2  00 00 00 00  
002908r 2  00 00 00 00  
002940r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002944r 2  00 00 00 00  
002948r 2  00 00 00 00  
002980r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002984r 2  00 00 00 00  
002988r 2  00 00 00 00  
0029C0r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0029C4r 2  00 00 00 00  
0029C8r 2  00 00 00 00  
002A00r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002A04r 2  00 00 00 00  
002A08r 2  00 00 00 00  
002A40r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002A44r 2  00 00 00 00  
002A48r 2  00 00 00 00  
002A80r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002A84r 2  00 00 00 00  
002A88r 2  00 00 00 00  
002AC0r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002AC4r 2  00 00 00 00  
002AC8r 2  00 00 00 00  
002B00r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002B04r 2  00 00 00 00  
002B08r 2  00 00 00 00  
002B40r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002B44r 2  00 00 00 00  
002B48r 2  00 00 00 00  
002B80r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002B84r 2  00 00 00 00  
002B88r 2  00 00 00 00  
002BC0r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002BC4r 2  00 00 00 00  
002BC8r 2  00 00 00 00  
002C00r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002C04r 2  00 00 00 00  
002C08r 2  00 00 00 00  
002C40r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002C44r 2  00 00 00 00  
002C48r 2  00 00 00 00  
002C80r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002C84r 2  00 00 00 00  
002C88r 2  00 00 00 00  
002CC0r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002CC4r 2  00 00 00 00  
002CC8r 2  00 00 00 00  
002D00r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002D04r 2  00 00 00 00  
002D08r 2  00 00 00 00  
002D40r 2  01 00 01 00  	.word $1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1
002D44r 2  01 00 01 00  
002D48r 2  01 00 01 00  
002D80r 2  02 00 02 00  	.word $2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2
002D84r 2  02 00 02 00  
002D88r 2  02 00 02 00  
002DC0r 2  02 00 02 00  	.word $2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2
002DC4r 2  02 00 02 00  
002DC8r 2  02 00 02 00  
002E00r 2               
002E00r 2               CollisionMap: ;like bg map but in a more "friendly" format
002E00r 2  01 00 00 00  	.byte $1,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002E04r 2  00 00 00 00  
002E08r 2  00 00 00 00  
002E40r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002E44r 2  00 00 00 00  
002E48r 2  00 00 00 00  
002E80r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002E84r 2  00 00 00 00  
002E88r 2  00 00 00 00  
002EC0r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002EC4r 2  00 00 00 00  
002EC8r 2  00 00 00 00  
002F00r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002F04r 2  00 00 00 00  
002F08r 2  00 00 00 00  
002F40r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002F44r 2  00 00 00 00  
002F48r 2  00 00 00 00  
002F80r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002F84r 2  00 00 00 00  
002F88r 2  00 00 00 00  
002FC0r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002FC4r 2  00 00 00 00  
002FC8r 2  00 00 00 00  
003000r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003004r 2  00 00 00 00  
003008r 2  00 00 00 00  
003040r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003044r 2  00 00 00 00  
003048r 2  00 00 00 00  
003080r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003084r 2  00 00 00 00  
003088r 2  00 00 00 00  
0030C0r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0030C4r 2  00 00 00 00  
0030C8r 2  00 00 00 00  
003100r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003104r 2  00 00 00 00  
003108r 2  00 00 00 00  
003140r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003144r 2  00 00 00 00  
003148r 2  00 00 00 00  
003180r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003184r 2  00 00 00 00  
003188r 2  00 00 00 00  
0031C0r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0031C4r 2  00 00 00 00  
0031C8r 2  00 00 00 00  
003200r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003204r 2  00 00 00 00  
003208r 2  00 00 00 00  
003240r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003244r 2  00 00 00 00  
003248r 2  00 00 00 00  
003280r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003284r 2  00 00 00 00  
003288r 2  00 00 00 00  
0032C0r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0032C4r 2  00 00 00 00  
0032C8r 2  00 00 00 00  
003300r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003304r 2  00 00 00 00  
003308r 2  00 00 00 00  
003340r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003344r 2  00 00 00 00  
003348r 2  00 00 00 00  
003380r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003384r 2  00 00 00 00  
003388r 2  00 00 00 00  
0033C0r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0033C4r 2  00 00 00 00  
0033C8r 2  00 00 00 00  
003400r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003404r 2  00 00 00 00  
003408r 2  00 00 00 00  
003440r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003444r 2  00 00 00 00  
003448r 2  00 00 00 00  
003480r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003484r 2  00 00 00 00  
003488r 2  00 00 00 00  
0034C0r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0034C4r 2  00 00 00 00  
0034C8r 2  00 00 00 00  
003500r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003504r 2  00 00 00 00  
003508r 2  00 00 00 00  
003540r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003544r 2  00 00 00 00  
003548r 2  00 00 00 00  
003580r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003584r 2  00 00 00 00  
003588r 2  00 00 00 00  
0035C0r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0035C4r 2  00 00 00 00  
0035C8r 2  00 00 00 00  
003600r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003604r 2  00 00 00 00  
003608r 2  00 00 00 00  
003640r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003644r 2  00 00 00 00  
003648r 2  00 00 00 00  
003680r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003684r 2  00 00 00 00  
003688r 2  00 00 00 00  
0036C0r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0036C4r 2  00 00 00 00  
0036C8r 2  00 00 00 00  
003700r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003704r 2  00 00 00 00  
003708r 2  00 00 00 00  
003740r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003744r 2  00 00 00 00  
003748r 2  00 00 00 00  
003780r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003784r 2  00 00 00 00  
003788r 2  00 00 00 00  
0037C0r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0037C4r 2  00 00 00 00  
0037C8r 2  00 00 00 00  
003800r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003804r 2  00 00 00 00  
003808r 2  00 00 00 00  
003840r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003844r 2  00 00 00 00  
003848r 2  00 00 00 00  
003880r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003884r 2  00 00 00 00  
003888r 2  00 00 00 00  
0038C0r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0038C4r 2  00 00 00 00  
0038C8r 2  00 00 00 00  
003900r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003904r 2  00 00 00 00  
003908r 2  00 00 00 00  
003940r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003944r 2  00 00 00 00  
003948r 2  00 00 00 00  
003980r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003984r 2  00 00 00 00  
003988r 2  00 00 00 00  
0039C0r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0039C4r 2  00 00 00 00  
0039C8r 2  00 00 00 00  
003A00r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003A04r 2  00 00 00 00  
003A08r 2  00 00 00 00  
003A40r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003A44r 2  00 00 00 00  
003A48r 2  00 00 00 00  
003A80r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003A84r 2  00 00 00 00  
003A88r 2  00 00 00 00  
003AC0r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003AC4r 2  00 00 00 00  
003AC8r 2  00 00 00 00  
003B00r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003B04r 2  00 00 00 00  
003B08r 2  00 00 00 00  
003B40r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$1,$1,$1,$1,$1,$1,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003B44r 2  00 00 00 00  
003B48r 2  00 00 01 01  
003B80r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003B84r 2  00 00 00 00  
003B88r 2  00 00 00 00  
003BC0r 2  00 00 00 00  	.byte $0,$0,$0,$0,$1,$1,$1,$1,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003BC4r 2  01 01 01 01  
003BC8r 2  00 00 00 00  
003C00r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003C04r 2  00 00 00 00  
003C08r 2  00 00 00 00  
003C40r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003C44r 2  00 00 00 00  
003C48r 2  00 00 00 00  
003C80r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003C84r 2  00 00 00 00  
003C88r 2  00 00 00 00  
003CC0r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003CC4r 2  00 00 00 00  
003CC8r 2  00 00 00 00  
003D00r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003D04r 2  00 00 00 00  
003D08r 2  00 00 00 00  
003D40r 2  00 00 00 00  	.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003D44r 2  00 00 00 00  
003D48r 2  00 00 00 00  
003D80r 2  01 01 01 01  	.byte $1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1
003D84r 2  01 01 01 01  
003D88r 2  01 01 01 01  
003DC0r 2  01 01 01 01  	.byte $1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1
003DC4r 2  01 01 01 01  
003DC8r 2  01 01 01 01  
003E00r 2  01 01 01 01  	.byte $1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1,$1
003E04r 2  01 01 01 01  
003E08r 2  01 01 01 01  
003E40r 2               
003E40r 2               BG2Tilemap:
003E40r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003E44r 2  00 00 00 00  
003E48r 2  00 00 00 00  
003E80r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003E84r 2  00 00 00 00  
003E88r 2  00 00 00 00  
003EC0r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003EC4r 2  00 00 00 00  
003EC8r 2  00 00 00 00  
003F00r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003F04r 2  00 00 00 00  
003F08r 2  00 00 00 00  
003F40r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003F44r 2  00 00 00 00  
003F48r 2  00 00 00 00  
003F80r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003F84r 2  00 00 00 00  
003F88r 2  00 00 00 00  
003FC0r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
003FC4r 2  00 00 00 00  
003FC8r 2  00 00 00 00  
004000r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
004004r 2  00 00 00 00  
004008r 2  00 00 00 00  
004040r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
004044r 2  00 00 00 00  
004048r 2  00 00 00 00  
004080r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
004084r 2  00 00 00 00  
004088r 2  00 00 00 00  
0040C0r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0040C4r 2  00 00 00 00  
0040C8r 2  00 00 00 00  
004100r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
004104r 2  00 00 00 00  
004108r 2  00 00 00 00  
004140r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
004144r 2  00 00 00 00  
004148r 2  00 00 00 00  
004180r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
004184r 2  00 00 00 00  
004188r 2  00 00 00 00  
0041C0r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0041C4r 2  00 00 00 00  
0041C8r 2  00 00 00 00  
004200r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
004204r 2  00 00 00 00  
004208r 2  00 00 00 00  
004240r 2  01 00 02 00  	.word $1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4
004244r 2  03 00 04 00  
004248r 2  01 00 02 00  
004280r 2  05 00 06 00  	.word $5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8
004284r 2  07 00 08 00  
004288r 2  05 00 06 00  
0042C0r 2  01 00 02 00  	.word $1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4
0042C4r 2  03 00 04 00  
0042C8r 2  01 00 02 00  
004300r 2  05 00 06 00  	.word $5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8
004304r 2  07 00 08 00  
004308r 2  05 00 06 00  
004340r 2  01 00 02 00  	.word $1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4
004344r 2  03 00 04 00  
004348r 2  01 00 02 00  
004380r 2  05 00 06 00  	.word $5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8
004384r 2  07 00 08 00  
004388r 2  05 00 06 00  
0043C0r 2  01 00 02 00  	.word $1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4
0043C4r 2  03 00 04 00  
0043C8r 2  01 00 02 00  
004400r 2  05 00 06 00  	.word $5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8
004404r 2  07 00 08 00  
004408r 2  05 00 06 00  
004440r 2  01 00 02 00  	.word $1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4
004444r 2  03 00 04 00  
004448r 2  01 00 02 00  
004480r 2  05 00 06 00  	.word $5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8
004484r 2  07 00 08 00  
004488r 2  05 00 06 00  
0044C0r 2  01 00 02 00  	.word $1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4
0044C4r 2  03 00 04 00  
0044C8r 2  01 00 02 00  
004500r 2  05 00 06 00  	.word $5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8
004504r 2  07 00 08 00  
004508r 2  05 00 06 00  
004540r 2  01 00 02 00  	.word $1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4
004544r 2  03 00 04 00  
004548r 2  01 00 02 00  
004580r 2  05 00 06 00  	.word $5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8
004584r 2  07 00 08 00  
004588r 2  05 00 06 00  
0045C0r 2  01 00 02 00  	.word $1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4
0045C4r 2  03 00 04 00  
0045C8r 2  01 00 02 00  
004600r 2  05 00 06 00  	.word $5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8
004604r 2  07 00 08 00  
004608r 2  05 00 06 00  
004640r 2               
004640r 2               
004640r 1               .include "larry.asm"
004640r 2               .define LARRY_OFFSET $20
004640r 2               
004640r 2               .macro HandleLarry xPos, yPos, tileNum
004640r 2               ;parameters: pointer to xpos, pointer to ypos, pointer to tile number
004640r 2               	lda xPos
004640r 2               	sta $4
004640r 2               	lda yPos
004640r 2               	sta $5
004640r 2               	lda tileNum
004640r 2               	sta $6
004640r 2               	LoadSprite #0, $4, $5, $6, playerAttrs, #0, #0
004640r 2               	lda $5 ;add $10 to sprite y pos because second 16x16 sprite is directly below first
004640r 2               	clc
004640r 2               	adc #$10
004640r 2               	sta $5
004640r 2               
004640r 2               	lda $6
004640r 2               	clc
004640r 2               	adc #LARRY_OFFSET
004640r 2               	sta $6
004640r 2               	LoadSprite #1, $4, $5, $6, playerAttrs, #0, #0
004640r 2               	ldx $7
004640r 2               	ClearMemRange $0, #$7
004640r 2               .endmacro
004640r 2               
004640r 2               .macro ClearMemRange start, range
004640r 2               ;start-address to start clearing
004640r 2               ;range-num of bytes to clear
004640r 2               .scope
004640r 2               	ldx #$0
004640r 2               	@loop:
004640r 2               	stz start,x
004640r 2               	inx
004640r 2               	cpx range
004640r 2               	bne @loop
004640r 2               .endscope
004640r 2               .endmacro
004640r 2               
004640r 2               ;sprite constants
004640r 2               .define LARRY_ACCEL $1
004640r 2               .define MAX_LARRY_SPEED $6
004640r 2               .define MAX_LARRY_JUMP_HEIGHT $10
004640r 2               .define MAX_LARRY_FALL_SPEED $8
004640r 2               ;various movement states
004640r 2               .define STATE_NONE $0
004640r 2               .define STATE_RIGHT_PRESSED $1
004640r 2               .define STATE_RIGHT_RELEASED $2
004640r 2               .define STATE_LEFT_PRESSED $3
004640r 2               .define STATE_LEFT_RELEASED $4
004640r 2               
004640r 2               ;player states
004640r 2               .define STATE_GROUND $0
004640r 2               .define STATE_JUMP_RISE $1
004640r 2               .define STATE_JUMP_FALL $2
004640r 2               
004640r 2               ;animation frames
004640r 2               .define LARRY_JUMP_FRAME $E
004640r 2               
004640r 2               .segment "CODE"
0007EBr 2               
0007EBr 2               SetPlayerVals:
0007EBr 2               	;set "absolute" player x and y values
0007EBr 2  C2 20        	a16
0007EDr 2  A5 18        	lda spriteX
0007EFr 2  18           	clc
0007F0r 2  65 10        	adc scrollX
0007F2r 2  29 FF 01     	and #$1ff ;snes background = 512 pixels, or $200 binary
0007F5r 2  85 1C        	sta playerX
0007F7r 2  A5 1A        	lda spriteY
0007F9r 2  18           	clc
0007FAr 2  65 12        	adc scrollY
0007FCr 2  29 FF 01     	and #$1ff
0007FFr 2  38           	sec
000800r 2  E9 05 00     	sbc #$5 ;account for sprite's blank space
000803r 2  85 1E        	sta playerY
000805r 2  A5 1C        	lda playerX ; reduce the position to a $3f range
000807r 2  6A           	ror a ;divide by 8
000808r 2  6A           	ror a
000809r 2  6A           	ror a
00080Ar 2  29 3F 00     	and #$3f
00080Dr 2  85 00        	sta $0
00080Fr 2  A5 1E        	lda playerY ;same "formula" as for x, but also needs to be shifted left 6 times
000811r 2  2A           	rol a
000812r 2  2A           	rol a
000813r 2  2A           	rol a
000814r 2  29 C0 0F     	and #$fc0 ;max possible value
000817r 2  18           	clc
000818r 2  65 00        	adc $0
00081Ar 2  85 20        	sta playerTileOffset
00081Cr 2  E2 20        	a8
00081Er 2  64 00        	stz $0
000820r 2  60           	rts
000821r 2               
000821r 2               CheckCollisionR: ;sprite is 16x32 or 2x4 tiles
000821r 2  8B           	phb
000822r 2  A9 rr        	lda #.lobyte(.bank(CollisionMap))
000824r 2  48           	pha
000825r 2  AB           	plb
000826r 2  C2 20        	a16
000828r 2  A5 20        	lda playerTileOffset ;top right
00082Ar 2  1A           	ina
00082Br 2  AA           	tax
00082Cr 2  BD rr rr     	lda CollisionMap, x
00082Fr 2  85 23        	sta collision
000831r 2  8A           	txa ;load offset back into a
000832r 2  18           	clc
000833r 2  69 80 00     	adc #$80 ;$40 tiles per row
000836r 2  AA           	tax
000837r 2  BD rr rr     	lda CollisionMap, x
00083Ar 2  05 23        	ora collision ;if top or bottom collision
00083Cr 2  85 23        	sta collision
00083Er 2  E2 20        	a8
000840r 2  AB           	plb
000841r 2  A5 23        	lda collision
000843r 2  60           	rts
000844r 2               
000844r 2               CheckCollisionL:
000844r 2  8B           	phb
000845r 2  A9 rr        	lda #.lobyte(.bank(CollisionMap))
000847r 2  48           	pha
000848r 2  AB           	plb
000849r 2  C2 20        	a16
00084Br 2  A6 20        	ldx playerTileOffset ;top left
00084Dr 2  BD rr rr     	lda CollisionMap, x
000850r 2  85 23        	sta collision
000852r 2  8A           	txa
000853r 2  18           	clc
000854r 2  69 80 00     	adc #$80 ;bottom left
000857r 2  AA           	tax
000858r 2  BD rr rr     	lda CollisionMap, x
00085Br 2  05 23        	ora collision
00085Dr 2  85 23        	sta collision
00085Fr 2  E2 20        	a8
000861r 2  AB           	plb
000862r 2  A5 23        	lda collision
000864r 2  60           	rts
000865r 2               
000865r 2               CheckCollisionB: ;checks if block below character is solid or not
000865r 2  8B           	phb
000866r 2  A9 rr        	lda #.lobyte(.bank(CollisionMap))
000868r 2  48           	pha
000869r 2  AB           	plb
00086Ar 2  C2 20        	a16
00086Cr 2  A5 20        	lda playerTileOffset
00086Er 2  18           	clc
00086Fr 2  69 40 01     	adc #$140
000872r 2  AA           	tax
000873r 2  BD rr rr     	lda CollisionMap, x ;bottom left
000876r 2  85 23        	sta collision
000878r 2  E8           	inx
000879r 2  BD rr rr     	lda CollisionMap, x ;bottom right
00087Cr 2  05 23        	ora collision
00087Er 2  85 23        	sta collision
000880r 2  E2 20        	a8
000882r 2  AB           	plb
000883r 2  A5 23        	lda collision
000885r 2  60           	rts
000886r 2               
000886r 2               
000886r 1               .include "sound.asm"
000886r 2               .segment "BANK1"
000000r 2               
000000r 2               SPCPrg:
000000r 2  20 CD EF BD  	.incbin ".\sound\sound.bin"
000004r 2  E8 2C C4 F2  
000008r 2  E8 00 C4 F3  
003ACAr 2               SPCPrgEnd:
003ACAr 2               
003ACAr 2               SPC_LENGTH = SPCPrgEnd-SPCPrg
003ACAr 2               NUM_SPC_BLOCKS = SPC_LENGTH/256
003ACAr 2               .define copyAddr $0 ;address to copy to (word)
003ACAr 2               .define copyIndex $2 ;index within one block (byte)
003ACAr 2               .define blockIndex $3 ;what block's being copied (byte)
003ACAr 2               .define kick $4 ;current "kick" val
003ACAr 2               
003ACAr 2               LoadSPC:
003ACAr 2  8B           	phb
003ACBr 2  08           	php
003ACCr 2               
003ACCr 2  C2 20        	a16
003ACEr 2  A9 3A 00     	lda #NUM_SPC_BLOCKS
003AD1r 2  A9 00 02     	lda #$200
003AD4r 2  85 00        	sta copyAddr ;set up copy address
003AD6r 2  64 03        	stz blockIndex
003AD8r 2  E2 20        	a8
003ADAr 2  A9 CC        	lda #$cc ;starting kick val
003ADCr 2  85 04        	sta kick
003ADEr 2               
003ADEr 2  9C 00 42     	stz $4200
003AE1r 2  78           	sei ;disable interrupts, this is kinda time sensitive
003AE2r 2               WaitForInit:
003AE2r 2  AD 40 21     	lda $2140
003AE5r 2  C9 AA        	cmp #$aa ;spc sets reg 0 to aa after it inits
003AE7r 2  D0 F9        	bne WaitForInit
003AE9r 2               
003AE9r 2               CopyLoop:
003AE9r 2  C2 20        	a16
003AEBr 2  A5 00        	lda copyAddr
003AEDr 2  8D 42 21     	sta $2142 ;write destination address
003AF0r 2  18           	clc
003AF1r 2  69 00 01     	adc #$100
003AF4r 2  85 00        	sta copyAddr
003AF6r 2  E2 20        	a8
003AF8r 2               
003AF8r 2  A9 01        	lda #$1
003AFAr 2  8D 41 21     	sta $2141 ;write command
003AFDr 2  A5 04        	lda kick
003AFFr 2  8D 40 21     	sta $2140 ;"enable"
003B02r 2               WaitForAck: ;spc returns kick when it's ready to write
003B02r 2  AD 40 21     	lda $2140
003B05r 2  C5 04        	cmp kick
003B07r 2  D0 F9        	bne WaitForAck
003B09r 2               
003B09r 2               CopyBlock: ;copies blocks of 256 bytes
003B09r 2  C2 20        	a16
003B0Br 2  A5 02        	lda copyIndex ;because blockIndex is next to copyIndex in memory hopefully
003B0Dr 2  AA           	tax	;this will get the address (look at me, so smart for making blocks 256 bytes)
003B0Er 2  E2 20        	a8
003B10r 2  BF rr rr rr  	lda f:SPCPrg,x ;specify bank
003B14r 2  8D 41 21     	sta $2141
003B17r 2  A5 02        	lda copyIndex
003B19r 2  8D 40 21     	sta $2140
003B1Cr 2               
003B1Cr 2               WaitReceive:
003B1Cr 2  CD 40 21     	cmp $2140 ;spc mirrors count after receiving data
003B1Fr 2  D0 FB        	bne WaitReceive
003B21r 2  1A           	inc a
003B22r 2  85 02        	sta copyIndex
003B24r 2  C9 00        	cmp #$00 ;256 bytes in a block
003B26r 2  D0 E1        	bne CopyBlock
003B28r 2               
003B28r 2  E6 03        	inc blockIndex
003B2Ar 2  A5 04        	lda kick
003B2Cr 2  18           	clc
003B2Dr 2  69 02        	adc #$2
003B2Fr 2  29 7F        	and #$7f ;kick=previous kick "+2 to 127" -ninty
003B31r 2  85 04        	sta kick
003B33r 2  A5 03        	lda blockIndex
003B35r 2  C9 3A        	cmp #NUM_SPC_BLOCKS
003B37r 2  D0 B0        	bne CopyLoop
003B39r 2               
003B39r 2  C2 20        	a16
003B3Br 2  A9 00 02     	lda #$200 ;entry point
003B3Er 2  8D 42 21     	sta $2142
003B41r 2  E2 20        	a8
003B43r 2  9C 41 21     	stz $2141 ;start command
003B46r 2  A5 04        	lda kick
003B48r 2  8D 40 21     	sta $2140
003B4Br 2  58           	cli ;enable interrupts
003B4Cr 2  A2 06 00     	ldx #$6
003B4Fr 2               @ClrLoop:
003B4Fr 2  74 00        	stz $0,x
003B51r 2  CA           	dex
003B52r 2  D0 FB        	bne @ClrLoop
003B54r 2  28           	plp
003B55r 2  AB           	plb
003B56r 2  6B           	rtl
003B57r 2               
003B57r 1               
003B57r 1               .segment "CODE"
000886r 1               Reset:
000886r 1  78 18 FB C2  	InitSNES
00088Ar 1  38 A2 FF 1F  
00088Er 1  9A 22 rr rr  
000895r 1  22 rr rr rr  	jsl LoadSPC
000899r 1  A2 00 00     	ldx #$0
00089Cr 1  A9 02        	lda #$2
00089Er 1  A9 00 8D 21  	LoadPalette BGPalette, 0, $10
0008A2r 1  21 A9 rr A2  
0008A6r 1  rr rr A0 20  
0008AEr 1  A9 10 8D 21  	LoadPalette BG2Palette, $10, $10
0008B2r 1  21 A9 rr A2  
0008B6r 1  rr rr A0 20  
0008BEr 1  A9 80 8D 21      LoadPalette SpritePalette, $80, $F
0008C2r 1  21 A9 rr A2  
0008C6r 1  rr rr A0 1E  
0008CEr 1               	; Load Tile data to VRAM
0008CEr 1  A9 80 8D 15      LoadBlockToVRAM BGTiles, $2000, $C0
0008D2r 1  21 A2 00 20  
0008D6r 1  8E 16 21 A9  
0008E4r 1  A9 80 8D 15  	LoadBlockToVRAM BG2Tiles, $5000, $200 ;8 tiles, 4bpp
0008E8r 1  21 A2 00 50  
0008ECr 1  8E 16 21 A9  
0008FAr 1  A9 80 8D 15  	LoadBlockToVRAM LarryTiles, $6000, $800
0008FEr 1  21 A2 00 60  
000902r 1  8E 16 21 A9  
000910r 1  A9 80 8D 15  	LoadBlockToVRAM BGTilemap, $0000, $2000
000914r 1  21 A2 00 00  
000918r 1  8E 16 21 A9  
000926r 1  A9 80 8D 15  	LoadBlockToVRAM BG2Tilemap, $4000, $800
00092Ar 1  21 A2 00 40  
00092Er 1  8E 16 21 A9  
00093Cr 1  A2 rr rr 8E  	LoadBlockToWRAM BGTilemap, TilemapMirror, $2000
000940r 1  02 43 A9 rr  
000944r 1  8D 04 43 A2  
000963r 1                   ; Setup Video modes and other stuff, then turn on the screen
000963r 1  20 rr rr         jsr SetupVideo
000966r 1               
000966r 1  20 rr rr     	jsr InitSprites
000969r 1  A9 81        	lda #$81
00096Br 1  8D 00 42     	sta $4200 ;enable vblank interrupt and joypad read
00096Er 1  A9 00        	lda #$00 ;idk why but sometimes spc writes crash the cpu without this line, at least on no$sns
000970r 1               	;did a bit more debugging, looks like it's a conflict b/t loading larrytiles and bgtilemap to vram
000970r 1  C2 20        	a16
000972r 1  A9 1B 01     	lda #$11b
000975r 1  85 12        	sta scrollY
000977r 1  E2 20        	sep #$20
000979r 1  E2 20        	a8
00097Br 1  A9 50        	lda #$50
00097Dr 1  85 18        	sta spriteX
00097Fr 1               
00097Fr 1               .define GROUND_Y $B0
00097Fr 1  A9 B0        	lda #GROUND_Y
000981r 1  85 1A        	sta spriteY
000983r 1               
000983r 1  A9 30        	lda #$30 ;max sprite priority
000985r 1  85 25        	sta playerAttrs
000987r 1               
000987r 1               
000987r 1               MainLoop:
000987r 1  A9 01        	lda #$1
000989r 1  85 29        	sta frameStatus ;how we check if the program's done executing
00098Br 1  AD 19 42     	lda $4219 ;p1 joypad read address ;if yes but it is no longer pressed, state=RIGHT_RELEASED
00098Er 1  89 01        	bit #JOY_RIGHT
000990r 1  F0 0F        	beq AssignRightReleased ;if it is still being pressed, state=RIGHT_PRESSED
000992r 1  A5 16        	lda playerHSpeed
000994r 1  D0 15        	bne EndRightAssign
000996r 1  A9 01        	lda #STATE_RIGHT_PRESSED
000998r 1  85 28        	sta movementState
00099Ar 1  A9 30        	lda #$30 ;max sprite priority
00099Cr 1  85 25        	sta playerAttrs
00099Er 1  4C rr rr     	jmp EndRightAssign
0009A1r 1               
0009A1r 1               AssignRightReleased:
0009A1r 1  A5 28        	lda movementState
0009A3r 1  C9 01        	cmp #STATE_RIGHT_PRESSED ;was right pressed last frame?
0009A5r 1  D0 04        	bne EndRightAssign ;if no, skip
0009A7r 1  A9 02        	lda #STATE_RIGHT_RELEASED
0009A9r 1  85 28        	sta movementState
0009ABr 1               
0009ABr 1               EndRightAssign:
0009ABr 1               
0009ABr 1  AD 19 42     	lda $4219 ;p1 joypad read address ;if yes but it is no longer pressed, state=RIGHT_RELEASED
0009AEr 1  89 02        	bit #JOY_LEFT
0009B0r 1  F0 0F        	beq AssignLeftReleased ;if it is still being pressed, state=RIGHT_PRESSED
0009B2r 1  A5 16        	lda playerHSpeed
0009B4r 1  D0 15        	bne EndLeftAssign
0009B6r 1  A9 03        	lda #STATE_LEFT_PRESSED
0009B8r 1  85 28        	sta movementState
0009BAr 1  A9 70        	lda #$70 ;max sprite priority, mirrored
0009BCr 1  85 25        	sta playerAttrs
0009BEr 1  4C rr rr     	jmp EndLeftAssign
0009C1r 1               
0009C1r 1               AssignLeftReleased:
0009C1r 1  A5 28        	lda movementState
0009C3r 1  C9 03        	cmp #STATE_LEFT_PRESSED ;was right pressed last frame?
0009C5r 1  D0 04        	bne EndLeftAssign ;if no, skip
0009C7r 1  A9 04        	lda #STATE_LEFT_RELEASED
0009C9r 1  85 28        	sta movementState
0009CBr 1               
0009CBr 1               EndLeftAssign:
0009CBr 1               
0009CBr 1               ;if player is on ground, assign jump state
0009CBr 1  AD 19 42     	lda $4219
0009CEr 1  89 80        	bit #JOY_B
0009D0r 1  F0 12        	beq JumpNotPressed
0009D2r 1  A5 27        	lda playerState
0009D4r 1  C9 00        	cmp #STATE_GROUND
0009D6r 1  D0 0C        	bne JumpNotPressed
0009D8r 1  A9 01        	lda #STATE_JUMP_RISE
0009DAr 1  85 27        	sta playerState
0009DCr 1  A9 10        	lda #MAX_LARRY_JUMP_HEIGHT
0009DEr 1  85 26        	sta playerVSpeed
0009E0r 1  A9 0E        	lda #LARRY_JUMP_FRAME
0009E2r 1  85 22        	sta playerTileNum
0009E4r 1               JumpNotPressed:
0009E4r 1               
0009E4r 1               EndStateAssigns:
0009E4r 1               
0009E4r 1               
0009E4r 1               ;accelerate player until reaches max speed
0009E4r 1  A5 28        	lda movementState
0009E6r 1  C9 01        	cmp #STATE_RIGHT_PRESSED
0009E8r 1  D0 19        	bne RightNotPressed
0009EAr 1               
0009EAr 1  A5 16        	lda playerHSpeed
0009ECr 1  C9 06        	cmp #MAX_LARRY_SPEED
0009EEr 1  F0 05        	beq @DontAdd
0009F0r 1  18           	clc
0009F1r 1  69 01        	adc #LARRY_ACCEL
0009F3r 1  85 16        	sta playerHSpeed
0009F5r 1               @DontAdd:
0009F5r 1  C2 20        	a16
0009F7r 1  A5 10        	lda scrollX
0009F9r 1  18           	clc
0009FAr 1  65 16        	adc playerHSpeed
0009FCr 1  29 FF 03     	and #$3ff ;limit to 10 bits
0009FFr 1  85 10        	sta scrollX
000A01r 1  E2 20        	a8
000A03r 1               RightNotPressed:
000A03r 1               
000A03r 1               ;decelerate player right until they stop
000A03r 1  A5 28        	lda movementState
000A05r 1  C9 02        	cmp #STATE_RIGHT_RELEASED
000A07r 1  D0 20        	bne RightNotReleased
000A09r 1               
000A09r 1  A5 16        	lda playerHSpeed
000A0Br 1  C9 00        	cmp #$0
000A0Dr 1  D0 07        	bne @Subtract
000A0Fr 1  A9 00        	lda #STATE_NONE
000A11r 1  85 28        	sta movementState
000A13r 1  4C rr rr     	jmp RightNotReleased
000A16r 1               @Subtract:
000A16r 1  38           	sec
000A17r 1  E9 01        	sbc #LARRY_ACCEL
000A19r 1  85 16        	sta playerHSpeed
000A1Br 1  C2 20        	a16
000A1Dr 1  A5 10        	lda scrollX
000A1Fr 1  18           	clc
000A20r 1  65 16        	adc playerHSpeed
000A22r 1  29 FF 03     	and #$3ff ;limit to 10 bits
000A25r 1  85 10        	sta scrollX
000A27r 1  E2 20        	a8
000A29r 1               RightNotReleased:
000A29r 1               
000A29r 1               ;accelerate player until they hit max speed
000A29r 1  A5 28        	lda movementState
000A2Br 1  C9 03        	cmp #STATE_LEFT_PRESSED
000A2Dr 1  D0 19        	bne LeftNotPressed
000A2Fr 1               
000A2Fr 1  A5 16        	lda playerHSpeed
000A31r 1  C9 06        	cmp #MAX_LARRY_SPEED
000A33r 1  F0 05        	beq @DontAdd
000A35r 1  18           	clc
000A36r 1  69 01        	adc #LARRY_ACCEL
000A38r 1  85 16        	sta playerHSpeed
000A3Ar 1               @DontAdd:
000A3Ar 1  C2 20        	a16
000A3Cr 1  A5 10        	lda scrollX
000A3Er 1  38           	sec
000A3Fr 1  E5 16        	sbc playerHSpeed
000A41r 1  29 FF 03     	and #$3ff
000A44r 1  85 10        	sta scrollX
000A46r 1  E2 20        	a8
000A48r 1               LeftNotPressed:
000A48r 1               
000A48r 1               ;decelerate player until they stop
000A48r 1  A5 28        	lda movementState
000A4Ar 1  C9 04        	cmp #STATE_LEFT_RELEASED
000A4Cr 1  D0 20        	bne LeftNotReleased
000A4Er 1               
000A4Er 1  A5 16        	lda playerHSpeed
000A50r 1  C9 00        	cmp #$0
000A52r 1  D0 07        	bne @Subtract
000A54r 1  A9 00        	lda #STATE_NONE
000A56r 1  85 28        	sta movementState
000A58r 1  4C rr rr     	jmp LeftNotReleased
000A5Br 1               @Subtract:
000A5Br 1  38           	sec
000A5Cr 1  E9 01        	sbc #LARRY_ACCEL
000A5Er 1  85 16        	sta playerHSpeed
000A60r 1  C2 20        	a16
000A62r 1  A5 10        	lda scrollX
000A64r 1  38           	sec
000A65r 1  E5 16        	sbc playerHSpeed
000A67r 1  29 FF 03     	and #$3ff
000A6Ar 1  85 10        	sta scrollX
000A6Cr 1  E2 20        	a8
000A6Er 1               LeftNotReleased:
000A6Er 1               
000A6Er 1               ;animate player based on speed
000A6Er 1  A5 27        	lda playerState
000A70r 1  C9 00        	cmp #STATE_GROUND
000A72r 1  D0 14        	bne DontAnimate
000A74r 1  A5 28        	lda movementState
000A76r 1  C9 00        	cmp #STATE_NONE
000A78r 1  F0 0E        	beq DontAnimate
000A7Ar 1               
000A7Ar 1  A5 22        	lda playerTileNum
000A7Cr 1  1A           	ina
000A7Dr 1  1A           	ina
000A7Er 1  85 22        	sta playerTileNum
000A80r 1  C9 0E        	cmp #NUM_LARRY_TILES
000A82r 1  90 04        	bcc DontAnimate
000A84r 1  A9 02        	lda #$2
000A86r 1  85 22        	sta playerTileNum
000A88r 1               DontAnimate:
000A88r 1               
000A88r 1               	;if player isn't above solid surface, fall
000A88r 1  A5 27        	lda playerState
000A8Ar 1  C9 00        	cmp #STATE_GROUND
000A8Cr 1  D0 0C        	bne DontApplyGravity
000A8Er 1  20 rr rr     	jsr SetPlayerVals
000A91r 1  20 rr rr     	jsr CheckCollisionB
000A94r 1  D0 04        	bne DontApplyGravity
000A96r 1  A9 02        	lda #STATE_JUMP_FALL
000A98r 1  85 27        	sta playerState
000A9Ar 1               DontApplyGravity:
000A9Ar 1               
000A9Ar 1               ;1. subtract gravity accel value until initial speed is 0
000A9Ar 1               ;2. set state to fall
000A9Ar 1               
000A9Ar 1  A5 27        	lda playerState
000A9Cr 1  C9 01        	cmp #STATE_JUMP_RISE
000A9Er 1  D0 17        	bne DontRise
000AA0r 1  A5 26        	lda playerVSpeed
000AA2r 1  D0 07        	bne @SubSpeed ;branch if player v speed isn't 0
000AA4r 1  A9 02        	lda #STATE_JUMP_FALL
000AA6r 1  85 27        	sta playerState
000AA8r 1  4C rr rr     	jmp DontRise
000AABr 1               @SubSpeed:
000AABr 1  38           	sec
000AACr 1  E9 01        	sbc #LARRY_ACCEL
000AAEr 1  85 26        	sta playerVSpeed
000AB0r 1  A5 1A        	lda spriteY
000AB2r 1  38           	sec
000AB3r 1  E5 26        	sbc playerVSpeed
000AB5r 1  85 1A        	sta spriteY
000AB7r 1               DontRise:
000AB7r 1               
000AB7r 1               ;3. add gravity accel value until player touches ground
000AB7r 1               ;4. set state to ground
000AB7r 1               
000AB7r 1  A5 27        	lda playerState
000AB9r 1  C9 02        	cmp #STATE_JUMP_FALL
000ABBr 1  D0 31        	bne DontFall
000ABDr 1  20 rr rr     	jsr SetPlayerVals ;have player fall until they're inside the ground
000AC0r 1  20 rr rr     	jsr CheckCollisionB
000AC3r 1  F0 17        	beq @AddSpeed
000AC5r 1               @EjectLoop: ;eject player from the ground
000AC5r 1  C6 1A        	dec spriteY
000AC7r 1  20 rr rr     	jsr SetPlayerVals
000ACAr 1  20 rr rr     	jsr CheckCollisionB
000ACDr 1  D0 F6        	bne @EjectLoop
000ACFr 1  E6 1A        	inc spriteY ;insert player one pixel into the ground so they won't be constantly falling
000AD1r 1  A9 00        	lda #STATE_GROUND
000AD3r 1  85 27        	sta playerState
000AD5r 1  64 26        	stz playerVSpeed
000AD7r 1  64 22        	stz playerTileNum
000AD9r 1  4C rr rr     	jmp DontFall
000ADCr 1               @AddSpeed:
000ADCr 1  A5 26        	lda playerVSpeed
000ADEr 1  C9 08        	cmp #MAX_LARRY_FALL_SPEED
000AE0r 1  B0 05        	bcs @DontAdd
000AE2r 1  18           	clc
000AE3r 1  69 01        	adc #LARRY_ACCEL
000AE5r 1  85 26        	sta playerVSpeed
000AE7r 1               @DontAdd:
000AE7r 1  A5 1A        	lda spriteY
000AE9r 1  18           	clc
000AEAr 1  65 26        	adc playerVSpeed
000AECr 1  85 1A        	sta spriteY
000AEEr 1               DontFall:
000AEEr 1               
000AEEr 1  20 rr rr     	jsr SetPlayerVals
000AF1r 1  A5 28        	lda movementState
000AF3r 1  F0 2C        	beq EndCollisionDetect ;if player's not moving, don't bather w/ wall collision detection
000AF5r 1  C9 03        	cmp #STATE_LEFT_PRESSED
000AF7r 1  B0 14        	bcs LCollision ;if state is left pressed or left released, branch
000AF9r 1  20 rr rr     	jsr CheckCollisionR
000AFCr 1  F0 23        	beq EndCollisionDetect
000AFEr 1               @EjectLoop:
000AFEr 1  C6 10        	dec scrollX
000B00r 1  20 rr rr     	jsr SetPlayerVals
000B03r 1  20 rr rr     	jsr CheckCollisionR
000B06r 1  D0 F6        	bne @EjectLoop ;eject player from the wall until they're out
000B08r 1  64 16        	stz playerHSpeed ;if player needs to be ejected, set speed to 0
000B0Ar 1  4C rr rr     	jmp EndCollisionDetect
000B0Dr 1               LCollision:
000B0Dr 1  20 rr rr     	jsr CheckCollisionL
000B10r 1  F0 22        	beq SubtractSpeed
000B12r 1               @EjectLoop:
000B12r 1  E6 10        	inc scrollX
000B14r 1  20 rr rr     	jsr SetPlayerVals
000B17r 1  20 rr rr     	jsr CheckCollisionL
000B1Ar 1  D0 F6        	bne @EjectLoop
000B1Cr 1  64 16        	stz playerHSpeed
000B1Er 1  4C rr rr     	jmp SubtractSpeed
000B21r 1               EndCollisionDetect:
000B21r 1               	;calculate bg2's scroll
000B21r 1  C2 20        	a16
000B23r 1  A5 16        	lda playerHSpeed
000B25r 1  6A           	ror
000B26r 1  85 00        	sta $0
000B28r 1  A5 14        	lda scroll2X
000B2Ar 1  18           	clc
000B2Br 1  65 00        	adc $0
000B2Dr 1  85 14        	sta scroll2X
000B2Fr 1  64 00        	stz $0
000B31r 1  4C rr rr     	jmp SetupScrollTable
000B34r 1               SubtractSpeed:
000B34r 1  C2 20        	a16
000B36r 1  A5 16        	lda playerHSpeed
000B38r 1  6A           	ror
000B39r 1  85 00        	sta $0
000B3Br 1  A5 14        	lda scroll2X
000B3Dr 1  38           	sec
000B3Er 1  E5 00        	sbc $0
000B40r 1  85 14        	sta scroll2X
000B42r 1  64 00        	stz $0
000B44r 1               SetupScrollTable:
000B44r 1  18           	clc
000B45r 1  A5 14        	lda scroll2X
000B47r 1  18           	clc
000B48r 1  69 05 00     	adc #$5
000B4Br 1  85 14        	sta scroll2X
000B4Dr 1  6A           	ror
000B4Er 1  8D 20 06     	sta BG2ScrollTable
000B51r 1  6A           	ror
000B52r 1  8D 22 06     	sta BG2ScrollTable+2
000B55r 1  6A           	ror
000B56r 1  8D 24 06     	sta BG2ScrollTable+4
000B59r 1  6A           	ror
000B5Ar 1  8D 26 06     	sta BG2ScrollTable+6
000B5Dr 1  6A           	ror
000B5Er 1  8D 28 06     	sta BG2ScrollTable+8
000B61r 1  E2 20        	a8
000B63r 1  A5 18 85 04  	HandleLarry spriteX,spriteY,playerTileNum
000B67r 1  A5 1A 85 05  
000B6Br 1  A5 22 85 06  
000C0Cr 1               	; DrawLine #$2, #$11, #$15, #$15
000C0Cr 1               
000C0Cr 1  64 29        	stz frameStatus
000C0Er 1  CB           	wai
000C0Fr 1  4C rr rr     	jmp MainLoop
000C12r 1               
000C12r 1               VBlank:
000C12r 1  08           	php
000C13r 1  8B           	phb
000C14r 1  0B           	phd
000C15r 1  48           	pha ;push regs to stack so if my main loop is ever too long it'll continue without
000C16r 1  DA           	phx ;fucking up
000C17r 1  5A           	phy
000C18r 1  A5 29        	lda frameStatus
000C1Ar 1  D0 28        	bne SkipVblank
000C1Cr 1  C2 20 A5 10  	SetHScroll scrollX
000C20r 1  E2 20 8D 0D  
000C24r 1  21 EB 8D 0D  
000C29r 1  C2 20 A5 12  	SetVScroll scrollY
000C2Dr 1  E2 20 8D 0E  
000C31r 1  21 EB 8D 0E  
000C36r 1               	;DMATilemapMirror #$2
000C36r 1  20 rr rr     	jsr DMASpriteMirror
000C39r 1  A9 01        	lda #$1 ;start dma transfer on channel 1 (change to 3 if i reenable dmatilemapmirror)
000C3Br 1  8D 0B 42     	sta $420b
000C3Er 1  20 rr rr     	jsr SetupHDMA
000C41r 1  AD 10 42     	lda $4210 ;clear vblank flag
000C44r 1               SkipVblank:
000C44r 1  7A           	ply
000C45r 1  FA           	plx
000C46r 1  68           	pla
000C47r 1  2B           	pld
000C48r 1  AB           	plb
000C49r 1  28           	plp
000C4Ar 1               
000C4Ar 1  40           	rti
000C4Br 1               
000C4Br 1               SetupVideo:
000C4Br 1  08               php
000C4Cr 1               
000C4Cr 1  A9 73        	lda #$73
000C4Er 1  8D 01 21     	sta $2101 ;16x16 or 32x32 sprites, sprite data @ $6000
000C51r 1  9C 02 21     	stz $2102 ;oam starts at $0 vram
000C54r 1  9C 03 21     	stz $2103
000C57r 1  A9 01        	lda #$1
000C59r 1  8D 05 21         sta $2105           ; Set Video mode 1, 8x8 tiles
000C5Cr 1               
000C5Cr 1  A9 03            lda #$03           ; Set BG1's Tile Map offset to $0000 (Word address)
000C5Er 1  8D 07 21         sta $2107           ; And the Tile Map size to 64x64
000C61r 1               
000C61r 1  A9 40        	lda #$40  ; bg2 tilemap offset: $4000, size: 32x32
000C63r 1  8D 08 21     	sta $2108
000C66r 1               
000C66r 1  A9 52        	lda #$52
000C68r 1  8D 0B 21         sta $210B           ; Set BG1's Character VRAM offset to $2000 (word address), BG2's to $5000
000C6Br 1               
000C6Br 1  A9 13            lda #$13            ; Enable BG1, BG2, and sprites
000C6Dr 1  8D 2C 21         sta $212C
000C70r 1               
000C70r 1  A9 FF            lda #$FF ;bg1 horizontal scroll to -1 to fix weird stuff
000C72r 1  8D 0E 21         sta $210E
000C75r 1  8D 0E 21         sta $210E
000C78r 1               
000C78r 1  A9 0F            lda #$0F
000C7Ar 1  8D 00 21         sta $2100           ; Turn on screen, full Brightness
000C7Dr 1               
000C7Dr 1  28               plp
000C7Er 1  60               rts
000C7Fr 1               
000C7Fr 1               SetupHDMA:
000C7Fr 1  A9 42        	lda #%01000010 ;write twice, indirect mode
000C81r 1  8D 00 43     	sta $4300
000C84r 1  A9 0F        	lda #$0f ;write to $210f, bg 2 scroll reg
000C86r 1  8D 01 43     	sta $4301
000C89r 1  C2 20        	a16
000C8Br 1  A9 rr rr     	lda #ScrollTable
000C8Er 1  8D 02 43     	sta $4302
000C91r 1  A9 00 00     	lda #$0
000C94r 1  8D 04 43     	sta $4304
000C97r 1  E2 20        	a8
000C99r 1  A9 7E        	lda #$7e
000C9Br 1  8D 07 43     	sta $4307 ;ram bank to read from for indirect hdma
000C9Er 1               
000C9Er 1  A9 02        	lda #$2 ;write twice, direct mode
000CA0r 1  8D 10 43     	sta $4310
000CA3r 1  A9 21        	lda #$21 ;write to $2121, cgram palette address reg
000CA5r 1  8D 11 43     	sta $4311
000CA8r 1  C2 20        	a16
000CAAr 1  A9 rr rr     	lda #PaletteIndexTable
000CADr 1  8D 12 43     	sta $4312
000CB0r 1  9C 14 43     	stz $4314
000CB3r 1  E2 20        	a8
000CB5r 1               
000CB5r 1  A9 02        	lda #$2 ;write twice, direct mode
000CB7r 1  8D 20 43     	sta $4320
000CBAr 1  A9 22        	lda #$22 ;write to $2122, cgram palette data reg
000CBCr 1  8D 21 43     	sta $4321
000CBFr 1  C2 20        	a16
000CC1r 1  A9 rr rr     	lda #GradientTable
000CC4r 1  8D 22 43     	sta $4322
000CC7r 1  9C 24 43     	stz $4324
000CCAr 1  E2 20        	a8
000CCCr 1  A9 07        	lda #$7
000CCEr 1  8D 0C 42     	sta $420c ;enable hdma channels 0-2
000CD1r 1  60           	rts
000CD2r 1               
000CD2r 1               
000CD2r 1               ScrollTable:
000CD2r 1  80           	.byte $80
000CD3r 1  00 00        	.word $0000
000CD5r 1  10           	.byte $10
000CD6r 1  28 06        	.word BG2ScrollTable+8
000CD8r 1  10           	.byte $10
000CD9r 1  26 06        	.word BG2ScrollTable+6
000CDBr 1  10           	.byte $10
000CDCr 1  24 06        	.word BG2ScrollTable+4
000CDEr 1  10           	.byte $10
000CDFr 1  22 06        	.word BG2ScrollTable+2
000CE1r 1  10           	.byte $10
000CE2r 1  20 06        	.word BG2ScrollTable
000CE4r 1  00           	.byte $00
000CE5r 1               
000CE5r 1               PaletteIndexTable: ;needed because palette index auto-increments after every write
000CE5r 1               ;400 instead of $4 because the endianness of the CGRAM write port is reversed for some reason
000CE5r 1  0C           	.byte $C
000CE6r 1  00 04        	.word $400
000CE8r 1  0C           	.byte $C
000CE9r 1  00 04        	.word $400
000CEBr 1  0C           	.byte $C
000CECr 1  00 04        	.word $400
000CEEr 1  0C           	.byte $C
000CEFr 1  00 04        	.word $400
000CF1r 1  0C           	.byte $C
000CF2r 1  00 04        	.word $400
000CF4r 1  0C           	.byte $C
000CF5r 1  00 04        	.word $400
000CF7r 1  0C           	.byte $C
000CF8r 1  00 04        	.word $400
000CFAr 1  0C           	.byte $C
000CFBr 1  00 04        	.word $400
000CFDr 1  0C           	.byte $C
000CFEr 1  00 04        	.word $400
000D00r 1  0C           	.byte $C
000D01r 1  00 04        	.word $400
000D03r 1  0C           	.byte $C
000D04r 1  00 04        	.word $400
000D06r 1  00           	.byte $00
000D07r 1               
000D07r 1               
000D07r 1               GradientTable:
000D07r 1  0C           	.byte $C
000D08r 1  C4 71        	.word $71C4; R:4 G:14 B:28
000D0Ar 1  0C           	.byte $C
000D0Br 1  C7 5D        	.word $5DC7; R:7 G:14 B:23
000D0Dr 1  0C           	.byte $C
000D0Er 1  CB 51        	.word $51CB; R:11 G:14 B:20
000D10r 1  0C           	.byte $C
000D11r 1  CD 49        	.word $49CD; R:13 G:14 B:18
000D13r 1  0C           	.byte $C
000D14r 1  F1 41        	.word $41F1; R:17 G:15 B:16
000D16r 1  0C           	.byte $C
000D17r 1  F4 35        	.word $35F4; R:20 G:15 B:13
000D19r 1  0C           	.byte $C
000D1Ar 1  F7 2D        	.word $2DF7; R:23 G:15 B:11
000D1Cr 1  0C           	.byte $C
000D1Dr 1  1A 22        	.word $221A; R:26 G:16 B:8
000D1Fr 1  0C           	.byte $C
000D20r 1  1C 1A        	.word $1A1C; R:28 G:16 B:6
000D22r 1  0C           	.byte $C
000D23r 1  1F 12        	.word $121F; R:31 G:16 B:4
000D25r 1  0C           	.byte $C
000D26r 1  A1 71        	.word $71A1
000D28r 1  00           	.byte $00
000D29r 1               
000D29r 1               DMASpriteMirror:
000D29r 1  9C 02 21     	stz $2102		; set OAM address to 0
000D2Cr 1  9C 03 21     	stz $2103
000D2Fr 1               
000D2Fr 1  A0 00 04     	LDY #$0400
000D32r 1  8C 00 43     	STY $4300		; CPU -> PPU, auto increment, write 1 reg, $2104 (OAM data write)
000D35r 1  A0 00 04     	LDY #$0400
000D38r 1  8C 02 43     	STY $4302		; source offset
000D3Br 1  A0 20 02     	LDY #$0220
000D3Er 1  8C 05 43     	STY $4305		; number of bytes to transfer
000D41r 1  A9 7E        	LDA #$7E
000D43r 1  8D 04 43     	STA $4304		; bank address = $7E  (work RAM)
000D46r 1  60           	rts
000D47r 1               
000D47r 1               
