ca65 V2.16 - Git f19651c
Main file   : main.asm
Current file: main.asm

000000r 1               .include "header.inc"
000000r 2               ; Sets up ROM headers/vectors
000000r 2               
000000r 2               .p816   ; 65816 processor
000000r 2               .i16    ; X/Y are 16 bits
000000r 2               .a8     ; A is 8 bits
000000r 2               .feature force_range
000000r 2               
000000r 2               .define ROM_NAME "physics demo         "
000000r 2                               ;"123456789012345678901"
000000r 2               .segment "HEADER"     ; +$7FE0 in file
000000r 2  70 68 79 73      .byte ROM_NAME
000004r 2  69 63 73 20  
000008r 2  64 65 6D 6F  
000015r 2               
000015r 2               .segment "ROMINFO"    ; +$7FD5 in file
000000r 2  30               .byte $30         ; LoROM, fast-capable
000001r 2  00               .byte 0           ; no battery RAM
000002r 2  07               .byte $07         ; 128K ROM
000003r 2  00 00 00 00      .byte 0,0,0,0
000007r 2  AA AA 55 55      .word $AAAA,$5555 ; dummy checksum and complement
00000Br 2               
00000Br 2               ;cop,brk,abort,nmi,reset,irq
00000Br 2               ;cop,abort,nmi,res,brk,irqbrk
00000Br 2               .segment "VECTORS"
000000r 2  00 00 00 00      .word 0, 0, EmptyHandler0, EmptyHandler1, EmptyHandler2, VBlank, Reset, EmptyHandler3
000004r 2  rr rr rr rr  
000008r 2  rr rr rr rr  
000010r 2  00 00 00 00      .word 0, 0, EmptyHandler4, EmptyHandler5, VBlank, EmptyHandler6, Reset, EmptyHandler7
000014r 2  rr rr rr rr  
000018r 2  rr rr rr rr  
000020r 2               
000020r 2               .segment "CODE"
000000r 2               EmptyHandler0:
000000r 2  40           	rti
000001r 2               EmptyHandler1:
000001r 2  40           	rti
000002r 2               EmptyHandler2:
000002r 2  40           	rti
000003r 2               EmptyHandler3:
000003r 2  40           	rti
000004r 2               EmptyHandler4:
000004r 2  40           	rti
000005r 2               EmptyHandler5:
000005r 2  40           	rti
000006r 2               EmptyHandler6:
000006r 2  40           	rti
000007r 2               EmptyHandler7:
000007r 2  40           	rti
000008r 2               
000008r 1               .include "snes.inc"
000008r 2               ;
000008r 2               ; S-CPU and S-PPU MMIO port definitions for Super NES
000008r 2               ; and useful 65816 macros
000008r 2               ;
000008r 2               ; Copyright 2014-2015 Damian Yerrick
000008r 2               ;
000008r 2               ; Copying and distribution of this file, with or without
000008r 2               ; modification, are permitted in any medium without royalty provided
000008r 2               ; the copyright notice and this notice are preserved in all source
000008r 2               ; code copies.  This file is offered as-is, without any warranty.
000008r 2               ;
000008r 2               
000008r 2               ;
000008r 2               ; This header summarizes some of the Super NES MMIO ports.
000008r 2               ; For more details, see these web pages:
000008r 2               ; http://wiki.superfamicom.org/
000008r 2               ; http://problemkaputt.de/fullsnes.htm
000008r 2               ;
000008r 2               ; Names of MMIO ports in this header file may differ from purported
000008r 2               ; official names for two reasons: to avoid the appearance of
000008r 2               ; misappropriation, and because sometimes these make more sense.
000008r 2               ;
000008r 2               
000008r 2               .ifndef SNES_H
000008r 2               .define SNES_H
000008r 2               
000008r 2               ; S-PPU configuration ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000008r 2               
000008r 2               PPUBRIGHT = $2100
000008r 2               ; 76543210
000008r 2               ; |   ++++- brightness (F: max)
000008r 2               ; +-------- 1: disable rendering
000008r 2               FORCEBLANK = $80
000008r 2               
000008r 2               PPURES = $2133
000008r 2               ; 76543210
000008r 2               ; ||  |||+- Screen interlace
000008r 2               ; ||  ||+-- Shrink sprites vertically during interlace
000008r 2               ; ||  |+--- 0: show lines 1-224; 1: show lines 1-239
000008r 2               ; ||  +---- Show subscreen in left half of each pixel
000008r 2               ; ||        (modes 012347; forced on in modes 56)
000008r 2               ; |+------- In mode 7, use bit 7 as priority
000008r 2               ; +-------- External genlock, intended for SFC Titler. Use 0 on SNES.
000008r 2               INTERLACE    = $01
000008r 2               INTERLACEOBJ = $02
000008r 2               BG_TALL      = $04
000008r 2               SUB_HIRES    = $08
000008r 2               M7_EXTBG     = $40
000008r 2               
000008r 2               PPUSTATUS1 = $213E
000008r 2               ; 76543210  PPU address generator status
000008r 2               ; ||  ++++- PPU1 version (always 1)
000008r 2               ; |+------- 1: sprite overflow (>32 on a line) since the last vblank end
000008r 2               ; +-------- 1: sliver overflow (>34 on a line) since the last vblank end
000008r 2               ; this parallels bit 5 of $2002 on NES
000008r 2               
000008r 2               PPUSTATUS2 = $213F
000008r 2               ; 76543210  PPU compositor status
000008r 2               ; || |++++- PPU2 version (1-3, not counting minor versions of 3)
000008r 2               ; || +----- 1: PAL
000008r 2               ; |+------- 1: GETXY has happened since last PPUSTATUS2 read
000008r 2               ; +-------- Toggles every vblank
000008r 2               
000008r 2               ; S-PPU sprites ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000008r 2               
000008r 2               OBSEL = $2101
000008r 2               ; 76543210
000008r 2               ; ||||| ++- Sprite main pattern table (0=$0000, 1=$2000, 2=$4000, 3=$6000)
000008r 2               ; |||++---- Alt pattern table offset (0=$1000, 1=$2000, 2=$3000, 3=$4000)
000008r 2               ; +++------ 0: 8/16; 1: 8/32; 2: 8/64; 3: 16/64; 4: 32/64; 5: 64/64
000008r 2               ;           (all sprites are square and 2D-mapped)
000008r 2               OBSIZE_8_16  = $00
000008r 2               OBSIZE_8_32  = $20
000008r 2               OBSIZE_8_64  = $40
000008r 2               OBSIZE_16_32 = $60
000008r 2               OBSIZE_16_64 = $80
000008r 2               OBSIZE_32_64 = $A0
000008r 2               
000008r 2               OAMADDR = $2102  ; 16-bit, 128 sprites followed by high-X/size table
000008r 2               OAMDATA = $2104
000008r 2               OAMDATARD = $2138
000008r 2               ; Parallels NES $2003, except apparently word-addressed.
000008r 2               ; OAM random access is working here, unlike on NES.
000008r 2               ; If bit 15 is set, value at start of frame apparently also
000008r 2               ; controls which sprites are in front
000008r 2               
000008r 2               ; S-PPU background configuration ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000008r 2               
000008r 2               BGMODE = $2105
000008r 2               ; 76543210
000008r 2               ; |||||+++- 0: 4 planes 2 bpp
000008r 2               ; |||||     1: 2 planes 4 bpp, 1 plane 2 bpp
000008r 2               ; |||||     2: 2 planes 4 bpp, OPT
000008r 2               ; |||||     3: 1 plane 8 bpp, 1 plane 4 bpp
000008r 2               ; |||||     4: 1 plane 8 bpp, 1 plane 2 bpp, OPT
000008r 2               ; |||||     5: 1 plane 4 bpp, 1 plane 2 bpp, hires
000008r 2               ; |||||     6: 1 plane 4 bpp, OPT, hires
000008r 2               ; |||||     7: 1 plane rot/scale
000008r 2               ; ||||+---- In mode 1, set plane 2 high-prio in front of all others
000008r 2               ; |||+----- Plane 0 tile size (0: 8x8, 1: 16x16)
000008r 2               ; ||+------ Plane 1 tile size (0: 8x8, 1: 16x16)
000008r 2               ; |+------- Plane 2 tile size (0: 8x8, 1: 16x16)
000008r 2               ; +-------- Plane 3 tile size (0: 8x8, 1: 16x16)
000008r 2               ;           Modes 5 and 6 use 16x8 instead of 8x8
000008r 2               ;           Mode 7 always uses 8x8
000008r 2               
000008r 2               MOSAIC = $2106
000008r 2               ; 76543210
000008r 2               ; |||||||+- Apply mosaic to plane 0 (or mode 7 high-prio horizontal)
000008r 2               ; ||||||+-- Apply mosaic to plane 1 (or mode 7 high-prio vertical)
000008r 2               ; |||||+--- Apply mosaic to plane 2
000008r 2               ; ||||+---- Apply mosaic to plane 3
000008r 2               ; ++++----- Pixel size minus 1 (0=1x1, 15=16x16)
000008r 2               
000008r 2               NTADDR = $2107  ; through $210A
000008r 2               ; 76543210
000008r 2               ;  ||||||+- Nametable width (0: 1 screen, 1: 2 screens)
000008r 2               ;  |||||+-- Nametable height (0: 1 screen, 1: 2 screens)
000008r 2               ;  +++++--- Nametable base address in $400 units
000008r 2               ; Each nametable in modes 0-6 is 32 rows, each 32 spaces long.
000008r 2               .define NTXY(xc,yc) ((xc)|((yc)<<5))
000008r 2               
000008r 2               BGCHRADDR = $210B
000008r 2               ; FEDCBA98 76543210
000008r 2               ;  ||| |||  ||| +++- Pattern table base address for plane 0
000008r 2               ;  ||| |||  +++----- Same for plane 1
000008r 2               ;  ||| +++---------- Same for plane 2
000008r 2               ;  +++-------------- Same for plane 3
000008r 2               
000008r 2               M7SEL = $211A
000008r 2               ; 76543210
000008r 2               ; ||    ||
000008r 2               ; ||    |+- Flip screen horizontally
000008r 2               ; ||    +-- Flip screen vertically
000008r 2               ; ++------- 0: repeat entire mode 7 plane
000008r 2               ;           2: transparent outside; 3: tile $00 repeating outside
000008r 2               M7_HFLIP    = $01
000008r 2               M7_VFLIP    = $02
000008r 2               M7_WRAP     = $00
000008r 2               M7_NOWRAP   = $80
000008r 2               M7_BORDER00 = $C0
000008r 2               
000008r 2               ; S-PPU scrolling ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000008r 2               
000008r 2               BGSCROLLX = $210D  ; double write low then high (000-3FF m0-6, 000-7FF m7)
000008r 2               BGSCROLLY = $210E  ; similar. reg 210F-2114 are same for other planes
000008r 2               ; Hi-res scrolling in modes 5-6 moves by whole (sub+main) pixels in X
000008r 2               ; but half scanlines in Y.
000008r 2               ; The top visible line is the line below the value written here.
000008r 2               ; For example, in 224-line mode, if 12 is written, lines 13 through
000008r 2               ; 237 of the background are visible.  This differs from the NES.
000008r 2               ;
000008r 2               ; Mode 7 uses this value as the center of rotation.  This differs
000008r 2               ; from the GBA, which fixes the center of rotation at the top left.
000008r 2               
000008r 2               ; 211B-2120 control mode 7 matrix; to be documented later
000008r 2               
000008r 2               ; S-PPU VRAM data port ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000008r 2               
000008r 2               PPUCTRL = $2115
000008r 2               ; 76543210
000008r 2               ; |   ||++- VRAM address increment (1, 32, 128, 128)
000008r 2               ; |   ++--- Rotate low bits of address left by 3 (off, 8, 9, or 10)
000008r 2               ; +-------- 0: Increment after low data port access; 1: after high
000008r 2               ; Corresponds to bit 2 of $2000 on NES
000008r 2               VRAM_DOWN   = $01
000008r 2               VRAM_M7DOWN = $02
000008r 2               INC_DATAHI  = $80
000008r 2               
000008r 2               PPUADDR = $2116  ; Word address, not double-write anymore
000008r 2               PPUDATA = $2118
000008r 2               PPUDATAHI = $2119
000008r 2               PPUDATARD = $2139  ; Same dummy read as on NES is needed
000008r 2               PPUDATARDHI = $213A
000008r 2               
000008r 2               ; S-PPU palette ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000008r 2               
000008r 2               CGADDR = $2121
000008r 2               CGDATA = $2122  ; 5-bit BGR, write twice, low byte first
000008r 2               CGDATARD = $213B  ; 5-bit BGR, read twice, low byte first
000008r 2               .define RGB(r,g,b) ((r)|((g)<<5)|((b)<<10))
000008r 2               
000008r 2               ; S-PPU window ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000008r 2               
000008r 2               BG12WINDOW = $2123
000008r 2               BG34WINDOW = $2124
000008r 2               OBJWINDOW = $2125
000008r 2               ; 76543210
000008r 2               ; ||||||++- 0: disable window 1 on BG1/BG3/OBJ; 2: enable; 3: enable outside
000008r 2               ; ||||++--- 0: disable window 2 on BG1/BG3/OBJ; 2: enable; 3: enable outside
000008r 2               ; ||++----- 0: disable window 1 on BG2/BG4; 2: enable; 3: enable outside
000008r 2               ; ++------- 0: disable window 2 on BG2/BG4; 2: enable; 3: enable outside
000008r 2               
000008r 2               WINDOW1L = $2126
000008r 2               WINDOW1R = $2127
000008r 2               WINDOW2L = $2128
000008r 2               WINDOW2R = $2129
000008r 2               
000008r 2               BGWINDOP = $212A   ; Window op is how windows are combined when both
000008r 2               OBJWINDOP = $212B  ; windows 1 and 2 are enabled.
000008r 2               ; 76543210
000008r 2               ; ||||||++- Window op for plane 0 or sprites (0: or, 1: and, 2: xor, 3: xnor)
000008r 2               ; ||||++--- Window op for plane 1 or color window
000008r 2               ; ||++----- Window op for plane 2
000008r 2               ; ++------- Window op for plane 3
000008r 2               
000008r 2               ; S-PPU blending (or "color math") ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000008r 2               
000008r 2               ; The main layer enable reg, corresponding to PPUMASK on the NES,
000008r 2               ; is BLENDMAIN.
000008r 2               BLENDMAIN  = $212C  ; Layers enabled for main input of blending
000008r 2               BLENDSUB   = $212D  ; Layers enabled for sub input of blending
000008r 2               WINDOWMAIN = $212E  ; Windows enabled for main input of blending
000008r 2               WINDOWSUB  = $212F  ; Windows enabled for sub input of blending
000008r 2               ; 76543210
000008r 2               ;    ||||+- plane 0
000008r 2               ;    |||+-- plane 1
000008r 2               ;    ||+--- plane 2
000008r 2               ;    |+---- plane 3
000008r 2               ;    +----- sprites
000008r 2               ; BLENDMAIN roughly parallels NES $2001 bits 4-3,
000008r 2               ; except that turning off both bits doesn't disable rendering.
000008r 2               ; (Use PPUBRIGHT for that.)
000008r 2               
000008r 2               ; PPU1 appears to generate a stream of (main, sub) pairs, which
000008r 2               ; PPU2 combines to form output colors.
000008r 2               
000008r 2               ; Blending parameters not documented yet.  Wait for a future demo.
000008r 2               
000008r 2               ; When BGMODE is 0-6 (or during vblank in mode 7), a fast 16x8
000008r 2               ; signed multiply is available, finishing by the next CPU cycle.
000008r 2               M7MCAND = $211B    ; write low then high
000008r 2               M7MUL = $211C      ; 8-bit factor
000008r 2               M7PRODLO = $2134
000008r 2               M7PRODHI = $2135
000008r 2               M7PRODBANK = $2136
000008r 2               
000008r 2               GETXY = $2137  ; read while $4201 D7 is set: populate x and y coords
000008r 2               XCOORD = $213C  ; used with light guns, read twice
000008r 2               YCOORD = $213D  ; also read twice
000008r 2               
000008r 2               ; SPC700 communication ports ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000008r 2               
000008r 2               APU0 = $2140
000008r 2               APU1 = $2141
000008r 2               APU2 = $2142
000008r 2               APU3 = $2143
000008r 2               
000008r 2               ; S-CPU interrupt control ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000008r 2               
000008r 2               PPUNMI = $4200
000008r 2               ; 76543210
000008r 2               ; | ||   +- Automatically read controllers in first 4 lines of vblank
000008r 2               ; | ++----- 0: No IRQ; 1: IRQs at HTIME;
000008r 2               ; |         2: one IRQ at (0, VTIME); 3: one IRQ at (HTIME, VTIME)
000008r 2               ; +-------- 1: Enable NMI at start of vblank
000008r 2               VBLANK_NMI = $80
000008r 2               HTIME_IRQ  = $10
000008r 2               VTIME_IRQ  = $20
000008r 2               HVTIME_IRQ = $30
000008r 2               AUTOREAD   = $01
000008r 2               
000008r 2               HTIME   = $4207
000008r 2               HTIMEHI = $4208
000008r 2               VTIME   = $4209
000008r 2               VTIMEHI = $420A
000008r 2               
000008r 2               NMISTATUS = $4210
000008r 2               ; 76543210
000008r 2               ; |   ||||
000008r 2               ; |   ++++- DMA controller version (1, 2) where v1 has an HDMA glitch
000008r 2               ; +-------- 1: Vblank has started since last read (like $2002.d7 on NES)
000008r 2               
000008r 2               TIMESTATUS = $4211  ; Acknowledge htime/vtime IRQ
000008r 2               VBLSTATUS = $4212
000008r 2               ; 76543210
000008r 2               ; ||     +- 0: Controller reading finished; 1: busy
000008r 2               ; |+------- In hblank
000008r 2               ; +-------- In vblank
000008r 2               
000008r 2               ROMSPEED = $420D  ; 0: slow ROM everywhere; 1: fast ROM in banks 80-FF
000008r 2                                 ; (requires 120ns or faster PRG ROM)
000008r 2               
000008r 2               ; S-CPU controller I/O ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000008r 2               
000008r 2               ; Manual controller reading behaves almost exactly as on Famicom.
000008r 2               ; For games using up to 2 standard controllers, these aren't needed,
000008r 2               ; as you can enable controller autoreading along with vblank NMIs.
000008r 2               ; But for games using (multitap, mouse, etc.), you will need to
000008r 2               ; read the extra bits separately after the autoreader finishes.
000008r 2               JOY0 = $4016
000008r 2               JOY1 = $4017
000008r 2               
000008r 2               ; In addition to the common strobe, each controller port has an
000008r 2               ; additional output bit that can be used as, say, a chip select
000008r 2               ; for SPI peripherals.
000008r 2               JOYOUT = $4201
000008r 2               ; 76543210
000008r 2               ; |+------- Controller 1 pin 6 output
000008r 2               ; +-------- Controller 2 pin 6 output
000008r 2               
000008r 2               ; Results of the autoreader
000008r 2               JOY1CUR = $4218    ; Bit 0: used by standard controllers
000008r 2               JOY2CUR = $421A
000008r 2               JOY1B1CUR = $421C  ; Bit 1: used by multitap and a few oddball
000008r 2               JOY2B1CUR = $421E  ; input devices
000008r 2               ; FEDCBA98 76543210
000008r 2               ; BYSRUDLR AXLRTTTT
000008r 2               ; |||||||| ||||++++- controller type (0: controller, 1: mouse)
000008r 2               ; |||||||| ||++----- shoulder buttons
000008r 2               ; ++-------++------- right face buttons
000008r 2               ;   ||++++---------- Control Pad
000008r 2               ;   ++-------------- center face buttons
000008r 2               KEY_B      = $8000
000008r 2               KEY_Y      = $4000
000008r 2               KEY_SELECT = $2000
000008r 2               KEY_START  = $1000
000008r 2               KEY_UP     = $0800
000008r 2               KEY_DOWN   = $0400
000008r 2               KEY_LEFT   = $0200
000008r 2               KEY_RIGHT  = $0100
000008r 2               KEY_A      = $0080
000008r 2               KEY_X      = $0040
000008r 2               KEY_L      = $0020
000008r 2               KEY_R      = $0010
000008r 2               
000008r 2               ; S-CPU multiply and divide ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000008r 2               
000008r 2               ; Multiply unit.  Also good for shifting pixels when drawing
000008r 2               ; text in a proportional font.
000008r 2               CPUMCAND = $4202  ; unchanged by multiplications
000008r 2               CPUMUL = $4203    ; write here to fill CPUPROD 8 cycles later
000008r 2               CPUPROD = $4216
000008r 2               CPUPRODHI = $4217
000008r 2               
000008r 2               ; Divide unit
000008r 2               CPUNUM = $4204
000008r 2               CPUNUMHI = $4205
000008r 2               CPUDEN = $4206    ; write divisor to fill CPUQUOT/CPUREM 16 cycles later
000008r 2               CPUQUOT = $4214
000008r 2               CPUQUOTHI = $4215
000008r 2               CPUREM = CPUPROD
000008r 2               CPUREMHI = CPUPRODHI
000008r 2               
000008r 2               ; S-CPU DMA ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000008r 2               
000008r 2               COPYSTART = $420B  ; writes of 1 << n start a DMA copy on channel n
000008r 2               HDMASTART = $420C  ; writes of 1 << n start HDMA on channel n
000008r 2               ; Don't run a DMA copy while HDMA is enabled, or you might run into
000008r 2               ; a defect in revision 1 of the S-CPU that causes crashing.
000008r 2               
000008r 2               ; There are 8 DMA channels.
000008r 2               ; Registers for channels 1-7 start at $4310, $4320, ...
000008r 2               DMAMODE = $4300
000008r 2               ; 76543210
000008r 2               ; || ||+++- PPU address offset pattern
000008r 2               ; || ||     0: 0     1: 01    2: 00    3: 0011  4: 0123  5: 0101
000008r 2               ; || ++---- Memcpy only: 0: increment; 1: fixed; 2: decrement
000008r 2               ; |+------- HDMA only: 1: Table contains pointers
000008r 2               ; +-------- Direction (0: read CPU write PPU; 1: read PPU write CPU)
000008r 2               DMA_LINEAR   = $00
000008r 2               DMA_01       = $01
000008r 2               DMA_00       = $02  ; For HDMA to double write ports; copies can use linear
000008r 2               DMA_0011     = $03  ; For HDMA to scroll positions and mode 7 matrices
000008r 2               DMA_0123     = $04  ; For HDMA to window registers
000008r 2               DMA_0101     = $05  ; Not sure how this would be useful for HDMA
000008r 2               DMA_FORWARD  = $00
000008r 2               DMA_CONST    = $08
000008r 2               DMA_BACKWARD = $10
000008r 2               DMA_INDIRECT = $40
000008r 2               DMA_READPPU  = $80
000008r 2               
000008r 2               DMAPPUREG = $4301
000008r 2               DMAADDR = $4302
000008r 2               DMAADDRHI = $4303
000008r 2               DMAADDRBANK = $4304
000008r 2               DMALEN = $4305  ; number of bytes, not number of transfers; 0 means 65536
000008r 2               DMALENHI = $4306
000008r 2               
000008r 2               HDMAINDBANK = $4307
000008r 2               HDMATABLELO = $4308
000008r 2               HDMATABLEHI = $4309
000008r 2               HDMALINE = $430A
000008r 2               
000008r 2               ; composite values for use with 16-bit writes to DMAMODE
000008r 2               DMAMODE_PPULOFILL = (<PPUDATA << 8)       | DMA_LINEAR | DMA_CONST
000008r 2               DMAMODE_PPUHIFILL = (<(PPUDATA + 1) << 8) | DMA_LINEAR | DMA_CONST
000008r 2               DMAMODE_PPUFILL   = (<PPUDATA << 8)       | DMA_01     | DMA_CONST
000008r 2               DMAMODE_PPULODATA = (<PPUDATA << 8)       | DMA_LINEAR | DMA_FORWARD
000008r 2               DMAMODE_PPUHIDATA = (<(PPUDATA + 1) << 8) | DMA_LINEAR | DMA_FORWARD
000008r 2               DMAMODE_PPUDATA   = (<PPUDATA << 8)       | DMA_01     | DMA_FORWARD
000008r 2               DMAMODE_CGDATA    = (<CGDATA << 8)        | DMA_00     | DMA_FORWARD
000008r 2               DMAMODE_OAMDATA   = (<OAMDATA << 8)       | DMA_00     | DMA_FORWARD
000008r 2               
000008r 2               ; FULLSNES NAMES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000008r 2               ;
000008r 2               ; These aliases match the names presented in Fullsnes.
000008r 2               
000008r 2               ; S-PPU write
000008r 2               INIDISP = PPUBRIGHT
000008r 2               OAMADDL = OAMADDR+0
000008r 2               OAMADDH = OAMADDR+1
000008r 2               BG1SC   = NTADDR+0
000008r 2               BG2SC   = NTADDR+1
000008r 2               BG3SC   = NTADDR+2
000008r 2               BG4SC   = NTADDR+3
000008r 2               BG12NBA = BGCHRADDR+0  ; Welcome to...
000008r 2               BG34NBA = BGCHRADDR+1  ; BG34NBA JAM!!!
000008r 2               BG1HOFS = BGSCROLLX+0
000008r 2               BG1VOFS = BGSCROLLY+0
000008r 2               BG2HOFS = BGSCROLLX+2
000008r 2               BG2VOFS = BGSCROLLY+2
000008r 2               BG3HOFS = BGSCROLLX+4
000008r 2               BG3VOFS = BGSCROLLY+4
000008r 2               BG4HOFS = BGSCROLLX+6
000008r 2               BG4VOFS = BGSCROLLY+6
000008r 2               VMAIN   = PPUCTRL
000008r 2               VMADDL  = PPUADDR+0
000008r 2               VMADDH  = PPUADDR+1
000008r 2               VMDATAL = PPUDATA+0
000008r 2               VMDATAH = PPUDATA+1
000008r 2               M7A     = $211B
000008r 2               M7B     = $211C
000008r 2               M7C     = $211D
000008r 2               M7D     = $211E
000008r 2               M7X     = $211F
000008r 2               M7Y     = $2120
000008r 2               CGADD   = CGADDR
000008r 2               W12SEL  = BG12WINDOW
000008r 2               W34SEL  = BG34WINDOW
000008r 2               WOBJSEL = OBJWINDOW
000008r 2               WH0     = WINDOW1L
000008r 2               WH1     = WINDOW1R
000008r 2               WH2     = WINDOW2L
000008r 2               WH3     = WINDOW2R
000008r 2               WBGLOG  = BGWINDOP
000008r 2               WOBJLOG = OBJWINDOP
000008r 2               TM      = BLENDMAIN
000008r 2               TS      = BLENDSUB
000008r 2               TMW     = WINDOWMAIN
000008r 2               TSW     = WINDOWSUB
000008r 2               CGWSEL  = $2130
000008r 2               CGADSUB = $2131
000008r 2               COLDATA = $2132
000008r 2               SETINI  = PPURES
000008r 2               
000008r 2               ; S-PPU read
000008r 2               MPYL    = M7PRODLO
000008r 2               MPYM    = M7PRODHI
000008r 2               MPYH    = M7PRODBANK
000008r 2               SLHV    = GETXY
000008r 2               RDOAM   = OAMDATARD
000008r 2               RDVRAML = PPUDATARD
000008r 2               RDVRAMH = PPUDATARDHI
000008r 2               RDCGRAM = CGDATARD
000008r 2               OPHCT   = XCOORD
000008r 2               OPVCT   = YCOORD
000008r 2               STAT77  = PPUSTATUS1
000008r 2               STAT78  = PPUSTATUS2
000008r 2               
000008r 2               ; other B bus devices
000008r 2               APUIO0 = APU0  ; didn't want to use capital O with digit 0
000008r 2               APUIO1 = APU1
000008r 2               APUIO2 = APU2
000008r 2               APUIO3 = APU3
000008r 2               WMDATA = $2180
000008r 2               WMADDL = $2181
000008r 2               WMADDM = $2182
000008r 2               WMADDH = $2183
000008r 2               
000008r 2               ; S-CPU I/O write
000008r 2               NMITIMEN = $4200
000008r 2               WRIO     = $4201
000008r 2               WRMPYA   = CPUMCAND
000008r 2               WRMPYB   = CPUMUL
000008r 2               WRDIVL   = CPUNUM
000008r 2               WRDIVH   = CPUNUMHI
000008r 2               WRDIVB   = CPUDEN
000008r 2               HTIMEL   = HTIME
000008r 2               HTIMEH   = HTIMEHI
000008r 2               VTIMEL   = VTIME
000008r 2               VTIMEH   = VTIMEHI
000008r 2               MDMAEN   = COPYSTART  ; where I come from MDMA is a drug
000008r 2               HDMAEN   = HDMASTART
000008r 2               MEMSEL   = ROMSPEED
000008r 2               
000008r 2               ; S-CPU I/O read
000008r 2               RDNMI  = NMISTATUS
000008r 2               TIMEUP = TIMESTATUS
000008r 2               HVBJOY = VBLSTATUS
000008r 2               RDIO   = $4213
000008r 2               RDDIVL = CPUQUOT
000008r 2               RDDIVH = CPUQUOT+1
000008r 2               RDMPYL = CPUPROD
000008r 2               RDMPYH = CPUPROD+1
000008r 2               JOY1L  = JOY1CUR+0
000008r 2               JOY1H  = JOY1CUR+1
000008r 2               JOY2L  = JOY2CUR+0
000008r 2               JOY2H  = JOY2CUR+1
000008r 2               JOY3L  = JOY1B1CUR+0
000008r 2               JOY3H  = JOY1B1CUR+1
000008r 2               JOY4L  = JOY2B1CUR+0
000008r 2               JOY4H  = JOY2B1CUR+1
000008r 2               .endif
000008r 2               
000008r 1               .include "initSNES.inc"
000008r 2               ;------------------------------------------------------------------------
000008r 2               ;-  Written by: Neviksti
000008r 2               ;-     If you use my code, please share your creations with me
000008r 2               ;-     as I am always curious :)
000008r 2               ;------------------------------------------------------------------------
000008r 2               
000008r 2               
000008r 2               ;----------------------------------------------------------------------------
000008r 2               ; InitSNES -- my "standard" initialization of SNES memory and registers
000008r 2               ;----------------------------------------------------------------------------
000008r 2               .macro InitSNES
000008r 2                 sei                     ;disable interrupts
000008r 2                 clc                     ;switch to native mode
000008r 2                 xce
000008r 2               
000008r 2                 REP #$38		; mem/A = 16 bit, X/Y = 16 bit
000008r 2               			;decimal mode off
000008r 2                 .i16
000008r 2                 LDX #$1FFF	;Setup the stack
000008r 2                 TXS			;Transfer Index X to Stack Pointer Register
000008r 2               
000008r 2                 ;do the rest of the initialization in a routine
000008r 2                 JSL InitializeSNES
000008r 2               
000008r 2                 SEP #$20		; mem/A = 8 bit
000008r 2               .endmacro
000008r 2               
000008r 2               ;----------------------------------------------------------------------------
000008r 2               
000008r 2               .segment "CODE"
000008r 2               
000008r 2               InitializeSNES:
000008r 2  4B             PHK			;set Data Bank = Program Bank
000009r 2  AB             PLB
00000Ar 2               
00000Ar 2  A9 00          LDA #$0000	;set Direct Page = $0000
00000Cr 2  5B             TCD			;Transfer Accumulator to Direct Register
00000Dr 2               
00000Dr 2  AE FD 1F       LDX $1FFD		;we clear all the mem at one point ...
000010r 2  8E 72 43       STX $4372  	;so save the return address in a place that won't get overwritten
000013r 2  AE FF 1F       LDX $1FFF
000016r 2  8E 74 43       STX $4374
000019r 2               
000019r 2  E2 20          SEP #$20		; mem/A = 8 bit
00001Br 2  C2 10          REP #$10
00001Dr 2               
00001Dr 2  A9 8F          LDA #$8F
00001Fr 2  8D 00 21       STA $2100		;turn screen off for now, set brightness to normal
000022r 2               
000022r 2  A2 01 21       LDX #$2101
000025r 2               _Loop00:		;regs $2101-$210C
000025r 2  74 00          STZ $00,X		;set Sprite,Character,Tile sizes to lowest, and set addresses to $0000
000027r 2  E8             INX
000028r 2  E0 0D 21       CPX #$210D
00002Br 2  D0 F8          BNE _Loop00
00002Dr 2               
00002Dr 2               _Loop01:		;regs $210D-$2114
00002Dr 2  74 00          STZ $00,X		;Set all BG scroll values to $0000
00002Fr 2  74 00          STZ $00,X
000031r 2  E8             INX
000032r 2  E0 15 21       CPX #$2115
000035r 2  D0 F6          BNE _Loop01
000037r 2               
000037r 2  A9 80          LDA #$80		;reg $2115
000039r 2  8D 15 21       STA $2115		; Initialize VRAM transfer mode to word-access, increment by 1
00003Cr 2               
00003Cr 2  9C 16 21       STZ $2116		;regs $2117-$2117
00003Fr 2  9C 17 21       STZ $2117		;VRAM address = $0000
000042r 2               
000042r 2               			;reg $2118-$2119
000042r 2               			;VRAM write register... don't need to initialize
000042r 2               
000042r 2  9C 1A 21       STZ $211A		;clear Mode7 setting
000045r 2               
000045r 2  A2 1B 21       LDX #$211B
000048r 2               _Loop02:		;regs $211B-$2120
000048r 2  74 00          STZ $00,X		;clear out the Mode7 matrix values
00004Ar 2  74 00          STZ $00,X
00004Cr 2  E8             INX
00004Dr 2  E0 21 21       CPX #$2121
000050r 2  D0 F6          BNE _Loop02
000052r 2               
000052r 2               			;reg $2121 - Color address, doesn't need initilaizing
000052r 2               			;reg $2122 - Color data, is initialized later
000052r 2               
000052r 2  A2 23 21       LDX #$2123
000055r 2               _Loop03:		;regs $2123-$2133
000055r 2  74 00          STZ $00,X		;turn off windows, main screens, sub screens, color addition,
000057r 2  E8             INX			;fixed color = $00, no super-impose (external synchronization),
000058r 2  E0 34 21       CPX #$2134	;no interlaced mode, normal resolution
00005Br 2  D0 F8          BNE _Loop03
00005Dr 2               
00005Dr 2               			;regs $2134-$2136  - multiplication result, no initialization needed
00005Dr 2               			;reg $2137 - software H/V latch, no initialization needed
00005Dr 2               			;reg $2138 - Sprite data read, no initialization needed
00005Dr 2               			;regs $2139-$213A  - VRAM data read, no initialization needed
00005Dr 2               			;reg $213B - Color RAM data read, no initialization needed
00005Dr 2               			;regs $213C-$213D  - H/V latched data read, no initialization needed
00005Dr 2               
00005Dr 2  9C 3E 21       STZ $213E		;reg $213E - might not be necesary, but selects PPU master/slave mode
000060r 2               			;reg $213F - PPU status flag, no initialization needed
000060r 2               
000060r 2               			;reg $2140-$2143 - APU communication regs, no initialization required
000060r 2               
000060r 2               			;reg $2180  -  read/write WRAM register, no initialization required
000060r 2               			;reg $2181-$2183  -  WRAM address, no initialization required
000060r 2               
000060r 2               			;reg $4016-$4017  - serial JoyPad read registers, no need to initialize
000060r 2               
000060r 2               
000060r 2  9C 00 42       STZ $4200		;reg $4200  - disable timers, NMI,and auto-joyread
000063r 2               
000063r 2  A9 FF          LDA #$FF
000065r 2  8D 01 42       STA $4201		;reg $4201  - programmable I/O write port, initalize to allow reading at in-port
000068r 2               
000068r 2               			;regs $4202-$4203  - multiplication registers, no initialization required
000068r 2               			;regs $4204-$4206  - division registers, no initialization required
000068r 2               
000068r 2               			;regs $4207-$4208  - Horizontal-IRQ timer setting, since we disabled this, it is OK to not init
000068r 2               			;regs $4209-$420A  - Vertical-IRQ timer setting, since we disabled this, it is OK to not init
000068r 2               
000068r 2  9C 0B 42       STZ $420B		;reg $420B  - turn off all general DMA channels
00006Br 2  9C 0C 42       STZ $420C		;reg $420C  - turn off all H-MA channels
00006Er 2               
00006Er 2  9C 0D 42       STZ $420D		;reg $420D  - ROM access time to slow (2.68Mhz)
000071r 2               
000071r 2  AD 10 42       LDA $4210		;reg $4210  - NMI status, reading resets
000074r 2               
000074r 2               			;reg $4211  - IRQ status, no need to initialize
000074r 2               			;reg $4212  - H/V blank and JoyRead status, no need to initialize
000074r 2               			;reg $4213  - programmable I/O inport, no need to initialize
000074r 2               
000074r 2               			;reg $4214-$4215  - divide results, no need to initialize
000074r 2               			;reg $4216-$4217  - multiplication or remainder results, no need to initialize
000074r 2               
000074r 2               			;regs $4218-$421f  - JoyPad read registers, no need to initialize
000074r 2               
000074r 2               			;regs $4300-$437F
000074r 2               			;no need to intialize because DMA was disabled above
000074r 2               			;also, we're not sure what all of the registers do, so it is better to leave them at
000074r 2               			;their reset state value
000074r 2               
000074r 2               ;  JSR ClearVRAM      ;Reset VRAM
000074r 2                ; JSR ClearPalette   ;Reset colors
000074r 2               
000074r 2                 ;**** clear Sprite tables ********
000074r 2               
000074r 2  9C 02 21       STZ $2102	;sprites initialized to be off the screen, palette 0, character 0
000077r 2  9C 03 21       STZ $2103
00007Ar 2  A2 80 00       LDX #$0080
00007Dr 2  A9 F0          LDA #$F0
00007Fr 2               _Loop08:
00007Fr 2  8D 04 21       STA $2104	;set X = 240
000082r 2  8D 04 21       STA $2104	;set Y = 240
000085r 2  9C 04 21       STZ $2104	;set character = $00
000088r 2  9C 04 21       STZ $2104	;set priority=0, no flips
00008Br 2  CA             DEX
00008Cr 2  D0 F1          BNE _Loop08
00008Er 2               
00008Er 2  A2 20 00       LDX #$0020
000091r 2               _Loop09:
000091r 2  9C 04 21       STZ $2104		;set size bit=0, x MSB = 0
000094r 2  CA             DEX
000095r 2  D0 FA          BNE _Loop09
000097r 2               
000097r 2                 ;**** clear WRAM ********
000097r 2  9C 81 21       STZ $2181		;set WRAM address to $000000
00009Ar 2  9C 82 21       STZ $2182
00009Dr 2  9C 83 21       STZ $2183
0000A0r 2               
0000A0r 2  A2 08 80       LDX #$8008
0000A3r 2  8E 00 43       STX $4300         ;Set DMA mode to fixed source, BYTE to $2180
0000A6r 2  A2 rr rr       LDX #wram_fill_byte
0000A9r 2  8E 02 43       STX $4302         ;Set source offset
0000ACr 2  A9 rr          LDA #<.bank(wram_fill_byte)
0000AEr 2  8D 04 43       STA $4304         ;Set source bank
0000B1r 2  A2 00 00       LDX #$0000
0000B4r 2  8E 05 43       STX $4305         ;Set transfer size to 64k bytes
0000B7r 2  A9 01          LDA #$01
0000B9r 2  8D 0B 42       STA $420B         ;Initiate transfer
0000BCr 2               
0000BCr 2  A9 01          LDA #$01          ;now set the next 64k bytes
0000BEr 2  8D 0B 42       STA $420B         ;Initiate transfer
0000C1r 2               
0000C1r 2  4B             PHK			;make sure Data Bank = Program Bank
0000C2r 2  AB             PLB
0000C3r 2               
0000C3r 2  58             CLI			;enable interrupts again
0000C4r 2               
0000C4r 2  AE 72 43       LDX $4372  	;get our return address...
0000C7r 2  8E FD 1F       STX $1FFD
0000CAr 2  AD 74 43       LDA $4374
0000CDr 2  8D FF 1F       STA $1FFF
0000D0r 2  6B             RTL
0000D1r 2               
0000D1r 2               wram_fill_byte:
0000D1r 2  00           .byte $00
0000D2r 2               
0000D2r 2               ;----------------------------------------------------------------------------
0000D2r 2               ; ClearVRAM -- Sets every byte of VRAM to zero
0000D2r 2               ; In: None
0000D2r 2               ; Out: None
0000D2r 2               ; Modifies: flags
0000D2r 2               ;----------------------------------------------------------------------------
0000D2r 2               ClearVRAM:
0000D2r 2  48              pha
0000D3r 2  DA              phx
0000D4r 2  08              php
0000D5r 2               
0000D5r 2  C2 30           REP #$30		; mem/A = 8 bit, X/Y = 16 bit
0000D7r 2  E2 20           SEP #$20
0000D9r 2               
0000D9r 2  A9 80           LDA #$80
0000DBr 2  8D 15 21        STA $2115         ;Set VRAM port to word access
0000DEr 2  A2 09 18        LDX #$1809
0000E1r 2  8E 00 43        STX $4300         ;Set DMA mode to fixed source, WORD to $2118/9
0000E4r 2  A2 00 00        LDX #$0000
0000E7r 2  8E 16 21        STX $2116         ;Set VRAM port address to $0000
0000EAr 2  86 00           STX $0000         ;Set $00:0000 to $0000 (assumes scratchpad ram)
0000ECr 2  8E 02 43        STX $4302         ;Set source address to $xx:0000
0000EFr 2  A9 00           LDA #$00
0000F1r 2  8D 04 43        STA $4304         ;Set source bank to $00
0000F4r 2  A2 FF FF        LDX #$FFFF
0000F7r 2  8E 05 43        STX $4305         ;Set transfer size to 64k-1 bytes
0000FAr 2  A9 01           LDA #$01
0000FCr 2  8D 0B 42        STA $420B         ;Initiate transfer
0000FFr 2               
0000FFr 2  9C 19 21        STZ $2119         ;clear the last byte of the VRAM
000102r 2               
000102r 2  28              plp
000103r 2  FA              plx
000104r 2  68              pla
000105r 2  60              RTS
000106r 2               
000106r 2               ;----------------------------------------------------------------------------
000106r 2               ; ClearPalette -- Reset all palette colors to zero
000106r 2               ; In: None
000106r 2               ; Out: None
000106r 2               ; Modifies: flags
000106r 2               ;----------------------------------------------------------------------------
000106r 2               ClearPalette:
000106r 2  DA              PHX
000107r 2  08              PHP
000108r 2  C2 30           REP #$30		; mem/A = 8 bit, X/Y = 16 bit
00010Ar 2  E2 20           SEP #$20
00010Cr 2               
00010Cr 2  9C 21 21        STZ $2121
00010Fr 2  A2 00 01        LDX #$0100
000112r 2               ClearPaletteLoop:
000112r 2  9C 22 21        STZ $2122
000115r 2  9C 22 21        STZ $2122
000118r 2  CA              DEX
000119r 2  D0 F7           BNE ClearPaletteLoop
00011Br 2               
00011Br 2  28              PLP
00011Cr 2  FA              PLX
00011Dr 2  60              RTS
00011Er 2               
00011Er 2               
00011Er 1               .include "constants.asm"
00011Er 2               ;---oam pt 2 write masks---
00011Er 2               
00011Er 2               .define SPRITE3_MASK %00111111
00011Er 2               .define SPRITE2_MASK %11001111
00011Er 2               .define SPRITE1_MASK %11110011
00011Er 2               .define SPRITE0_MASK %11111100
00011Er 2               
00011Er 2               ;oam mirror defines
00011Er 2               .define OamMirror $400
00011Er 2               .define Oam2Mirror $600
00011Er 2               
00011Er 2               .define BG2ScrollTable $620
00011Er 2               ;object list format:
00011Er 2               ; x pos (byte)
00011Er 2               ; y pos (byte)
00011Er 2               ; attributes (byte)
00011Er 2               ; status (0=still, 1 = moving, 2 = ready to despawn, etc) (byte)
00011Er 2               ; pointer to "handler" function
00011Er 2               .define EntityList $630
00011Er 2               
00011Er 1               .include "variables.asm"
00011Er 2               .enum ;start at $10 because first 15 bytes are "scratchpad"
00011Er 2               joypad = $10
00011Er 2               scrollX = joypad+2
00011Er 2               scrollY = scrollX+2
00011Er 2               scroll2X = scrollY+2
00011Er 2               frameStatus
00011Er 2               
00011Er 2               ;---player.asm---
00011Er 2               playerX = frameStatus+1 ;16.16 fixed
00011Er 2               playerY = playerX+4
00011Er 2               playerSpriteX = playerY+4
00011Er 2               playerXSpeed = playerSpriteX+2
00011Er 2               playerYSpeed = playerXSpeed+4
00011Er 2               playerBGTile = playerYSpeed+4
00011Er 2               
00011Er 2               playerTileNum = playerBGTile+2
00011Er 2               playerAnimTimer
00011Er 2               playerAnimMode
00011Er 2               playerAttrs
00011Er 2               playerState ;16 bit to avoid constant accumulator size changing
00011Er 2               movementState = playerState+2
00011Er 2               .endenum
00011Er 2               
00011Er 1               .include "macros.asm"
00011Er 2               .macro LoadPalette source, colorIndex, numColors
00011Er 2               ;parameters:
00011Er 2               ;source, color to start on, number of colors to copy
00011Er 2                   lda #colorIndex
00011Er 2                   sta $2121       ; Start at START color
00011Er 2                   lda #<.bank(source)        ; Using : before the parameter gets its bank.
00011Er 2                   ldx #source         ; Not using : gets the offset address.
00011Er 2                   ldy #(numColors * 2)   ; 2 bytes for every color
00011Er 2                   jsr DMAPalette
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro LoadBlockToVRAM source, destination, size
00011Er 2               ;parameters:
00011Er 2               ;source, destination, size
00011Er 2                   lda #$80
00011Er 2                   sta $2115       ; Set VRAM transfer mode to word-access, increment by 1
00011Er 2                   ldx #destination         ; DEST
00011Er 2                   stx $2116       ; $2116: Word address for accessing VRAM.
00011Er 2                   lda #.lobyte(.bank(source))        ; SRCBANK
00011Er 2                   ldx #.loword(source)         ; SRCOFFSET
00011Er 2                   ldy #size         ; SIZE
00011Er 2                   jsr LoadVRAM
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro LoadBlockToWRAM source, destination, size
00011Er 2               	ldx #.loword(source)
00011Er 2               	stx $4302 ;source address
00011Er 2               	lda #.lobyte(.bank(source))
00011Er 2               	sta $4304 ;bank
00011Er 2               	ldx #size
00011Er 2               	stx $4305
00011Er 2               	ldx #destination ; set wram transfer address
00011Er 2               	stx $2181
00011Er 2               	stz $2183 ;only accesses the first 64k, yolo
00011Er 2               	lda #$80 ;dest = vram port
00011Er 2               	sta $4301
00011Er 2               	stz $4300 ; 1 byte transfer, auto-increment
00011Er 2               	lda #$1
00011Er 2               	sta $420b ;start transfer
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro DMATilemapMirror screen
00011Er 2               	lda #$80
00011Er 2               	sta $2115 ;word-access,increment by one
00011Er 2               	a16
00011Er 2               	lda screen ;calculate offset based on screen parameter
00011Er 2               	xba
00011Er 2               	clc
00011Er 2               	rol a
00011Er 2               	rol a
00011Er 2               	sta $2116 ;vram address to write to
00011Er 2               	rol a
00011Er 2               	ora #$2000
00011Er 2               	sta $4312 ;dma source address
00011Er 2               	a8
00011Er 2               	lda #$7e
00011Er 2               	sta $4314 ;bank
00011Er 2               	ldx #$800
00011Er 2               	stx $4315
00011Er 2               	lda #$18 ;dest = $2118, vram write register
00011Er 2               	sta $4311
00011Er 2               	lda #$1 ;word increment on dest, src increment
00011Er 2               	sta $4310
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro WriteTilemap screen, xOff, yOff, data
00011Er 2               ;point to write to = ($800*screen + $20*yOff+xOff)*2
00011Er 2               ;writes to $0 and $1
00011Er 2               	a16
00011Er 2               	lda screen
00011Er 2               	xba
00011Er 2               	clc
00011Er 2               	rol a
00011Er 2               	rol a
00011Er 2               	rol a ;screens are $800 apart, so multiply it by that
00011Er 2               	sta $0
00011Er 2               	lda yOff ;each "screen" is 32x32 words or $40x$40 bytes
00011Er 2               	; rol a
00011Er 2               	; rol a
00011Er 2               	; rol a
00011Er 2               	; rol a
00011Er 2               	; rol a
00011Er 2               	; rol a
00011Er 2               	xba
00011Er 2               	clc
00011Er 2               	ror a
00011Er 2               	ror a
00011Er 2               	ora $0
00011Er 2               	clc
00011Er 2               	adc xOff ;words, so add twice to multiply by 2
00011Er 2               	clc
00011Er 2               	adc xOff
00011Er 2               	sta $0
00011Er 2               	a8
00011Er 2               	lda #$7e
00011Er 2               	pha
00011Er 2               	plb
00011Er 2               	a16
00011Er 2               	lda data
00011Er 2               	ldx $0
00011Er 2               	sta $2000,x
00011Er 2               	a8
00011Er 2               	lda #$0
00011Er 2               	pha
00011Er 2               	plb
00011Er 2               	stz $0 ;cleanup
00011Er 2               	stz $1 ;cleanup
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro DrawBox screen, x1, y1, x2, y2
00011Er 2               ;note that "coordinates" are tiles, not pixels
00011Er 2               .scope
00011Er 2               	lda x2
00011Er 2               	sta $4
00011Er 2               	lda y1 ;$2 apart because gets read in 16-bit mdode
00011Er 2               	sta $6 ;inside writeTilemap
00011Er 2               	lda y2
00011Er 2               	sta $8
00011Er 2               @DrawVLoop:
00011Er 2               	lda x1
00011Er 2               	sta $2
00011Er 2               @DrawHLoop:
00011Er 2               	WriteTilemap screen, $2, $6, #$1
00011Er 2               	lda $2
00011Er 2               	inc a
00011Er 2               	sta $2
00011Er 2               	cmp $4
00011Er 2               	bne @DrawHLoop
00011Er 2               	lda $6
00011Er 2               	inc a
00011Er 2               	sta $6
00011Er 2               	cmp $8
00011Er 2               	bne @DrawVLoop
00011Er 2               	ldx #$a
00011Er 2               	jsr ClearMem
00011Er 2               .endscope
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro DrawLine screen, x1, x2, yVal
00011Er 2               .scope
00011Er 2               	lda x1
00011Er 2               	sta $2
00011Er 2               	lda x2 ;$2 apart because gets read in 16-bit mdode
00011Er 2               	sta $4 ;inside writeTilemap
00011Er 2               @DrawLoop:
00011Er 2               	WriteTilemap screen, $2, yVal, #$1
00011Er 2               	lda $2
00011Er 2               	inc a
00011Er 2               	sta $2
00011Er 2               	cmp $4
00011Er 2               	bne @DrawLoop
00011Er 2               	ldx #$6
00011Er 2               	jsr ClearMem
00011Er 2               .endscope
00011Er 2               .endmacro
00011Er 2               
00011Er 2               
00011Er 2               .macro SetHScroll hVal
00011Er 2               ;parameter: mem address of horizontal scroll val
00011Er 2               	rep #$20
00011Er 2               	lda hVal
00011Er 2               	sep #$20
00011Er 2               	sta $210D	; BG1 horiz scroll
00011Er 2               	xba
00011Er 2               	sta $210D
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro SetVScroll vVal
00011Er 2               ;parameter: mem address of vertical scroll val
00011Er 2               	rep #$20
00011Er 2               	lda vVal
00011Er 2               	sep #$20
00011Er 2               	sta $210E	; BG1 vert scroll
00011Er 2               	xba
00011Er 2               	sta $210E
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro SetMosaic level
00011Er 2               ;parameter: mosaic level (0-15 dec, 0-f hex)
00011Er 2               	lda level
00011Er 2               	and #$F ;param %=15
00011Er 2               	clc
00011Er 2               	ror a
00011Er 2               	ror a
00011Er 2               	ror a
00011Er 2               	ora #$1
00011Er 2               	sta $2106
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro PositiveDiff val1, val2
00011Er 2               ;puts the difference of val1 and val2 into a
00011Er 2               	lda val1
00011Er 2               	cmp val2
00011Er 2               	bcs @Val1Greater
00011Er 2               	sec
00011Er 2               	lda val2
00011Er 2               	sbc val1
00011Er 2               	jmp @end
00011Er 2               @Val1Greater:
00011Er 2               	sec
00011Er 2               	sbc val2
00011Er 2               @end:
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro a16
00011Er 2               	rep #$20
00011Er 2               	.a16
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .macro a8
00011Er 2               	sep #$20
00011Er 2               	.a8
00011Er 2               .endmacro
00011Er 2               
00011Er 2               .segment "CODE"
00011Er 2               DMAPalette:
00011Er 2               ;a- data bank
00011Er 2               ;x- data offset
00011Er 2               ;y- size of data
00011Er 2               
00011Er 2               ;processor status onto stack
00011Er 2  8B           	phb
00011Fr 2  08           	php
000120r 2  8E 02 43     	stx $4302 ;address into dma 0 source register
000123r 2  8D 04 43     	sta $4304 ;bank into channel 0 bank register
000126r 2  8C 05 43     	sty $4305 ;number of bytes into channel 0 size
000129r 2  9C 00 43     	stz $4300 ;dma byte mode, increment by 1
00012Cr 2  A9 22        	lda #$22 ;$2122=color palette write
00012Er 2  8D 01 43     	sta $4301
000131r 2  A9 01        	lda #$1
000133r 2  8D 0B 42     	sta $420B ;start transfer
000136r 2               
000136r 2  28           	plp
000137r 2  AB           	plb
000138r 2  60           	rts
000139r 2               
000139r 2               LoadVRAM:
000139r 2               ;a- data bank
000139r 2               ;x- data offset
000139r 2               ;y- num of bytes to copy
000139r 2  8B           	phb
00013Ar 2  08               php         ; Preserve Registers
00013Br 2  8E 02 43         stx $4302   ; Store Data offset into DMA source offset
00013Er 2  8D 04 43         sta $4304   ; Store data Bank into DMA source bank
000141r 2  8C 05 43         sty $4305   ; Store size of data block
000144r 2               
000144r 2  A9 01            lda #$1
000146r 2  8D 00 43         sta $4300   ; Set DMA mode (word, normal increment)
000149r 2  A9 18            lda #$18    ; Set the destination register (VRAM write register)
00014Br 2  8D 01 43         sta $4301
00014Er 2  A9 01            lda #$1    ; Initiate DMA transfer (channel 1)
000150r 2  8D 0B 42     	sta $420B
000153r 2               
000153r 2  28               plp         ; restore registers
000154r 2  AB           	plb
000155r 2  60               rts         ; return
000156r 2               
000156r 2               ClearMem:
000156r 2               ;x- amount of ram to clear
000156r 2               @ClearLoop:
000156r 2  74 00        	stz $0, x
000158r 2  CA           	dex
000159r 2  D0 FB        	bne @ClearLoop
00015Br 2  64 00        	stz $0
00015Dr 2  60           	rts
00015Er 2               
00015Er 2               
00015Er 1               .include "sprites.asm"
00015Er 2               spriteNum = $0
00015Er 2               xPos = $1
00015Er 2               yPos = $3
00015Er 2               tileNum = $4
00015Er 2               sprAttrs = $5
00015Er 2               oam2Data = $6
00015Er 2               oam2WriteIndex = $7
00015Er 2               
00015Er 2               
00015Er 2               .macro LoadSprite sprite, tile, xOffset, yOffset, attributes
00015Er 2               ;parameters: sprite num, pointer to x coord, pointer to y coord, pointer to tile num, attributes, big/small
00015Er 2               ;shoutout to nintendo for making me go through all this bullshit, can't have
00015Er 2               ; all the memory together or something sane
00015Er 2               	a8
00015Er 2               	lda sprite
00015Er 2               	sta spriteNum
00015Er 2               	a16
00015Er 2               	lda xOffset
00015Er 2               	sta xPos
00015Er 2               	a8
00015Er 2               	lda yOffset
00015Er 2               	sta yPos
00015Er 2               	lda tile
00015Er 2               	sta tileNum
00015Er 2               	lda attributes
00015Er 2               	sta sprAttrs
00015Er 2               	jsr SetOamMirror
00015Er 2               	a16
00015Er 2               .endmacro
00015Er 2               
00015Er 2               .segment "CODE"
00015Er 2               InitSprites:
00015Er 2  08           	php
00015Fr 2  A9 01        	lda #$1
000161r 2  A2 00 00     	ldx #$0
000164r 2               OamInitLoop: ;apparently just setting the sprites to $100 doesn't actually cause them to be removed from the scanline limit
000164r 2  9D 00 04     	sta OamMirror,x ;sets lower byte of every sprite's x pos to 1
000167r 2  E8           	inx
000168r 2  E8           	inx
000169r 2  E8           	inx
00016Ar 2  E8           	inx
00016Br 2  E0 00 02     	cpx #$200 ;$80 * 4
00016Er 2  D0 F4        	bne OamInitLoop
000170r 2  A9 55        	lda #$55
000172r 2  A2 00 00     	ldx #$0
000175r 2               Oam2InitLoop:
000175r 2  9D 00 06     	sta Oam2Mirror,x
000178r 2  E8           	inx
000179r 2  E0 20 00     	cpx #$20 ;size of oam pt 2
00017Cr 2  D0 F7        	bne Oam2InitLoop
00017Er 2  28           	plp
00017Fr 2  60           	rts
000180r 2               
000180r 2               SetOamMirror: ;OAM handler function
000180r 2  A5 00        	lda spriteNum
000182r 2  EB           	xba
000183r 2  A9 00        	lda #$0 ;make sure top byte of a is 0
000185r 2  EB           	xba
000186r 2  C2 20        	a16
000188r 2  18           	clc
000189r 2  2A           	rol a ;we multiply by 4 because each sprite has 4 bytes of data in OAM table
00018Ar 2  2A           	rol a
00018Br 2  AA           	tax
00018Cr 2  A5 01        	lda xPos
00018Er 2  E2 20        	a8
000190r 2  9D 00 04     	sta OamMirror,x
000193r 2  EB           	xba ;high byte of sprite x position
000194r 2  29 01        	and #$1 ;SNES only cares about bit 9
000196r 2  85 06        	sta oam2Data ;data to write to OAM part 2
000198r 2  E8           	inx
000199r 2  A5 03        	lda yPos
00019Br 2  9D 00 04     	sta OamMirror,x
00019Er 2  E8           	inx
00019Fr 2  A5 04        	lda tileNum
0001A1r 2  9D 00 04     	sta OamMirror,x
0001A4r 2  E8           	inx
0001A5r 2  A5 05        	lda sprAttrs
0001A7r 2  9D 00 04     	sta OamMirror,x
0001AAr 2               
0001AAr 2               	; lda size ;i don't care about size at the moment, might enable later if I do
0001AAr 2               	; and #$1 ;combine sprite size and msb of xpos
0001AAr 2               	; ror a
0001AAr 2               	; ora oam2Data
0001AAr 2               	; sta oam2Data
0001AAr 2  A5 00        	lda spriteNum
0001ACr 2  18           	clc
0001ADr 2  6A           	ror a ;4 sprites per oam table byte
0001AEr 2  6A           	ror a
0001AFr 2  29 7F        	and #$7F
0001B1r 2  85 07        	sta oam2WriteIndex
0001B3r 2               
0001B3r 2  A5 00        	lda spriteNum
0001B5r 2  29 03        	and #%00000011 ;only care if it's 0 to 3 since there's 4 bytes in OAM pt 2
0001B7r 2  F0 0B        	beq Sprite0 ;check where in the byte to place 1st x bit/sprite size
0001B9r 2  C9 01        	cmp #$1
0001BBr 2  F0 16        	beq Sprite1
0001BDr 2  C9 02        	cmp #$2
0001BFr 2  F0 26        	beq Sprite2
0001C1r 2  4C rr rr     	jmp Sprite3
0001C4r 2               
0001C4r 2               Sprite0:
0001C4r 2  A6 07        	ldx oam2WriteIndex
0001C6r 2  BD 00 06     	lda Oam2Mirror,x
0001C9r 2  29 FC        	and #SPRITE0_MASK
0001CBr 2  05 06        	ora oam2Data
0001CDr 2  9D 00 06     	sta Oam2Mirror,x
0001D0r 2  4C rr rr     	jmp EndBitStuff
0001D3r 2               
0001D3r 2               Sprite1:
0001D3r 2  18           	clc
0001D4r 2  26 06        	rol oam2Data
0001D6r 2  26 06        	rol oam2Data
0001D8r 2               
0001D8r 2  A6 07        	ldx oam2WriteIndex
0001DAr 2  BD 00 06     	lda Oam2Mirror,x
0001DDr 2  29 F3        	and #SPRITE1_MASK
0001DFr 2  05 06        	ora oam2Data
0001E1r 2  9D 00 06     	sta Oam2Mirror,x
0001E4r 2  4C rr rr     	jmp EndBitStuff
0001E7r 2               
0001E7r 2               Sprite2:
0001E7r 2  18           	clc
0001E8r 2  26 06        	rol oam2Data
0001EAr 2  26 06        	rol oam2Data
0001ECr 2  26 06        	rol oam2Data
0001EEr 2  26 06        	rol oam2Data
0001F0r 2               
0001F0r 2  A6 07        	ldx oam2WriteIndex
0001F2r 2  BD 00 06     	lda Oam2Mirror,x
0001F5r 2  29 CF        	and #SPRITE2_MASK
0001F7r 2  05 06        	ora oam2Data
0001F9r 2  9D 00 06     	sta Oam2Mirror,x
0001FCr 2  4C rr rr     	jmp EndBitStuff
0001FFr 2               
0001FFr 2               Sprite3:
0001FFr 2  18           	clc
000200r 2  26 06        	rol oam2Data
000202r 2  26 06        	rol oam2Data
000204r 2  26 06        	rol oam2Data
000206r 2  26 06        	rol oam2Data
000208r 2  26 06        	rol oam2Data
00020Ar 2  26 06        	rol oam2Data
00020Cr 2               
00020Cr 2  A6 07        	ldx oam2WriteIndex
00020Er 2  BD 00 06     	lda Oam2Mirror,x
000211r 2  29 3F        	and #SPRITE3_MASK
000213r 2  05 06        	ora oam2Data
000215r 2  9D 00 06     	sta Oam2Mirror,x
000218r 2               
000218r 2               EndBitStuff:
000218r 2  60           	rts
000219r 2               
000219r 2               
000219r 1               .include "tiles.asm"
000219r 2               .segment "CODE"
000219r 2               
000219r 2               TILE_HARD = $0 ; if player is ejected from tile
000219r 2               
000219r 2               TileAttrs: ;either "hard" aka eject or pointer to heightmap
000219r 2  00 00        .word TILE_HARD
00021Br 2  00 00        .word TILE_HARD
00021Dr 2  rr rr        .word HeightMap4
00021Fr 2  rr rr        .word HeightMap6
000221r 2  rr rr        .word HeightMap8
000223r 2  rr rr        .word HeightMapA
000225r 2               
000225r 2               ADD = $0
000225r 2               SUBTRACT = $1
000225r 2               
000225r 2               AddSubTable: ;whether to add or subtract momentum depending on tile num
000225r 2  00 00        .word $0
000227r 2  00 00        .word $0
000229r 2  01 00        .word SUBTRACT
00022Br 2  00 00        .word ADD
00022Dr 2  01 00        .word SUBTRACT
00022Fr 2  01 00        .word SUBTRACT
000231r 2               
000231r 2               ;if tile has momentum, needs to be more than PLAYER_ACCEL or else weird stuff happens
000231r 2               MomentumTable:
000231r 2  00 00        .word $0
000233r 2  00 00        .word $0
000235r 2  00 60        .word $6000
000237r 2  00 60        .word $6000
000239r 2  00 44        .word $4400
00023Br 2  00 44        .word $4400
00023Dr 2               
00023Dr 2               HeightMap4: ;height map for tile 4
00023Dr 2  01 00        .word $1
00023Fr 2  02 00        .word $2
000241r 2  03 00        .word $3
000243r 2  04 00        .word $4
000245r 2  05 00        .word $5
000247r 2  06 00        .word $6
000249r 2  07 00        .word $7
00024Br 2  08 00        .word $8
00024Dr 2  09 00        .word $9
00024Fr 2  0A 00        .word $a
000251r 2  0B 00        .word $b
000253r 2  0C 00        .word $c
000255r 2  0D 00        .word $d
000257r 2  0E 00        .word $e
000259r 2  0F 00        .word $f
00025Br 2  10 00        .word $10
00025Dr 2               
00025Dr 2               HeightMap6:
00025Dr 2  10 00        .word $10
00025Fr 2  0F 00        .word $f
000261r 2  0E 00        .word $e
000263r 2  0D 00        .word $d
000265r 2  0C 00        .word $c
000267r 2  0B 00        .word $b
000269r 2  0A 00        .word $a
00026Br 2  09 00        .word $9
00026Dr 2  08 00        .word $8
00026Fr 2  07 00        .word $7
000271r 2  06 00        .word $6
000273r 2  05 00        .word $5
000275r 2  04 00        .word $4
000277r 2  03 00        .word $3
000279r 2  02 00        .word $2
00027Br 2  01 00        .word $1
00027Dr 2               
00027Dr 2               HeightMap8:
00027Dr 2  01 00        .word $1
00027Fr 2  01 00        .word $1
000281r 2  02 00        .word $2
000283r 2  02 00        .word $2
000285r 2  03 00        .word $3
000287r 2  03 00        .word $3
000289r 2  04 00        .word $4
00028Br 2  04 00        .word $4
00028Dr 2  05 00        .word $5
00028Fr 2  05 00        .word $5
000291r 2  06 00        .word $6
000293r 2  06 00        .word $6
000295r 2  07 00        .word $7
000297r 2  07 00        .word $7
000299r 2  08 00        .word $8
00029Br 2  08 00        .word $8
00029Dr 2               
00029Dr 2               HeightMapA:
00029Dr 2  09 00        .word $9
00029Fr 2  09 00        .word $9
0002A1r 2  0A 00        .word $a
0002A3r 2  0A 00        .word $a
0002A5r 2  0B 00        .word $b
0002A7r 2  0B 00        .word $b
0002A9r 2  0C 00        .word $c
0002ABr 2  0C 00        .word $c
0002ADr 2  0D 00        .word $d
0002AFr 2  0D 00        .word $d
0002B1r 2  0E 00        .word $e
0002B3r 2  0E 00        .word $e
0002B5r 2  0F 00        .word $f
0002B7r 2  0F 00        .word $f
0002B9r 2  10 00        .word $10
0002BBr 2  10 00        .word $10
0002BDr 2               
0002BDr 1               .include "player.asm"
0002BDr 2               .segment "CODE"
0002BDr 2               
0002BDr 2               PLAYER_ACCEL = $4000 ;0.25 px
0002BDr 2               PLAYER_JUMP_SPEED = $fff8 ;-7
0002BDr 2               GRAVITY = $6fff ;~0.4px
0002BDr 2               
0002BDr 2               
0002BDr 2               MAX_PLAYER_SPEED = $2
0002BDr 2               MAX_SLOPE_SPEED = $4
0002BDr 2               PLAYER_STILL_TILE = $0
0002BDr 2               FIRST_PLAYER_TILE = $2
0002BDr 2               LAST_PLAYER_TILE = $8 ;horizontally
0002BDr 2               PLAYER_JUMPING_TILE = $E
0002BDr 2               PLAYER_TIMER_VAL = $6 ;animation timer
0002BDr 2               GROUND = $B0
0002BDr 2               
0002BDr 2               PLAYER_RIGHT_ATTRS = %00110000
0002BDr 2               PLAYER_LEFT_ATTRS =  %01110000
0002BDr 2               
0002BDr 2               PLAYER_WIDTH = $10
0002BDr 2               PLAYER_HEIGHT = $20
0002BDr 2               PLAYER_TOP = $9 ;offset from y pos to top of sprite
0002BDr 2               
0002BDr 2               .enum
0002BDr 2               STATE_DECEL
0002BDr 2               STATE_RIGHT_HELD
0002BDr 2               STATE_LEFT_HELD
0002BDr 2               .endenum
0002BDr 2               
0002BDr 2               .enum
0002BDr 2               MOVE_STATE_NORMAL
0002BDr 2               MOVE_STATE_JUMPING
0002BDr 2               MOVE_STATE_FALLING ;like jumping but without the jumping frame
0002BDr 2               MOVE_STATE_SLOPE ;when player is on slope
0002BDr 2               .endenum
0002BDr 2               
0002BDr 2               .enum
0002BDr 2               ANIM_MODE_ADD
0002BDr 2               ANIM_MODE_SUBTRACT
0002BDr 2               .endenum
0002BDr 2               
0002BDr 2               InitPlayer:
0002BDr 2  08           	php
0002BEr 2  E2 20        	a8
0002C0r 2  A9 B0        	lda #GROUND
0002C2r 2  85 1E        	sta playerY+2
0002C4r 2  A9 20        	lda #$20
0002C6r 2  85 1A        	sta playerX+2
0002C8r 2  85 20        	sta playerSpriteX
0002CAr 2  A9 30        	lda #PLAYER_RIGHT_ATTRS
0002CCr 2  85 2F        	sta playerAttrs
0002CEr 2  A9 02        	lda #FIRST_PLAYER_TILE
0002D0r 2  85 2C        	sta playerTileNum
0002D2r 2  28           	plp
0002D3r 2  60           	rts
0002D4r 2               
0002D4r 2               HandlePlayerMovement:
0002D4r 2  08           	php
0002D5r 2  C2 20        	a16
0002D7r 2  A5 10        	lda joypad
0002D9r 2  89 00 01     	bit #KEY_RIGHT ;sets up player state based on joypad input
0002DCr 2  F0 10        	beq NotRight
0002DEr 2  A9 01 00     		lda #STATE_RIGHT_HELD
0002E1r 2  85 30        		sta playerState
0002E3r 2  E2 20        		a8
0002E5r 2  A9 30        		lda #PLAYER_RIGHT_ATTRS
0002E7r 2  85 2F        		sta playerAttrs
0002E9r 2  C2 20        		a16
0002EBr 2  4C rr rr     		jmp EndStateAssign
0002EEr 2               	NotRight:
0002EEr 2  89 00 02     	bit #KEY_LEFT
0002F1r 2  F0 10        	beq NotLeft
0002F3r 2  A9 02 00     		lda #STATE_LEFT_HELD
0002F6r 2  85 30        		sta playerState
0002F8r 2  E2 20        		a8
0002FAr 2  A9 70        		lda #PLAYER_LEFT_ATTRS
0002FCr 2  85 2F        		sta playerAttrs
0002FEr 2  C2 20        		a16
000300r 2  4C rr rr     		jmp EndStateAssign
000303r 2               	NotLeft:
000303r 2  A9 00 00     	lda #STATE_DECEL
000306r 2  85 30        	sta playerState
000308r 2               
000308r 2               	EndStateAssign:
000308r 2               
000308r 2  A5 30        	lda playerState
00030Ar 2  D0 03        	bne ModifySpeed
00030Cr 2  4C rr rr     		jmp Released
00030Fr 2               	ModifySpeed:
00030Fr 2  C9 01 00     	cmp #STATE_RIGHT_HELD
000312r 2  D0 1C        	bne RightNotHeld
000314r 2  A5 24        		lda playerXSpeed+2
000316r 2  C9 02 00     		cmp #MAX_PLAYER_SPEED
000319r 2  D0 03        		bne @DontAddSpeed
00031Br 2  4C rr rr     			jmp AddSpeed
00031Er 2               		@DontAddSpeed:
00031Er 2  A5 22        			lda playerXSpeed
000320r 2  18           			clc
000321r 2  69 00 40     			adc #PLAYER_ACCEL
000324r 2  85 22        			sta playerXSpeed
000326r 2  A5 24        			lda playerXSpeed+2
000328r 2  69 00 00     			adc #$0
00032Br 2  85 24        			sta playerXSpeed+2
00032Dr 2  4C rr rr     			jmp AddSpeed
000330r 2               	RightNotHeld:
000330r 2  C9 02 00     	cmp #STATE_LEFT_HELD
000333r 2  D0 1C        	bne LeftNotHeld
000335r 2  A5 24        		lda playerXSpeed+2
000337r 2  C9 FD FF     		cmp #-(MAX_PLAYER_SPEED+1)
00033Ar 2  D0 03        		bne @DontAddSpeed
00033Cr 2  4C rr rr     			jmp AddSpeed
00033Fr 2               		@DontAddSpeed:
00033Fr 2  A5 22        			lda playerXSpeed
000341r 2  38           			sec
000342r 2  E9 00 40     			sbc #PLAYER_ACCEL
000345r 2  85 22        			sta playerXSpeed
000347r 2  A5 24        			lda playerXSpeed+2
000349r 2  E9 00 00     			sbc #$0
00034Cr 2  85 24        			sta playerXSpeed+2
00034Er 2  4C rr rr     			jmp AddSpeed
000351r 2               	LeftNotHeld:
000351r 2               
000351r 2               	Released:
000351r 2  A5 22        	lda playerXSpeed
000353r 2  D0 07        	bne PlayerMoving
000355r 2  A5 24        	lda playerXSpeed+2
000357r 2  D0 03        	bne PlayerMoving
000359r 2  4C rr rr     	jmp PlayerStill
00035Cr 2               	PlayerMoving:
00035Cr 2  A5 24        		lda playerXSpeed+2
00035Er 2  29 00 80     		and #$8000
000361r 2  F0 1B        		beq DecelRight
000363r 2  A5 22        			lda playerXSpeed ;going left, add speed until 0
000365r 2  18           			clc
000366r 2  69 00 40     			adc #PLAYER_ACCEL
000369r 2  85 22        			sta playerXSpeed
00036Br 2  A5 24        			lda playerXSpeed+2
00036Dr 2  69 00 00     			adc #$0
000370r 2  85 24        			sta playerXSpeed+2
000372r 2  29 00 80     			and #$8000
000375r 2  D0 04        			bne @NotBelowZero
000377r 2  64 22        				stz playerXSpeed
000379r 2  64 24        				stz playerXSpeed+2
00037Br 2               		@NotBelowZero:
00037Br 2  4C rr rr     			jmp AddSpeed
00037Er 2               		DecelRight:
00037Er 2  A5 22        			lda playerXSpeed
000380r 2  38           			sec
000381r 2  E9 00 40     			sbc #PLAYER_ACCEL
000384r 2  85 22        			sta playerXSpeed
000386r 2  A5 24        			lda playerXSpeed+2
000388r 2  E9 00 00     			sbc #$0
00038Br 2  85 24        			sta playerXSpeed+2
00038Dr 2  29 00 80     			and #$8000
000390r 2  F0 04        			beq @NotBelowZero
000392r 2  64 22        				stz playerXSpeed
000394r 2  64 24        				stz playerXSpeed+2
000396r 2               			@NotBelowZero:
000396r 2               
000396r 2               	AddSpeed:
000396r 2  C6 2D        	dec playerAnimTimer
000398r 2  A5 1A        	lda playerX+2
00039Ar 2  C9 80 00     	cmp #$80 ;if player > halfway through screen, add speed to scroll instead of sprite x
00039Dr 2  B0 12        	bcs AddToScrollX
00039Fr 2               		AddToPlayerX:
00039Fr 2  A5 18        		lda playerX
0003A1r 2  18           		clc
0003A2r 2  65 22        		adc playerXSpeed
0003A4r 2  85 18        		sta playerX
0003A6r 2  A5 1A        		lda playerX+2
0003A8r 2  65 24        		adc playerXSpeed+2
0003AAr 2  85 1A        		sta playerX+2
0003ACr 2  85 20        		sta playerSpriteX
0003AEr 2  4C rr rr     		jmp EndAddSpeed
0003B1r 2               
0003B1r 2               		AddToScrollX:
0003B1r 2  A5 18        		lda playerX
0003B3r 2  18           		clc
0003B4r 2  65 22        		adc playerXSpeed
0003B6r 2  85 18        		sta playerX
0003B8r 2  A5 1A        		lda playerX+2
0003BAr 2  65 24        		adc playerXSpeed+2
0003BCr 2  85 1A        		sta playerX+2
0003BEr 2  29 FF 03     		and #$3ff
0003C1r 2  38           		sec
0003C2r 2  E9 80 00     		sbc #$80 ;since player is already this far over if this code is run
0003C5r 2  85 12        		sta scrollX
0003C7r 2               	EndAddSpeed:
0003C7r 2               
0003C7r 2  A5 24        	lda playerXSpeed+2
0003C9r 2  29 00 80     	and #$8000
0003CCr 2  F0 06        	beq CheckRightCollision
0003CEr 2  20 rr rr     		jsr HandleXCollisionL
0003D1r 2  4C rr rr     		jmp EndCheckCollision
0003D4r 2               	CheckRightCollision:
0003D4r 2  20 rr rr     		jsr HandleXCollisionR
0003D7r 2               	EndCheckCollision:
0003D7r 2  4C rr rr     	jmp EndModifySpeed
0003DAr 2               
0003DAr 2               	PlayerStill:
0003DAr 2  E2 20        	a8 ;if not pressing any buttons, reset tile and animation timer
0003DCr 2  A9 00        	lda #PLAYER_STILL_TILE
0003DEr 2  85 2C        	sta playerTileNum
0003E0r 2  A9 06        	lda #PLAYER_TIMER_VAL
0003E2r 2  85 2D        	sta playerAnimTimer
0003E4r 2  A9 00        	lda #ANIM_MODE_ADD
0003E6r 2  85 2E        	sta playerAnimMode
0003E8r 2  C2 20        	a16
0003EAr 2               	EndModifySpeed:
0003EAr 2               
0003EAr 2  A5 32        	lda movementState ;eject vertically to the next tile when walking off a slope
0003ECr 2  C9 03 00     	cmp #MOVE_STATE_SLOPE
0003EFr 2  D0 20        	bne @NotOnSlope
0003F1r 2  20 rr rr     		jsr CheckYCollisionD ;if on a non-slope tile and was on a slope
0003F4r 2  F0 1B        		beq @NotOnSlope
0003F6r 2  AA           		tax
0003F7r 2  BD rr rr     		lda TileAttrs, x
0003FAr 2  D0 15        		bne @NotOnSlope
0003FCr 2  A9 00 00     			lda #MOVE_STATE_NORMAL
0003FFr 2  85 32        			sta movementState
000401r 2               			@EjectLoop: ;vertical eject
000401r 2  C6 1E        				dec playerY+2
000403r 2  20 rr rr     				jsr CheckYCollisionD
000406r 2  F0 09        				beq @NotOnSlope
000408r 2  AA           				tax
000409r 2  BD rr rr     				lda TileAttrs, x
00040Cr 2  D0 03        				bne @NotOnSlope
00040Er 2  4C rr rr     			jmp @EjectLoop
000411r 2               	@NotOnSlope:
000411r 2               
000411r 2  A5 32        	lda movementState
000413r 2  C9 01 00     	cmp #MOVE_STATE_JUMPING
000416r 2  F0 21        	beq OnGround
000418r 2  20 rr rr     		jsr CheckYCollisionD
00041Br 2  F0 17        		beq StartFall
00041Dr 2  AA           			tax
00041Er 2  BD rr rr     			lda TileAttrs, x
000421r 2  D0 03        			bne SlopeInsertLoop
000423r 2  4C rr rr     		jmp OnGround
000426r 2               			SlopeInsertLoop: ;if on a slope tile, insert into ground until touching a non-slope tile
000426r 2  E6 1E        				inc playerY+2
000428r 2  20 rr rr     				jsr CheckYCollisionD
00042Br 2  AA           				tax
00042Cr 2  BD rr rr     				lda TileAttrs, x
00042Fr 2  F0 08        				beq OnGround
000431r 2  4C rr rr     			jmp SlopeInsertLoop
000434r 2               		StartFall:
000434r 2  A9 02 00     			lda #MOVE_STATE_FALLING
000437r 2  85 32        			sta movementState
000439r 2               	OnGround:
000439r 2  20 rr rr     	jsr HandleSlopeCollision
00043Cr 2               
00043Cr 2  A5 10        	lda joypad
00043Er 2  89 00 80     	bit #KEY_B
000441r 2  F0 19        	beq DontStartJump
000443r 2  A5 32        		lda movementState
000445r 2  C9 01 00     		cmp #MOVE_STATE_JUMPING
000448r 2  F0 28        		beq NotRising ;don't want player jumping in air
00044Ar 2  C9 02 00     		cmp #MOVE_STATE_FALLING
00044Dr 2  F0 23        		beq NotRising
00044Fr 2  A9 01 00     			lda #MOVE_STATE_JUMPING
000452r 2  85 32        			sta movementState
000454r 2  A9 F8 FF     			lda #PLAYER_JUMP_SPEED
000457r 2  85 28        			sta playerYSpeed+2
000459r 2  4C rr rr     			jmp NotRising
00045Cr 2               			; dec playerY+2
00045Cr 2               	DontStartJump:
00045Cr 2  A5 28        	lda playerYSpeed+2
00045Er 2  29 00 80     	and #$8000
000461r 2  F0 0F        	beq NotRising ;if player is rising and let go of jump button, add a big ass number to speed to make them
000463r 2  A5 26        		lda playerYSpeed ;fall faster
000465r 2  18           		clc
000466r 2  69 00 B0     		adc #$B000
000469r 2  85 26        		sta playerYSpeed
00046Br 2  A5 28        		lda playerYSpeed+2
00046Dr 2  69 00 00     		adc #$0
000470r 2  85 28        		sta playerYSpeed+2
000472r 2               	NotRising:
000472r 2               
000472r 2               
000472r 2  A5 32        	lda movementState
000474r 2  C9 01 00     	cmp #MOVE_STATE_JUMPING
000477r 2  F0 08        	beq Jumping
000479r 2  C9 02 00     	cmp #MOVE_STATE_FALLING
00047Cr 2  F0 03        	beq Jumping
00047Er 2  4C rr rr     	jmp NotJumping
000481r 2               	Jumping:
000481r 2  A5 26        		lda playerYSpeed
000483r 2  18           		clc
000484r 2  69 FF 6F     		adc #GRAVITY
000487r 2  85 26        		sta playerYSpeed
000489r 2  A5 28        		lda playerYSpeed+2
00048Br 2  69 00 00     		adc #$0
00048Er 2  85 28        		sta playerYSpeed+2
000490r 2  A5 1C        		lda playerY
000492r 2  18           		clc
000493r 2  65 26        		adc playerYSpeed
000495r 2  85 1C        		sta playerY
000497r 2  A5 1E        		lda playerY+2
000499r 2  65 28        		adc playerYSpeed+2
00049Br 2  85 1E        		sta playerY+2
00049Dr 2               		UEjectLoop:
00049Dr 2  20 rr rr     		jsr CheckYCollisionU
0004A0r 2  F0 09        		beq NoCollisionU
0004A2r 2  64 26        			stz playerYSpeed
0004A4r 2  64 28        			stz playerYSpeed+2
0004A6r 2  E6 1E        			inc playerY+2
0004A8r 2  4C rr rr     			jmp UEjectLoop
0004ABr 2               		NoCollisionU:
0004ABr 2  A5 28        		lda playerYSpeed+2 ;if player isn't falling, don't check down collision
0004ADr 2  29 00 80     		and #$8000
0004B0r 2  D0 03        		bne NotJumping
0004B2r 2  20 rr rr     		jsr HandleYCollisionD
0004B5r 2               	NotJumping:
0004B5r 2               
0004B5r 2  A5 32        	lda movementState
0004B7r 2  C9 01 00     	cmp #MOVE_STATE_JUMPING
0004BAr 2  D0 08        	bne NoJumpingSprite ;switch to jumping sprite when jumping
0004BCr 2  A9 0E 00     		lda #PLAYER_JUMPING_TILE
0004BFr 2  85 2C        		sta playerTileNum
0004C1r 2  4C rr rr     		jmp DrawSprite
0004C4r 2               	NoJumpingSprite:
0004C4r 2               
0004C4r 2               
0004C4r 2  E2 20        	a8
0004C6r 2  A5 2D        	lda playerAnimTimer ;is timer zero?
0004C8r 2  D0 27        	bne DrawSprite
0004CAr 2  A9 06        		lda #PLAYER_TIMER_VAL
0004CCr 2  85 2D        		sta playerAnimTimer
0004CEr 2  A5 2E        		lda playerAnimMode
0004D0r 2  D0 11        		bne AnimSubtract
0004D2r 2  A5 2C        			lda playerTileNum ;add to tile nim
0004D4r 2  1A           			ina
0004D5r 2  1A           			ina
0004D6r 2  85 2C        			sta playerTileNum
0004D8r 2  C9 08        			cmp #LAST_PLAYER_TILE ;if up to last tile, go to subtract mode
0004DAr 2  D0 15        			bne DrawSprite
0004DCr 2  A9 01        				lda #ANIM_MODE_SUBTRACT
0004DEr 2  85 2E        				sta playerAnimMode
0004E0r 2  4C rr rr     				jmp DrawSprite
0004E3r 2               		AnimSubtract: ;subtract from tile num
0004E3r 2  A5 2C        			lda playerTileNum
0004E5r 2  3A           			dea
0004E6r 2  3A           			dea
0004E7r 2  85 2C        			sta playerTileNum
0004E9r 2  C9 02        			cmp #FIRST_PLAYER_TILE
0004EBr 2  D0 04        			bne DrawSprite
0004EDr 2  A9 00        				lda #ANIM_MODE_ADD
0004EFr 2  85 2E        				sta playerAnimMode
0004F1r 2               	DrawSprite:
0004F1r 2  E2 20 A9 00  	LoadSprite #$0, playerTileNum, playerSpriteX, playerY+2, playerAttrs
0004F5r 2  85 00 C2 20  
0004F9r 2  A5 20 85 01  
000510r 2  A5 1E        	lda playerY+2
000512r 2  18           	clc
000513r 2  69 10 00     	adc #$10
000516r 2  85 0A        	sta $a
000518r 2  A5 2C        	lda playerTileNum
00051Ar 2  18           	clc
00051Br 2  69 20 00     	adc #$20
00051Er 2  85 0C        	sta $c
000520r 2  E2 20 A9 01  	LoadSprite #$1, $c, playerSpriteX, $a, playerAttrs
000524r 2  85 00 C2 20  
000528r 2  A5 20 85 01  
00053Fr 2               
00053Fr 2  28           	plp
000540r 2  60           	rts
000541r 2               
000541r 2               HandleXCollisionL:
000541r 2  A5 32        	lda movementState ;no wall collision if on slope
000543r 2  C9 03 00     	cmp #MOVE_STATE_SLOPE
000546r 2  F0 14        	beq NoCollisionL
000548r 2  20 rr rr     		jsr CheckXCollisionL
00054Br 2  F0 0F        		beq NoCollisionL
00054Dr 2  AA           		tax
00054Er 2  BD rr rr     		lda TileAttrs, x ;tile attributes table in tiles.asm
000551r 2  D0 09        		bne NoCollisionL ;non-zero: "soft" tile
000553r 2  64 22        			stz playerXSpeed
000555r 2  64 24        			stz playerXSpeed+2
000557r 2  E6 1A        			inc playerX+2
000559r 2  4C rr rr     			jmp HandleXCollisionL
00055Cr 2               	NoCollisionL:
00055Cr 2  60           	rts
00055Dr 2               
00055Dr 2               HandleXCollisionR:
00055Dr 2  A5 32        	lda movementState
00055Fr 2  C9 03 00     	cmp #MOVE_STATE_SLOPE
000562r 2  F0 14        	beq NoCollisionR
000564r 2  20 rr rr     		jsr CheckXCollisionR
000567r 2  F0 0F        		beq NoCollisionR
000569r 2  AA           		tax
00056Ar 2  BD rr rr     		lda TileAttrs, x ;tile attributes table in tiles.asm
00056Dr 2  D0 09        		bne NoCollisionR ;non-zero: "soft" tile
00056Fr 2  64 22        			stz playerXSpeed
000571r 2  64 24        			stz playerXSpeed+2
000573r 2  C6 1A        			dec playerX+2
000575r 2  4C rr rr     			jmp HandleXCollisionR
000578r 2               	NoCollisionR:
000578r 2  60           	rts
000579r 2               
000579r 2               
000579r 2               HandleYCollisionD:
000579r 2  20 rr rr     	jsr CheckYCollisionD ;0 = sprite in air
00057Cr 2  F0 2D        	beq NotInGround
00057Er 2               
00057Er 2               	; tax
00057Er 2               	; lda TileAttrs, x
00057Er 2               	; beq NormalEject
00057Er 2               	; jmp HandleSlopeCollision
00057Er 2               	NormalEject:
00057Er 2  64 26        		stz playerYSpeed
000580r 2  64 28        		stz playerYSpeed+2
000582r 2  64 1C        		stz playerY
000584r 2  A9 00 00     		lda #MOVE_STATE_NORMAL
000587r 2  85 32        		sta movementState
000589r 2  E2 20        		a8
00058Br 2  A9 00        		lda #PLAYER_STILL_TILE
00058Dr 2  85 2C        		sta playerTileNum
00058Fr 2  A9 06        		lda #PLAYER_TIMER_VAL
000591r 2  85 2D        		sta playerAnimTimer
000593r 2  A9 00        		lda #ANIM_MODE_ADD
000595r 2  85 2E        		sta playerAnimMode
000597r 2  C2 20        		a16
000599r 2               		YEjectLoop:
000599r 2  C6 1E        			dec playerY+2
00059Br 2  20 rr rr     			jsr CheckYCollisionD
00059Er 2  F0 09        			beq EjectedFromGround
0005A0r 2  AA           			tax ;don't eject from ground if it's a slope tile
0005A1r 2  BD rr rr     			lda TileAttrs, x
0005A4r 2  D0 03        			bne EjectedFromGround
0005A6r 2  4C rr rr     		jmp YEjectLoop
0005A9r 2               		EjectedFromGround:
0005A9r 2  E6 1E        			inc playerY+2
0005ABr 2               	NotInGround:
0005ABr 2  60           	rts
0005ACr 2               
0005ACr 2               	;playerY = ((playerY + PLAYER_HEIGHT-1) & $FFF0) - (tileLut, (middle of sprite x & $F)) - $10
0005ACr 2               HandleSlopeCollision:
0005ACr 2  A5 32        	lda movementState
0005AEr 2  C9 01 00     	cmp #MOVE_STATE_JUMPING
0005B1r 2  F0 63        	beq NotOnSlope
0005B3r 2  20 rr rr     	jsr CheckCollisionC
0005B6r 2  AA           	tax
0005B7r 2  BD rr rr     	lda TileAttrs, x
0005BAr 2  F0 5A        	beq NotOnSlope
0005BCr 2  85 04        		sta $4 ;location of height LUT for that block
0005BEr 2  A5 00        		lda $0 ;x value of middle of sprite
0005C0r 2  29 0F 00     		and #$000f
0005C3r 2  2A           		rol ;words->bytes
0005C4r 2  A8           		tay
0005C5r 2  B1 04        		lda ($4), y
0005C7r 2  85 00        		sta $0 ;value to bump up y position by
0005C9r 2  A5 02        		lda $2 ;tile where sprite's feet are
0005CBr 2  29 F0 FF     		and #$fff0
0005CEr 2  38           		sec
0005CFr 2  E5 00        		sbc $0
0005D1r 2  38           		sec
0005D2r 2  E9 10 00     		sbc #$10
0005D5r 2  85 1E        		sta playerY+2
0005D7r 2  A9 03 00     		lda #MOVE_STATE_SLOPE
0005DAr 2  85 32        		sta movementState
0005DCr 2               
0005DCr 2  BD rr rr     		lda AddSubTable, x
0005DFr 2  D0 19        		bne @SubtractMomentum
0005E1r 2  A5 22        			lda playerXSpeed
0005E3r 2  18           			clc
0005E4r 2  7D rr rr     			adc MomentumTable, x
0005E7r 2  85 22        			sta playerXSpeed
0005E9r 2  A5 24        			lda playerXSpeed+2
0005EBr 2  69 00 00     			adc #$0
0005EEr 2  C9 04 00     			cmp #MAX_SLOPE_SPEED
0005F1r 2  D0 02        			bne @DontCapAddSpeed
0005F3r 2  64 22        				stz playerXSpeed
0005F5r 2               			@DontCapAddSpeed:
0005F5r 2  85 24        			sta playerXSpeed+2
0005F7r 2  4C rr rr     			jmp NotOnSlope
0005FAr 2               		@SubtractMomentum:
0005FAr 2  A5 22        			lda playerXSpeed
0005FCr 2  38           			sec
0005FDr 2  FD rr rr     			sbc MomentumTable, x
000600r 2  85 22        			sta playerXSpeed
000602r 2  A5 24        			lda playerXSpeed+2
000604r 2  E9 00 00     			sbc #$0
000607r 2  C9 FB FF     			cmp #-(MAX_SLOPE_SPEED+1)
00060Ar 2  D0 08        			bne @DontCapSubSpeed
00060Cr 2  A9 FF FF     				lda #$ffff
00060Fr 2  85 22        				sta playerXSpeed
000611r 2  A9 FB FF     				lda #-(MAX_SLOPE_SPEED+1)
000614r 2               			@DontCapSubSpeed:
000614r 2  85 24        			sta playerXSpeed+2
000616r 2               	NotOnSlope:
000616r 2  60           	rts
000617r 2               
000617r 2               CheckXCollisionL: ;for when player is moving left
000617r 2  A5 1A        	lda playerX+2
000619r 2  85 00        	sta $0
00061Br 2  A5 1E        	lda playerY+2
00061Dr 2  18           	clc
00061Er 2  69 1F 00     	adc #PLAYER_HEIGHT-1
000621r 2  85 02        	sta $2
000623r 2  4C rr rr     	jmp CheckPlayerCollision
000626r 2               
000626r 2               CheckXCollisionR: ;when player is moving right
000626r 2  A5 1A        	lda playerX+2
000628r 2  18           	clc
000629r 2  69 10 00     	adc #PLAYER_WIDTH
00062Cr 2  85 00        	sta $0
00062Er 2  A5 1E        	lda playerY+2
000630r 2  18           	clc
000631r 2  69 1F 00     	adc #PLAYER_HEIGHT-1
000634r 2  85 02        	sta $2
000636r 2  4C rr rr     	jmp CheckPlayerCollision
000639r 2               
000639r 2               ;center collision -> left collision -> right collision
000639r 2               CheckYCollisionD:
000639r 2  A5 1A        	lda playerX+2 ;1. check for bottom-center collision
00063Br 2  18           	clc
00063Cr 2  69 08 00     	adc #PLAYER_WIDTH/2
00063Fr 2  85 00        	sta $0
000641r 2  A5 1E        	lda playerY+2
000643r 2  18           	clc
000644r 2  69 21 00     	adc #PLAYER_HEIGHT+1
000647r 2  85 02        	sta $2
000649r 2  20 rr rr     	jsr CheckPlayerCollision
00064Cr 2  D0 14        	bne @EndCheck ;if center hard collision, exit routine
00064Er 2               
00064Er 2  A5 1A        	lda playerX+2 ;2. check for bottom-left collision
000650r 2  85 00        	sta $0
000652r 2  20 rr rr     	jsr CheckPlayerCollision
000655r 2  D0 0B        	bne @EndCheck
000657r 2               
000657r 2  A5 1A        	lda playerX+2 ;3. check for bottom-right collision
000659r 2  18           	clc
00065Ar 2  69 10 00     	adc #PLAYER_WIDTH
00065Dr 2  85 00        	sta $0
00065Fr 2  20 rr rr     	jsr CheckPlayerCollision
000662r 2               	@EndCheck:
000662r 2  60           	rts
000663r 2               
000663r 2               CheckYCollisionU: ;when player is moving up
000663r 2  A5 1A        	lda playerX+2 ;1. check for bottom-center collision
000665r 2  18           	clc
000666r 2  69 08 00     	adc #PLAYER_WIDTH/2
000669r 2  85 00        	sta $0
00066Br 2  A5 1E        	lda playerY+2
00066Dr 2  18           	clc
00066Er 2  69 0B 00     	adc #PLAYER_TOP+2
000671r 2  85 02        	sta $2
000673r 2  20 rr rr     	jsr CheckPlayerCollision
000676r 2  D0 14        	bne @EndCheck ;if center collision, exit routine
000678r 2               
000678r 2  A5 1A        	lda playerX+2 ;2. check for bottom-left collision
00067Ar 2  85 00        	sta $0
00067Cr 2  20 rr rr     	jsr CheckPlayerCollision
00067Fr 2  D0 0B        	bne @EndCheck
000681r 2               
000681r 2  A5 1A        	lda playerX+2 ;3. check for bottom-right collision
000683r 2  18           	clc
000684r 2  69 10 00     	adc #PLAYER_WIDTH
000687r 2  85 00        	sta $0
000689r 2  20 rr rr     	jsr CheckPlayerCollision
00068Cr 2               	@EndCheck:
00068Cr 2  60           	rts
00068Dr 2               
00068Dr 2               CheckCollisionC: ;look at the center of the bottom of the player
00068Dr 2  A5 1A        	lda playerX+2
00068Fr 2  18           	clc
000690r 2  69 08 00     	adc #(PLAYER_WIDTH/2)
000693r 2  85 00        	sta $0
000695r 2  A5 1E        	lda playerY+2
000697r 2  18           	clc
000698r 2  69 1F 00     	adc #PLAYER_HEIGHT-1
00069Br 2  85 02        	sta $2
00069Dr 2               
00069Dr 2               CheckPlayerCollision:
00069Dr 2  A5 00        	lda $0 ;divide by 16
00069Fr 2  4A           	lsr
0006A0r 2  4A           	lsr
0006A1r 2  4A           	lsr
0006A2r 2  4A           	lsr
0006A3r 2  85 2A        	sta playerBGTile
0006A5r 2  A5 02        	lda $2 ;dividing y tile by 16 and then multiplying by 32 since tilemap's 32x32
0006A7r 2  18           	clc
0006A8r 2  65 14        	adc scrollY
0006AAr 2  29 F0 FF     	and #$fff0	  ;is the same as removing last nibble and shifting left once
0006ADr 2  2A           	rol
0006AEr 2  18           	clc
0006AFr 2  65 2A        	adc playerBGTile
0006B1r 2  2A           	rol ;words->bytes
0006B2r 2  AA           	tax
0006B3r 2  BF rr rr rr  	lda f:BGTilemap, x
0006B7r 2  29 FF 03     	and #$3ff ;just get the 9 bit tile number
0006BAr 2  85 2A        	sta playerBGTile
0006BCr 2  60           	rts
0006BDr 2               
0006BDr 2               
0006BDr 1               .include "art.asm"
0006BDr 2               .segment "CODE"
0006BDr 2               
0006BDr 2               BGPalette:
0006BDr 2  00 00 FF 7F  	.INCBIN ".\art\bgtiles.clr"
0006C1r 2  05 4D 93 7B  
0006C5r 2  A1 71 3F 16  
0008BDr 2               
0008BDr 2               BG2Palette:
0008BDr 2  00 00 01 6D  	.INCBIN ".\art\bg2tiles.clr"
0008C1r 2  87 6E A3 48  
0008C5r 2  A1 71 C5 0D  
000ABDr 2               
000ABDr 2               PlayerPalette:
000ABDr 2  00 00 C0 00  	.INCBIN ".\art\player.clr"
000AC1r 2  26 1B 0C 00  
000AC5r 2  9F 1A FF 7F  
000CBDr 2               .segment "BANK2"
000000r 2               PlayerTiles:
000000r 2               	.define NUM_LARRY_TILES $E
000000r 2               	.define LARRY_ANIMATION_DELAY $2 ;number of frames between incrementing movement
000000r 2  00 00 00 00  	.INCBIN ".\art\player.pic"
000004r 2  00 00 00 00  
000008r 2  00 00 00 00  
001000r 2               BGTiles:
001000r 2  00 00 00 00  	.incbin ".\art\bgtiles.pic"
001004r 2  00 00 00 00  
001008r 2  00 00 00 00  
001400r 2               
001400r 2               BG2Tiles:
001400r 2  00 00 00 00  	.incbin ".\art\bg2tiles.pic"
001404r 2  00 00 00 00  
001408r 2  00 00 00 00  
001600r 2               
001600r 2               BGTilemap:
001600r 2               	;top left screen
001600r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001604r 2  00 00 00 00  
001608r 2  00 00 00 00  
001640r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001644r 2  00 00 00 00  
001648r 2  00 00 00 00  
001680r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001684r 2  00 00 00 00  
001688r 2  00 00 00 00  
0016C0r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0016C4r 2  00 00 00 00  
0016C8r 2  00 00 00 00  
001700r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001704r 2  00 00 00 00  
001708r 2  00 00 00 00  
001740r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001744r 2  00 00 00 00  
001748r 2  00 00 00 00  
001780r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001784r 2  00 00 00 00  
001788r 2  00 00 00 00  
0017C0r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0017C4r 2  00 00 00 00  
0017C8r 2  00 00 00 00  
001800r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001804r 2  00 00 00 00  
001808r 2  00 00 00 00  
001840r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001844r 2  00 00 00 00  
001848r 2  00 00 00 00  
001880r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001884r 2  00 00 00 00  
001888r 2  00 00 00 00  
0018C0r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0018C4r 2  00 00 00 00  
0018C8r 2  00 00 00 00  
001900r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001904r 2  00 00 00 00  
001908r 2  00 00 00 00  
001940r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001944r 2  00 00 00 00  
001948r 2  00 00 00 00  
001980r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001984r 2  00 00 00 00  
001988r 2  00 00 00 00  
0019C0r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$2,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0019C4r 2  00 00 00 00  
0019C8r 2  00 00 00 00  
001A00r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$2,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001A04r 2  00 00 00 00  
001A08r 2  00 00 00 00  
001A40r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$2,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001A44r 2  00 00 00 00  
001A48r 2  00 00 00 00  
001A80r 2  02 00 00 00  	.word $2,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$2,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001A84r 2  00 00 00 00  
001A88r 2  00 00 00 00  
001AC0r 2  02 00 00 00  	.word $2,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$2,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001AC4r 2  00 00 00 00  
001AC8r 2  00 00 00 00  
001B00r 2  02 00 00 00  	.word $2,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$2,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001B04r 2  00 00 00 00  
001B08r 2  00 00 00 00  
001B40r 2  02 00 00 00  	.word $2,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$2,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001B44r 2  00 00 00 00  
001B48r 2  00 00 00 00  
001B80r 2  02 00 00 00  	.word $2,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$2,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001B84r 2  00 00 00 00  
001B88r 2  00 00 00 00  
001BC0r 2  02 00 00 00  	.word $2,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$2,$2,$0,$0,$0,$2,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001BC4r 2  00 00 00 00  
001BC8r 2  00 00 00 00  
001C00r 2  02 00 00 00  	.word $2,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$2,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001C04r 2  00 00 00 00  
001C08r 2  00 00 00 00  
001C40r 2  02 00 00 00  	.word $2,$0,$0,$0,$0,$0,$0,$0,$2,$2,$2,$0,$0,$0,$0,$0,$2,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001C44r 2  00 00 00 00  
001C48r 2  00 00 00 00  
001C80r 2  02 00 00 00  	.word $2,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$2,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001C84r 2  00 00 00 00  
001C88r 2  00 00 00 00  
001CC0r 2  02 00 00 00  	.word $2,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$2,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001CC4r 2  00 00 00 00  
001CC8r 2  00 00 00 00  
001D00r 2  02 00 00 00  	.word $2,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$2,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001D04r 2  00 00 00 00  
001D08r 2  00 00 00 00  
001D40r 2  02 00 00 00  	.word $2,$0,$0,$0,$0,$0,$0,$2,$6,$0,$0,$0,$0,$0,$0,$0,$2,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001D44r 2  00 00 00 00  
001D48r 2  00 00 00 00  
001D80r 2  02 00 00 00  	.word $2,$0,$0,$0,$8,$a,$2,$2,$2,$6,$0,$0,$0,$0,$0,$0,$2,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001D84r 2  00 00 00 00  
001D88r 2  08 00 0A 00  
001DC0r 2  02 00 02 00  	.word $2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2,$2
001DC4r 2  02 00 02 00  
001DC8r 2  02 00 02 00  
001E00r 2               
001E00r 2               BG2Tilemap:
001E00r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001E04r 2  00 00 00 00  
001E08r 2  00 00 00 00  
001E40r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001E44r 2  00 00 00 00  
001E48r 2  00 00 00 00  
001E80r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001E84r 2  00 00 00 00  
001E88r 2  00 00 00 00  
001EC0r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001EC4r 2  00 00 00 00  
001EC8r 2  00 00 00 00  
001F00r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001F04r 2  00 00 00 00  
001F08r 2  00 00 00 00  
001F40r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001F44r 2  00 00 00 00  
001F48r 2  00 00 00 00  
001F80r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001F84r 2  00 00 00 00  
001F88r 2  00 00 00 00  
001FC0r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
001FC4r 2  00 00 00 00  
001FC8r 2  00 00 00 00  
002000r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002004r 2  00 00 00 00  
002008r 2  00 00 00 00  
002040r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002044r 2  00 00 00 00  
002048r 2  00 00 00 00  
002080r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002084r 2  00 00 00 00  
002088r 2  00 00 00 00  
0020C0r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0020C4r 2  00 00 00 00  
0020C8r 2  00 00 00 00  
002100r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002104r 2  00 00 00 00  
002108r 2  00 00 00 00  
002140r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002144r 2  00 00 00 00  
002148r 2  00 00 00 00  
002180r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
002184r 2  00 00 00 00  
002188r 2  00 00 00 00  
0021C0r 2  00 00 00 00  	.word $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0021C4r 2  00 00 00 00  
0021C8r 2  00 00 00 00  
002200r 2  01 00 02 00  	.word $1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4
002204r 2  03 00 04 00  
002208r 2  01 00 02 00  
002240r 2  05 00 06 00  	.word $5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8
002244r 2  07 00 08 00  
002248r 2  05 00 06 00  
002280r 2  01 00 02 00  	.word $1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4
002284r 2  03 00 04 00  
002288r 2  01 00 02 00  
0022C0r 2  05 00 06 00  	.word $5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8
0022C4r 2  07 00 08 00  
0022C8r 2  05 00 06 00  
002300r 2  01 00 02 00  	.word $1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4
002304r 2  03 00 04 00  
002308r 2  01 00 02 00  
002340r 2  05 00 06 00  	.word $5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8
002344r 2  07 00 08 00  
002348r 2  05 00 06 00  
002380r 2  01 00 02 00  	.word $1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4
002384r 2  03 00 04 00  
002388r 2  01 00 02 00  
0023C0r 2  05 00 06 00  	.word $5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8
0023C4r 2  07 00 08 00  
0023C8r 2  05 00 06 00  
002400r 2  01 00 02 00  	.word $1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4
002404r 2  03 00 04 00  
002408r 2  01 00 02 00  
002440r 2  05 00 06 00  	.word $5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8
002444r 2  07 00 08 00  
002448r 2  05 00 06 00  
002480r 2  01 00 02 00  	.word $1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4
002484r 2  03 00 04 00  
002488r 2  01 00 02 00  
0024C0r 2  05 00 06 00  	.word $5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8
0024C4r 2  07 00 08 00  
0024C8r 2  05 00 06 00  
002500r 2  01 00 02 00  	.word $1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4
002504r 2  03 00 04 00  
002508r 2  01 00 02 00  
002540r 2  05 00 06 00  	.word $5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8
002544r 2  07 00 08 00  
002548r 2  05 00 06 00  
002580r 2  01 00 02 00  	.word $1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4,$1,$2,$3,$4
002584r 2  03 00 04 00  
002588r 2  01 00 02 00  
0025C0r 2  05 00 06 00  	.word $5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8,$5,$6,$7,$8
0025C4r 2  07 00 08 00  
0025C8r 2  05 00 06 00  
002600r 2               
002600r 2               
002600r 1               .include "sound.asm"
002600r 2               .segment "BANK1"
000000r 2               
000000r 2               SPCPrg:
000000r 2  20 CD EF BD  	.incbin ".\sound\sound.bin"
000004r 2  E8 2C C4 F2  
000008r 2  E8 00 C4 F3  
003ACAr 2               SPCPrgEnd:
003ACAr 2               
003ACAr 2               SPC_LENGTH = SPCPrgEnd-SPCPrg
003ACAr 2               NUM_SPC_BLOCKS = (SPC_LENGTH / 256) + 1
003ACAr 2               .define copyAddr $0 ;address to copy to (word)
003ACAr 2               .define copyIndex $2 ;index within one block (byte)
003ACAr 2               .define blockIndex $3 ;what block's being copied (byte)
003ACAr 2               .define kick $4 ;current "kick" val
003ACAr 2               
003ACAr 2               LoadSPC:
003ACAr 2  08           	php
003ACBr 2  C2 20        	a16
003ACDr 2  A9 3B 00     	lda #NUM_SPC_BLOCKS
003AD0r 2  A9 00 02     	lda #$200
003AD3r 2  85 00        	sta copyAddr ;set up copy address
003AD5r 2  64 03        	stz blockIndex
003AD7r 2  E2 20        	a8
003AD9r 2  A9 CC        	lda #$cc ;starting kick val
003ADBr 2  85 04        	sta kick
003ADDr 2               
003ADDr 2  9C 00 42     	stz $4200
003AE0r 2  78           	sei ;disable interrupts, this is kinda time sensitive
003AE1r 2               WaitForInit:
003AE1r 2  AD 40 21     	lda $2140
003AE4r 2  C9 AA        	cmp #$aa ;spc sets reg 0 to aa after it inits
003AE6r 2  D0 F9        	bne WaitForInit
003AE8r 2               
003AE8r 2               CopyLoop:
003AE8r 2  C2 20        	a16
003AEAr 2  A5 00        	lda copyAddr
003AECr 2  8D 42 21     	sta $2142 ;write destination address
003AEFr 2  18           	clc
003AF0r 2  69 00 01     	adc #$100
003AF3r 2  85 00        	sta copyAddr
003AF5r 2  E2 20        	a8
003AF7r 2               
003AF7r 2  A9 01        	lda #$1
003AF9r 2  8D 41 21     	sta $2141 ;write command
003AFCr 2  A5 04        	lda kick
003AFEr 2  8D 40 21     	sta $2140 ;"enable"
003B01r 2               WaitForAck: ;spc returns kick when it's ready to write
003B01r 2  AD 40 21     	lda $2140
003B04r 2  C5 04        	cmp kick
003B06r 2  D0 F9        	bne WaitForAck
003B08r 2               
003B08r 2               CopyBlock: ;copies blocks of 256 bytes
003B08r 2  C2 20        	a16
003B0Ar 2  A5 02        	lda copyIndex ;because blockIndex is next to copyIndex in memory hopefully
003B0Cr 2  AA           	tax	;this will get the address (look at me, so smart for making blocks 256 bytes)
003B0Dr 2  E2 20        	a8
003B0Fr 2  BF rr rr rr  	lda f:SPCPrg,x ;specify bank
003B13r 2  8D 41 21     	sta $2141
003B16r 2  A5 02        	lda copyIndex
003B18r 2  8D 40 21     	sta $2140
003B1Br 2               
003B1Br 2               WaitReceive:
003B1Br 2  CD 40 21     	cmp $2140 ;spc mirrors count after receiving data
003B1Er 2  D0 FB        	bne WaitReceive
003B20r 2  1A           	inc a
003B21r 2  85 02        	sta copyIndex
003B23r 2  C9 00        	cmp #$00 ;256 bytes in a block
003B25r 2  D0 E1        	bne CopyBlock
003B27r 2               
003B27r 2  E6 03        	inc blockIndex
003B29r 2  A5 04        	lda kick
003B2Br 2  18           	clc
003B2Cr 2  69 02        	adc #$2
003B2Er 2  29 7F        	and #$7f ;kick=previous kick "+2 to 127" -ninty
003B30r 2  85 04        	sta kick
003B32r 2  A5 03        	lda blockIndex
003B34r 2  C9 3B        	cmp #NUM_SPC_BLOCKS
003B36r 2  D0 B0        	bne CopyLoop
003B38r 2               
003B38r 2  C2 20        	a16
003B3Ar 2  A9 00 02     	lda #$200 ;entry point
003B3Dr 2  8D 42 21     	sta $2142
003B40r 2  E2 20        	a8
003B42r 2  9C 41 21     	stz $2141 ;start command
003B45r 2  A5 04        	lda kick
003B47r 2  8D 40 21     	sta $2140
003B4Ar 2  58           	cli ;enable interrupts
003B4Br 2  A2 06 00     	ldx #$6
003B4Er 2               @ClrLoop:
003B4Er 2  74 00        	stz $0,x
003B50r 2  CA           	dex
003B51r 2  D0 FB        	bne @ClrLoop
003B53r 2  28           	plp
003B54r 2  6B           	rtl
003B55r 2               
003B55r 1               
003B55r 1               .segment "CODE"
000CBDr 1               Reset:
000CBDr 1  78 18 FB C2  	InitSNES
000CC1r 1  38 A2 FF 1F  
000CC5r 1  9A 22 rr rr  
000CCCr 1               	; jsl LoadSPC
000CCCr 1  A9 00 8D 21  	LoadPalette BGPalette, $0, $10
000CD0r 1  21 A9 rr A2  
000CD4r 1  rr rr A0 20  
000CDCr 1  A9 10 8D 21  	LoadPalette BG2Palette, $10, $10
000CE0r 1  21 A9 rr A2  
000CE4r 1  rr rr A0 20  
000CECr 1  A9 80 8D 21      LoadPalette PlayerPalette, $80, $10
000CF0r 1  21 A9 rr A2  
000CF4r 1  rr rr A0 20  
000CFCr 1               	; Load Tile data to VRAM
000CFCr 1  A9 80 8D 15      LoadBlockToVRAM BGTiles, $2000, $400
000D00r 1  21 A2 00 20  
000D04r 1  8E 16 21 A9  
000D12r 1  A9 80 8D 15  	LoadBlockToVRAM BG2Tiles, $5000, $200 ;8 tiles, 4bpp
000D16r 1  21 A2 00 50  
000D1Ar 1  8E 16 21 A9  
000D28r 1  A9 80 8D 15  	LoadBlockToVRAM PlayerTiles, $6000, $1000
000D2Cr 1  21 A2 00 60  
000D30r 1  8E 16 21 A9  
000D3Er 1  A9 80 8D 15  	LoadBlockToVRAM BGTilemap, $0000, $800
000D42r 1  21 A2 00 00  
000D46r 1  8E 16 21 A9  
000D54r 1  A9 80 8D 15  	LoadBlockToVRAM BG2Tilemap, $4000, $800
000D58r 1  21 A2 00 40  
000D5Cr 1  8E 16 21 A9  
000D6Ar 1                   ; Setup Video modes and other stuff, then turn on the screen
000D6Ar 1  20 rr rr         jsr SetupVideo
000D6Dr 1               
000D6Dr 1  20 rr rr     	jsr InitSprites
000D70r 1  A9 81        	lda #VBLANK_NMI | AUTOREAD
000D72r 1  8D 00 42     	sta PPUNMI ;enable vblank interrupt and joypad read
000D75r 1  C2 20        	a16
000D77r 1  A9 1F 01     	lda #$11f
000D7Ar 1  85 14        	sta scrollY
000D7Cr 1               
000D7Cr 1  20 rr rr     	jsr InitPlayer
000D7Fr 1               
000D7Fr 1               MainLoop:
000D7Fr 1  E2 20        	a8
000D81r 1  A9 01        	lda #$1
000D83r 1  85 17        	sta frameStatus ;how we check if the program's done executing
000D85r 1  C2 20        	a16
000D87r 1  AD 18 42     	lda JOY1CUR ;p1 joypad read address
000D8Ar 1  85 10        	sta joypad
000D8Cr 1  20 rr rr     	jsr HandlePlayerMovement
000D8Fr 1               
000D8Fr 1               ; SetupScrollTable:
000D8Fr 1               	; clc
000D8Fr 1               	; lda scroll2X
000D8Fr 1               	; clc
000D8Fr 1               	; adc #$5
000D8Fr 1               	; sta scroll2X
000D8Fr 1               	; ror
000D8Fr 1               	; sta BG2ScrollTable
000D8Fr 1               	; ror
000D8Fr 1               	; sta BG2ScrollTable+2
000D8Fr 1               	; ror
000D8Fr 1               	; sta BG2ScrollTable+4
000D8Fr 1               	; ror
000D8Fr 1               	; sta BG2ScrollTable+6
000D8Fr 1               	; ror
000D8Fr 1               	; sta BG2ScrollTable+8
000D8Fr 1               	; a8
000D8Fr 1               
000D8Fr 1  E2 20        	a8
000D91r 1  64 17        	stz frameStatus
000D93r 1  CB           	wai
000D94r 1  4C rr rr     	jmp MainLoop
000D97r 1               
000D97r 1               VBlank:
000D97r 1  08           	php
000D98r 1  8B           	phb
000D99r 1  0B           	phd
000D9Ar 1  48           	pha ;push regs to stack so if my main loop is ever too long it'll continue without
000D9Br 1  DA           	phx ;fucking up
000D9Cr 1  5A           	phy
000D9Dr 1  A5 17        	lda frameStatus
000D9Fr 1  D0 2F        	bne SkipVblank
000DA1r 1  A9 80        	lda #FORCEBLANK
000DA3r 1  8D 00 21     	sta PPUBRIGHT
000DA6r 1  C2 20 A5 12  	SetHScroll scrollX
000DAAr 1  E2 20 8D 0D  
000DAEr 1  21 EB 8D 0D  
000DB3r 1  C2 20 A5 14  	SetVScroll scrollY
000DB7r 1  E2 20 8D 0E  
000DBBr 1  21 EB 8D 0E  
000DC0r 1               	;DMATilemapMirror #$2
000DC0r 1  20 rr rr     	jsr DMASpriteMirror
000DC3r 1  A9 01        	lda #$1 ;start dma transfer on channel 1 (change to 3 if i reenable dmatilemapmirror)
000DC5r 1  8D 0B 42     	sta $420b
000DC8r 1               	; jsr SetupHDMA
000DC8r 1  A9 0F        	lda #$F ;disable force blank, set back to max brightness
000DCAr 1  8D 00 21     	sta PPUBRIGHT
000DCDr 1  AD 10 42     	lda $4210 ;clear vblank flag
000DD0r 1               SkipVblank:
000DD0r 1  7A           	ply
000DD1r 1  FA           	plx
000DD2r 1  68           	pla
000DD3r 1  2B           	pld
000DD4r 1  AB           	plb
000DD5r 1  28           	plp
000DD6r 1               
000DD6r 1  40           	rti
000DD7r 1               
000DD7r 1               SetupVideo:
000DD7r 1  08               php
000DD8r 1               
000DD8r 1  A9 63        	lda #OBSIZE_16_32 | $3
000DDAr 1  8D 01 21     	sta OBSEL ;16x16 or 32x32 sprites, sprite data @ $6000
000DDDr 1  9C 02 21     	stz OAMADDR ;set OAM write cursor to $0
000DE0r 1  9C 03 21     	stz OAMADDR+1
000DE3r 1  A9 11        	lda #%00010001
000DE5r 1  8D 05 21         sta BGMODE ;mode 1, 16x16 tiles in bg0, 8x8 tiles in bgs 1 and 2
000DE8r 1               
000DE8r 1  A9 00            lda #$0 ;bg1 tilemap offset $0, size 32x32
000DEAr 1  8D 07 21         sta NTADDR
000DEDr 1               
000DEDr 1  A9 40        	lda #$40  ; bg2 tilemap offset: $4000, size: 32x32
000DEFr 1  8D 08 21     	sta NTADDR+1
000DF2r 1               
000DF2r 1  A9 52        	lda #$52
000DF4r 1  8D 0B 21         sta BGCHRADDR ;bg2 chr vram addr to $5000, bg1 chr vram offset $2000
000DF7r 1               
000DF7r 1  A9 13            lda #%00010011 ;enable bg0, bg1, and sprites
000DF9r 1  8D 2C 21         sta BLENDMAIN
000DFCr 1               
000DFCr 1  A9 FF            lda #$FF ;bg1 horizontal scroll to -1 to fix weird stuff
000DFEr 1  8D 0E 21         sta BGSCROLLY
000E01r 1  8D 0E 21         sta BGSCROLLY
000E04r 1               
000E04r 1  A9 0F            lda #$F ;max brightness
000E06r 1  8D 00 21         sta PPUBRIGHT
000E09r 1               
000E09r 1  28               plp
000E0Ar 1  60               rts
000E0Br 1               
000E0Br 1               
000E0Br 1               ; ScrollTable:
000E0Br 1               	; .byte $80
000E0Br 1               	; .word $0000
000E0Br 1               	; .byte $10
000E0Br 1               	; .word BG2ScrollTable+8
000E0Br 1               	; .byte $10
000E0Br 1               	; .word BG2ScrollTable+6
000E0Br 1               	; .byte $10
000E0Br 1               	; .word BG2ScrollTable+4
000E0Br 1               	; .byte $10
000E0Br 1               	; .word BG2ScrollTable+2
000E0Br 1               	; .byte $10
000E0Br 1               	; .word BG2ScrollTable
000E0Br 1               	; .byte $00
000E0Br 1               
000E0Br 1               ; PaletteIndexTable: ;needed because palette index auto-increments after every write
000E0Br 1               ; ;400 instead of $4 because the endianness of the CGRAM write port is reversed for some reason
000E0Br 1               	; .byte $C
000E0Br 1               	; .word $400
000E0Br 1               	; .byte $C
000E0Br 1               	; .word $400
000E0Br 1               	; .byte $C
000E0Br 1               	; .word $400
000E0Br 1               	; .byte $C
000E0Br 1               	; .word $400
000E0Br 1               	; .byte $C
000E0Br 1               	; .word $400
000E0Br 1               	; .byte $C
000E0Br 1               	; .word $400
000E0Br 1               	; .byte $C
000E0Br 1               	; .word $400
000E0Br 1               	; .byte $C
000E0Br 1               	; .word $400
000E0Br 1               	; .byte $C
000E0Br 1               	; .word $400
000E0Br 1               	; .byte $C
000E0Br 1               	; .word $400
000E0Br 1               	; .byte $C
000E0Br 1               	; .word $400
000E0Br 1               	; .byte $00
000E0Br 1               
000E0Br 1               
000E0Br 1               ; GradientTable:
000E0Br 1               	; .byte $C
000E0Br 1               	; .word $71C4; R:4 G:14 B:28
000E0Br 1               	; .byte $C
000E0Br 1               	; .word $5DC7; R:7 G:14 B:23
000E0Br 1               	; .byte $C
000E0Br 1               	; .word $51CB; R:11 G:14 B:20
000E0Br 1               	; .byte $C
000E0Br 1               	; .word $49CD; R:13 G:14 B:18
000E0Br 1               	; .byte $C
000E0Br 1               	; .word $41F1; R:17 G:15 B:16
000E0Br 1               	; .byte $C
000E0Br 1               	; .word $35F4; R:20 G:15 B:13
000E0Br 1               	; .byte $C
000E0Br 1               	; .word $2DF7; R:23 G:15 B:11
000E0Br 1               	; .byte $C
000E0Br 1               	; .word $221A; R:26 G:16 B:8
000E0Br 1               	; .byte $C
000E0Br 1               	; .word $1A1C; R:28 G:16 B:6
000E0Br 1               	; .byte $C
000E0Br 1               	; .word $121F; R:31 G:16 B:4
000E0Br 1               	; .byte $C
000E0Br 1               	; .word $71A1
000E0Br 1               	; .byte $00
000E0Br 1               
000E0Br 1               DMASpriteMirror:
000E0Br 1  9C 02 21     	stz OAMADDR		; set OAM write cursor to 0
000E0Er 1  9C 03 21     	stz OAMADDR+1
000E11r 1               
000E11r 1  A9 00        	lda #DMA_LINEAR
000E13r 1  8D 00 43     	sta DMAMODE
000E16r 1  A9 04        	lda #$04 ;write to $2104 (OAMDATA)
000E18r 1  8D 01 43     	sta DMAPPUREG
000E1Br 1  A0 00 04     	ldy #OamMirror
000E1Er 1  8C 02 43     	sty DMAADDR		; source offset
000E21r 1  A9 7E        	lda #$7E
000E23r 1  8D 04 43     	sta DMAADDRBANK		; bank address = $7E  (work RAM)
000E26r 1  A0 20 02     	ldy #$0220
000E29r 1  8C 05 43     	sty DMALEN		; number of bytes to transfer
000E2Cr 1  60           	rts
000E2Dr 1               
000E2Dr 1               
